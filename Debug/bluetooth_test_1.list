
bluetooth_test_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd78  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fbc  0800deb8  0800deb8  0001deb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fe74  0800fe74  0001fe74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fe7c  0800fe7c  0001fe7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fe80  0800fe80  0001fe80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  20000004  0800fe84  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000098  0800ff18  00020098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000004e  20000134  0800ffb1  00020134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000184  0800ffff  00020184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 0000008a  20000198  08010010  00020198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000014d0  20000224  0801009a  00020224  2**2
                  ALLOC
 12 ._user_heap_stack 00001404  200016f4  0801009a  000216f4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020222  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000883  200301e4  200301e4  00030000  2**2
                  ALLOC
 17 .debug_info   0002f320  00000000  00000000  00020252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 000066b2  00000000  00000000  0004f572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002798  00000000  00000000  00055c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 000024b8  00000000  00000000  000583c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  000314d8  00000000  00000000  0005a878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0002f077  00000000  00000000  0008bd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000fb064  00000000  00000000  000badc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  001b5e2b  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000ad68  00000000  00000000  001b5e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000224 	.word	0x20000224
 800015c:	00000000 	.word	0x00000000
 8000160:	0800dea0 	.word	0x0800dea0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000228 	.word	0x20000228
 800017c:	0800dea0 	.word	0x0800dea0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	; 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295
 800080c:	f04f 30ff 	movne.w	r0, #4294967295
 8000810:	f000 b974 	b.w	8000afc <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9d08      	ldr	r5, [sp, #32]
 8000832:	4604      	mov	r4, r0
 8000834:	468e      	mov	lr, r1
 8000836:	2b00      	cmp	r3, #0
 8000838:	d14d      	bne.n	80008d6 <__udivmoddi4+0xaa>
 800083a:	428a      	cmp	r2, r1
 800083c:	4694      	mov	ip, r2
 800083e:	d969      	bls.n	8000914 <__udivmoddi4+0xe8>
 8000840:	fab2 f282 	clz	r2, r2
 8000844:	b152      	cbz	r2, 800085c <__udivmoddi4+0x30>
 8000846:	fa01 f302 	lsl.w	r3, r1, r2
 800084a:	f1c2 0120 	rsb	r1, r2, #32
 800084e:	fa20 f101 	lsr.w	r1, r0, r1
 8000852:	fa0c fc02 	lsl.w	ip, ip, r2
 8000856:	ea41 0e03 	orr.w	lr, r1, r3
 800085a:	4094      	lsls	r4, r2
 800085c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000860:	0c21      	lsrs	r1, r4, #16
 8000862:	fbbe f6f8 	udiv	r6, lr, r8
 8000866:	fa1f f78c 	uxth.w	r7, ip
 800086a:	fb08 e316 	mls	r3, r8, r6, lr
 800086e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000872:	fb06 f107 	mul.w	r1, r6, r7
 8000876:	4299      	cmp	r1, r3
 8000878:	d90a      	bls.n	8000890 <__udivmoddi4+0x64>
 800087a:	eb1c 0303 	adds.w	r3, ip, r3
 800087e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000882:	f080 811f 	bcs.w	8000ac4 <__udivmoddi4+0x298>
 8000886:	4299      	cmp	r1, r3
 8000888:	f240 811c 	bls.w	8000ac4 <__udivmoddi4+0x298>
 800088c:	3e02      	subs	r6, #2
 800088e:	4463      	add	r3, ip
 8000890:	1a5b      	subs	r3, r3, r1
 8000892:	b2a4      	uxth	r4, r4
 8000894:	fbb3 f0f8 	udiv	r0, r3, r8
 8000898:	fb08 3310 	mls	r3, r8, r0, r3
 800089c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008a0:	fb00 f707 	mul.w	r7, r0, r7
 80008a4:	42a7      	cmp	r7, r4
 80008a6:	d90a      	bls.n	80008be <__udivmoddi4+0x92>
 80008a8:	eb1c 0404 	adds.w	r4, ip, r4
 80008ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80008b0:	f080 810a 	bcs.w	8000ac8 <__udivmoddi4+0x29c>
 80008b4:	42a7      	cmp	r7, r4
 80008b6:	f240 8107 	bls.w	8000ac8 <__udivmoddi4+0x29c>
 80008ba:	4464      	add	r4, ip
 80008bc:	3802      	subs	r0, #2
 80008be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008c2:	1be4      	subs	r4, r4, r7
 80008c4:	2600      	movs	r6, #0
 80008c6:	b11d      	cbz	r5, 80008d0 <__udivmoddi4+0xa4>
 80008c8:	40d4      	lsrs	r4, r2
 80008ca:	2300      	movs	r3, #0
 80008cc:	e9c5 4300 	strd	r4, r3, [r5]
 80008d0:	4631      	mov	r1, r6
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d909      	bls.n	80008ee <__udivmoddi4+0xc2>
 80008da:	2d00      	cmp	r5, #0
 80008dc:	f000 80ef 	beq.w	8000abe <__udivmoddi4+0x292>
 80008e0:	2600      	movs	r6, #0
 80008e2:	e9c5 0100 	strd	r0, r1, [r5]
 80008e6:	4630      	mov	r0, r6
 80008e8:	4631      	mov	r1, r6
 80008ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ee:	fab3 f683 	clz	r6, r3
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d14a      	bne.n	800098c <__udivmoddi4+0x160>
 80008f6:	428b      	cmp	r3, r1
 80008f8:	d302      	bcc.n	8000900 <__udivmoddi4+0xd4>
 80008fa:	4282      	cmp	r2, r0
 80008fc:	f200 80f9 	bhi.w	8000af2 <__udivmoddi4+0x2c6>
 8000900:	1a84      	subs	r4, r0, r2
 8000902:	eb61 0303 	sbc.w	r3, r1, r3
 8000906:	2001      	movs	r0, #1
 8000908:	469e      	mov	lr, r3
 800090a:	2d00      	cmp	r5, #0
 800090c:	d0e0      	beq.n	80008d0 <__udivmoddi4+0xa4>
 800090e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000912:	e7dd      	b.n	80008d0 <__udivmoddi4+0xa4>
 8000914:	b902      	cbnz	r2, 8000918 <__udivmoddi4+0xec>
 8000916:	deff      	udf	#255	; 0xff
 8000918:	fab2 f282 	clz	r2, r2
 800091c:	2a00      	cmp	r2, #0
 800091e:	f040 8092 	bne.w	8000a46 <__udivmoddi4+0x21a>
 8000922:	eba1 010c 	sub.w	r1, r1, ip
 8000926:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800092a:	fa1f fe8c 	uxth.w	lr, ip
 800092e:	2601      	movs	r6, #1
 8000930:	0c20      	lsrs	r0, r4, #16
 8000932:	fbb1 f3f7 	udiv	r3, r1, r7
 8000936:	fb07 1113 	mls	r1, r7, r3, r1
 800093a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093e:	fb0e f003 	mul.w	r0, lr, r3
 8000942:	4288      	cmp	r0, r1
 8000944:	d908      	bls.n	8000958 <__udivmoddi4+0x12c>
 8000946:	eb1c 0101 	adds.w	r1, ip, r1
 800094a:	f103 38ff 	add.w	r8, r3, #4294967295
 800094e:	d202      	bcs.n	8000956 <__udivmoddi4+0x12a>
 8000950:	4288      	cmp	r0, r1
 8000952:	f200 80cb 	bhi.w	8000aec <__udivmoddi4+0x2c0>
 8000956:	4643      	mov	r3, r8
 8000958:	1a09      	subs	r1, r1, r0
 800095a:	b2a4      	uxth	r4, r4
 800095c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000960:	fb07 1110 	mls	r1, r7, r0, r1
 8000964:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000968:	fb0e fe00 	mul.w	lr, lr, r0
 800096c:	45a6      	cmp	lr, r4
 800096e:	d908      	bls.n	8000982 <__udivmoddi4+0x156>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f100 31ff 	add.w	r1, r0, #4294967295
 8000978:	d202      	bcs.n	8000980 <__udivmoddi4+0x154>
 800097a:	45a6      	cmp	lr, r4
 800097c:	f200 80bb 	bhi.w	8000af6 <__udivmoddi4+0x2ca>
 8000980:	4608      	mov	r0, r1
 8000982:	eba4 040e 	sub.w	r4, r4, lr
 8000986:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800098a:	e79c      	b.n	80008c6 <__udivmoddi4+0x9a>
 800098c:	f1c6 0720 	rsb	r7, r6, #32
 8000990:	40b3      	lsls	r3, r6
 8000992:	fa22 fc07 	lsr.w	ip, r2, r7
 8000996:	ea4c 0c03 	orr.w	ip, ip, r3
 800099a:	fa20 f407 	lsr.w	r4, r0, r7
 800099e:	fa01 f306 	lsl.w	r3, r1, r6
 80009a2:	431c      	orrs	r4, r3
 80009a4:	40f9      	lsrs	r1, r7
 80009a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009aa:	fa00 f306 	lsl.w	r3, r0, r6
 80009ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80009b2:	0c20      	lsrs	r0, r4, #16
 80009b4:	fa1f fe8c 	uxth.w	lr, ip
 80009b8:	fb09 1118 	mls	r1, r9, r8, r1
 80009bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009c0:	fb08 f00e 	mul.w	r0, r8, lr
 80009c4:	4288      	cmp	r0, r1
 80009c6:	fa02 f206 	lsl.w	r2, r2, r6
 80009ca:	d90b      	bls.n	80009e4 <__udivmoddi4+0x1b8>
 80009cc:	eb1c 0101 	adds.w	r1, ip, r1
 80009d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80009d4:	f080 8088 	bcs.w	8000ae8 <__udivmoddi4+0x2bc>
 80009d8:	4288      	cmp	r0, r1
 80009da:	f240 8085 	bls.w	8000ae8 <__udivmoddi4+0x2bc>
 80009de:	f1a8 0802 	sub.w	r8, r8, #2
 80009e2:	4461      	add	r1, ip
 80009e4:	1a09      	subs	r1, r1, r0
 80009e6:	b2a4      	uxth	r4, r4
 80009e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80009ec:	fb09 1110 	mls	r1, r9, r0, r1
 80009f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80009f8:	458e      	cmp	lr, r1
 80009fa:	d908      	bls.n	8000a0e <__udivmoddi4+0x1e2>
 80009fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000a00:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a04:	d26c      	bcs.n	8000ae0 <__udivmoddi4+0x2b4>
 8000a06:	458e      	cmp	lr, r1
 8000a08:	d96a      	bls.n	8000ae0 <__udivmoddi4+0x2b4>
 8000a0a:	3802      	subs	r0, #2
 8000a0c:	4461      	add	r1, ip
 8000a0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a12:	fba0 9402 	umull	r9, r4, r0, r2
 8000a16:	eba1 010e 	sub.w	r1, r1, lr
 8000a1a:	42a1      	cmp	r1, r4
 8000a1c:	46c8      	mov	r8, r9
 8000a1e:	46a6      	mov	lr, r4
 8000a20:	d356      	bcc.n	8000ad0 <__udivmoddi4+0x2a4>
 8000a22:	d053      	beq.n	8000acc <__udivmoddi4+0x2a0>
 8000a24:	b15d      	cbz	r5, 8000a3e <__udivmoddi4+0x212>
 8000a26:	ebb3 0208 	subs.w	r2, r3, r8
 8000a2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000a2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000a32:	fa22 f306 	lsr.w	r3, r2, r6
 8000a36:	40f1      	lsrs	r1, r6
 8000a38:	431f      	orrs	r7, r3
 8000a3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000a3e:	2600      	movs	r6, #0
 8000a40:	4631      	mov	r1, r6
 8000a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a46:	f1c2 0320 	rsb	r3, r2, #32
 8000a4a:	40d8      	lsrs	r0, r3
 8000a4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a50:	fa21 f303 	lsr.w	r3, r1, r3
 8000a54:	4091      	lsls	r1, r2
 8000a56:	4301      	orrs	r1, r0
 8000a58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5c:	fa1f fe8c 	uxth.w	lr, ip
 8000a60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a64:	fb07 3610 	mls	r6, r7, r0, r3
 8000a68:	0c0b      	lsrs	r3, r1, #16
 8000a6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000a72:	429e      	cmp	r6, r3
 8000a74:	fa04 f402 	lsl.w	r4, r4, r2
 8000a78:	d908      	bls.n	8000a8c <__udivmoddi4+0x260>
 8000a7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a82:	d22f      	bcs.n	8000ae4 <__udivmoddi4+0x2b8>
 8000a84:	429e      	cmp	r6, r3
 8000a86:	d92d      	bls.n	8000ae4 <__udivmoddi4+0x2b8>
 8000a88:	3802      	subs	r0, #2
 8000a8a:	4463      	add	r3, ip
 8000a8c:	1b9b      	subs	r3, r3, r6
 8000a8e:	b289      	uxth	r1, r1
 8000a90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a94:	fb07 3316 	mls	r3, r7, r6, r3
 8000a98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000aa0:	428b      	cmp	r3, r1
 8000aa2:	d908      	bls.n	8000ab6 <__udivmoddi4+0x28a>
 8000aa4:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000aac:	d216      	bcs.n	8000adc <__udivmoddi4+0x2b0>
 8000aae:	428b      	cmp	r3, r1
 8000ab0:	d914      	bls.n	8000adc <__udivmoddi4+0x2b0>
 8000ab2:	3e02      	subs	r6, #2
 8000ab4:	4461      	add	r1, ip
 8000ab6:	1ac9      	subs	r1, r1, r3
 8000ab8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000abc:	e738      	b.n	8000930 <__udivmoddi4+0x104>
 8000abe:	462e      	mov	r6, r5
 8000ac0:	4628      	mov	r0, r5
 8000ac2:	e705      	b.n	80008d0 <__udivmoddi4+0xa4>
 8000ac4:	4606      	mov	r6, r0
 8000ac6:	e6e3      	b.n	8000890 <__udivmoddi4+0x64>
 8000ac8:	4618      	mov	r0, r3
 8000aca:	e6f8      	b.n	80008be <__udivmoddi4+0x92>
 8000acc:	454b      	cmp	r3, r9
 8000ace:	d2a9      	bcs.n	8000a24 <__udivmoddi4+0x1f8>
 8000ad0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ad4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ad8:	3801      	subs	r0, #1
 8000ada:	e7a3      	b.n	8000a24 <__udivmoddi4+0x1f8>
 8000adc:	4646      	mov	r6, r8
 8000ade:	e7ea      	b.n	8000ab6 <__udivmoddi4+0x28a>
 8000ae0:	4620      	mov	r0, r4
 8000ae2:	e794      	b.n	8000a0e <__udivmoddi4+0x1e2>
 8000ae4:	4640      	mov	r0, r8
 8000ae6:	e7d1      	b.n	8000a8c <__udivmoddi4+0x260>
 8000ae8:	46d0      	mov	r8, sl
 8000aea:	e77b      	b.n	80009e4 <__udivmoddi4+0x1b8>
 8000aec:	3b02      	subs	r3, #2
 8000aee:	4461      	add	r1, ip
 8000af0:	e732      	b.n	8000958 <__udivmoddi4+0x12c>
 8000af2:	4630      	mov	r0, r6
 8000af4:	e709      	b.n	800090a <__udivmoddi4+0xde>
 8000af6:	4464      	add	r4, ip
 8000af8:	3802      	subs	r0, #2
 8000afa:	e742      	b.n	8000982 <__udivmoddi4+0x156>

08000afc <__aeabi_idiv0>:
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <LL_EXTI_EnableIT_32_63+0x24>)
 8000b0a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000b0e:	4905      	ldr	r1, [pc, #20]	; (8000b24 <LL_EXTI_EnableIT_32_63+0x24>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	58000800 	.word	0x58000800

08000b28 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
}
 8000b4e:	bf00      	nop
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b085      	sub	sp, #20
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b66:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000b6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b7a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4013      	ands	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b84:	68fb      	ldr	r3, [r7, #12]
}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000b96:	f002 fc35 	bl	8003404 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000b9a:	f002 fc39 	bl	8003410 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000b9e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000ba2:	f7ff ffad 	bl	8000b00 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000ba6:	f008 fd49 	bl	800963c <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000baa:	f000 f821 	bl	8000bf0 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000bae:	f000 f8c3 	bl	8000d38 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000bb2:	bf00      	nop
}
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000bb8:	b5b0      	push	{r4, r5, r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <APPD_EnableCPU2+0x34>)
 8000bc0:	1d3c      	adds	r4, r7, #4
 8000bc2:	461d      	mov	r5, r3
 8000bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bcc:	c403      	stmia	r4!, {r0, r1}
 8000bce:	8022      	strh	r2, [r4, #0]
 8000bd0:	3402      	adds	r4, #2
 8000bd2:	0c13      	lsrs	r3, r2, #16
 8000bd4:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000bd6:	f008 fc45 	bl	8009464 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f007 fee0 	bl	80089a2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000be2:	bf00      	nop
}
 8000be4:	3720      	adds	r7, #32
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bdb0      	pop	{r4, r5, r7, pc}
 8000bea:	bf00      	nop
 8000bec:	0800deb8 	.word	0x0800deb8

08000bf0 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c10:	2300      	movs	r3, #0
 8000c12:	77fb      	strb	r3, [r7, #31]
 8000c14:	e038      	b.n	8000c88 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000c16:	7ffb      	ldrb	r3, [r7, #31]
 8000c18:	4a44      	ldr	r2, [pc, #272]	; (8000d2c <APPD_SetCPU2GpioConfig+0x13c>)
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	4413      	add	r3, r2
 8000c1e:	799b      	ldrb	r3, [r3, #6]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d02b      	beq.n	8000c7c <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000c24:	7ffb      	ldrb	r3, [r7, #31]
 8000c26:	4a41      	ldr	r2, [pc, #260]	; (8000d2c <APPD_SetCPU2GpioConfig+0x13c>)
 8000c28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c2c:	4a40      	ldr	r2, [pc, #256]	; (8000d30 <APPD_SetCPU2GpioConfig+0x140>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d01b      	beq.n	8000c6a <APPD_SetCPU2GpioConfig+0x7a>
 8000c32:	4a3f      	ldr	r2, [pc, #252]	; (8000d30 <APPD_SetCPU2GpioConfig+0x140>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d823      	bhi.n	8000c80 <APPD_SetCPU2GpioConfig+0x90>
 8000c38:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c3c:	d003      	beq.n	8000c46 <APPD_SetCPU2GpioConfig+0x56>
 8000c3e:	4a3d      	ldr	r2, [pc, #244]	; (8000d34 <APPD_SetCPU2GpioConfig+0x144>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d009      	beq.n	8000c58 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8000c44:	e01c      	b.n	8000c80 <APPD_SetCPU2GpioConfig+0x90>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000c46:	7ffb      	ldrb	r3, [r7, #31]
 8000c48:	4a38      	ldr	r2, [pc, #224]	; (8000d2c <APPD_SetCPU2GpioConfig+0x13c>)
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	4413      	add	r3, r2
 8000c4e:	889a      	ldrh	r2, [r3, #4]
 8000c50:	8bbb      	ldrh	r3, [r7, #28]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	83bb      	strh	r3, [r7, #28]
          break;
 8000c56:	e014      	b.n	8000c82 <APPD_SetCPU2GpioConfig+0x92>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000c58:	7ffb      	ldrb	r3, [r7, #31]
 8000c5a:	4a34      	ldr	r2, [pc, #208]	; (8000d2c <APPD_SetCPU2GpioConfig+0x13c>)
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	4413      	add	r3, r2
 8000c60:	889a      	ldrh	r2, [r3, #4]
 8000c62:	8b7b      	ldrh	r3, [r7, #26]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	837b      	strh	r3, [r7, #26]
          break;
 8000c68:	e00b      	b.n	8000c82 <APPD_SetCPU2GpioConfig+0x92>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000c6a:	7ffb      	ldrb	r3, [r7, #31]
 8000c6c:	4a2f      	ldr	r2, [pc, #188]	; (8000d2c <APPD_SetCPU2GpioConfig+0x13c>)
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	4413      	add	r3, r2
 8000c72:	889a      	ldrh	r2, [r3, #4]
 8000c74:	8b3b      	ldrh	r3, [r7, #24]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	833b      	strh	r3, [r7, #24]
          break;
 8000c7a:	e002      	b.n	8000c82 <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000c7c:	bf00      	nop
 8000c7e:	e000      	b.n	8000c82 <APPD_SetCPU2GpioConfig+0x92>
          break;
 8000c80:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c82:	7ffb      	ldrb	r3, [r7, #31]
 8000c84:	3301      	adds	r3, #1
 8000c86:	77fb      	strb	r3, [r7, #31]
 8000c88:	7ffb      	ldrb	r3, [r7, #31]
 8000c8a:	2b25      	cmp	r3, #37	; 0x25
 8000c8c:	d9c3      	bls.n	8000c16 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000c9a:	8bbb      	ldrh	r3, [r7, #28]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d014      	beq.n	8000cca <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000ca0:	8bbb      	ldrh	r3, [r7, #28]
 8000ca2:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f7ff ff3f 	bl	8000b28 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff ff55 	bl	8000b5a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb8:	f003 f87c 	bl	8003db4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000cbc:	8bbb      	ldrh	r3, [r7, #28]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc6:	f003 f9e5 	bl	8004094 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000cca:	8b7b      	ldrh	r3, [r7, #26]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d012      	beq.n	8000cf6 <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000cd0:	8b7b      	ldrh	r3, [r7, #26]
 8000cd2:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	f7ff ff27 	bl	8000b28 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000cda:	2002      	movs	r0, #2
 8000cdc:	f7ff ff3d 	bl	8000b5a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4813      	ldr	r0, [pc, #76]	; (8000d34 <APPD_SetCPU2GpioConfig+0x144>)
 8000ce6:	f003 f865 	bl	8003db4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000cea:	8b7b      	ldrh	r3, [r7, #26]
 8000cec:	2200      	movs	r2, #0
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4810      	ldr	r0, [pc, #64]	; (8000d34 <APPD_SetCPU2GpioConfig+0x144>)
 8000cf2:	f003 f9cf 	bl	8004094 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000cf6:	8b3b      	ldrh	r3, [r7, #24]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d013      	beq.n	8000d24 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000cfc:	8b3b      	ldrh	r3, [r7, #24]
 8000cfe:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d00:	2004      	movs	r0, #4
 8000d02:	f7ff ff11 	bl	8000b28 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000d06:	2004      	movs	r0, #4
 8000d08:	f7ff ff27 	bl	8000b5a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4807      	ldr	r0, [pc, #28]	; (8000d30 <APPD_SetCPU2GpioConfig+0x140>)
 8000d12:	f003 f84f 	bl	8003db4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000d16:	8b3b      	ldrh	r3, [r7, #24]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4804      	ldr	r0, [pc, #16]	; (8000d30 <APPD_SetCPU2GpioConfig+0x140>)
 8000d1e:	f003 f9b9 	bl	8004094 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000d22:	bf00      	nop
 8000d24:	bf00      	nop
}
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	0800fac0 	.word	0x0800fac0
 8000d30:	48000800 	.word	0x48000800
 8000d34:	48000400 	.word	0x48000400

08000d38 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000d3c:	bf00      	nop
}
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000d4a:	f002 f9bd 	bl	80030c8 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000d4e:	bf00      	nop
}
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b084      	sub	sp, #16
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	60f8      	str	r0, [r7, #12]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	607a      	str	r2, [r7, #4]
 8000d5e:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000d60:	897a      	ldrh	r2, [r7, #10]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	68f9      	ldr	r1, [r7, #12]
 8000d66:	2000      	movs	r0, #0
 8000d68:	f001 fb34 	bl	80023d4 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000d6c:	bf00      	nop
}
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <LL_C2_PWR_SetPowerMode+0x28>)
 8000d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d82:	f023 0207 	bic.w	r2, r3, #7
 8000d86:	4905      	ldr	r1, [pc, #20]	; (8000d9c <LL_C2_PWR_SetPowerMode+0x28>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	58000400 	.word	0x58000400

08000da0 <LL_EXTI_EnableIT_32_63>:
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <LL_EXTI_EnableIT_32_63+0x24>)
 8000daa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000dae:	4905      	ldr	r1, [pc, #20]	; (8000dc4 <LL_EXTI_EnableIT_32_63+0x24>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	58000800 	.word	0x58000800

08000dc8 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000dd6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000de2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	021b      	lsls	r3, r3, #8
 8000dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dee:	4313      	orrs	r3, r2
 8000df0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	cafecafe 	.word	0xcafecafe

08000e04 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	608b      	str	r3, [r1, #8]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000e84:	d101      	bne.n	8000e8a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000eaa:	d101      	bne.n	8000eb0 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000eac:	2301      	movs	r3, #1
 8000eae:	e000      	b.n	8000eb2 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <LL_AHB3_GRP1_EnableClock>:
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000eca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4013      	ands	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
}
 8000ee2:	bf00      	nop
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <LL_DBGMCU_GetRevisionID+0x18>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	0c1b      	lsrs	r3, r3, #16
 8000efa:	b29b      	uxth	r3, r3
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e0042000 	.word	0xe0042000

08000f0c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	041b      	lsls	r3, r3, #16
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	605a      	str	r2, [r3, #4]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	431a      	orrs	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	605a      	str	r2, [r3, #4]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	695a      	ldr	r2, [r3, #20]
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	041b      	lsls	r3, r3, #16
 8000f64:	431a      	orrs	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	615a      	str	r2, [r3, #20]
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	695a      	ldr	r2, [r3, #20]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	615a      	str	r2, [r3, #20]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	609a      	str	r2, [r3, #8]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	619a      	str	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	22ff      	movs	r2, #255	; 0xff
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	22ca      	movs	r2, #202	; 0xca
 8000ff6:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2253      	movs	r2, #83	; 0x53
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f023 0207 	bic.w	r2, r3, #7
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	609a      	str	r2, [r3, #8]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <MX_APPE_Config+0x18>)
 8001036:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800103a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800103c:	f000 f826 	bl	800108c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001040:	f000 f866 	bl	8001110 <Config_HSE>

  return;
 8001044:	bf00      	nop
}
 8001046:	bd80      	pop	{r7, pc}
 8001048:	58004000 	.word	0x58004000

0800104c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001050:	f000 f872 	bl	8001138 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001054:	f000 f88a 	bl	800116c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001058:	4904      	ldr	r1, [pc, #16]	; (800106c <MX_APPE_Init+0x20>)
 800105a:	2000      	movs	r0, #0
 800105c:	f000 ffb2 	bl	8001fc4 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001060:	f000 f892 	bl	8001188 <appe_Tl_Init>
   * From now, the application is waiting for the ready event (VS_HCI_C2_Ready)
   * received on the system channel before starting the Stack
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */
   APPD_Init();
 8001064:	f7ff fd95 	bl	8000b92 <APPD_Init>
/* USER CODE END APPE_Init_2 */
   return;
 8001068:	bf00      	nop
}
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000384 	.word	0x20000384

08001070 <Init_Smps>:

void Init_Smps(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001074:	bf00      	nop
}
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <Init_Exti>:

void Init_Exti(void)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001082:	2050      	movs	r0, #80	; 0x50
 8001084:	f7ff fe8c 	bl	8000da0 <LL_EXTI_EnableIT_32_63>

  return;
 8001088:	bf00      	nop
}
 800108a:	bd80      	pop	{r7, pc}

0800108c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8001090:	f000 f804 	bl	800109c <Reset_BackupDomain>

  Reset_IPCC();
 8001094:	f000 f81a 	bl	80010cc <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001098:	bf00      	nop
}
 800109a:	bd80      	pop	{r7, pc}

0800109c <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80010a0:	f7ff fee6 	bl	8000e70 <LL_RCC_IsActiveFlag_PINRST>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d00d      	beq.n	80010c6 <Reset_BackupDomain+0x2a>
 80010aa:	f7ff fef4 	bl	8000e96 <LL_RCC_IsActiveFlag_SFTRST>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d108      	bne.n	80010c6 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80010b4:	f003 f842 	bl	800413c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80010b8:	f003 f840 	bl	800413c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80010bc:	f7ff feb6 	bl	8000e2c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80010c0:	f7ff fec5 	bl	8000e4e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
}
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80010d0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80010d4:	f7ff fef2 	bl	8000ebc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80010d8:	213f      	movs	r1, #63	; 0x3f
 80010da:	480c      	ldr	r0, [pc, #48]	; (800110c <Reset_IPCC+0x40>)
 80010dc:	f7ff ff5c 	bl	8000f98 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80010e0:	213f      	movs	r1, #63	; 0x3f
 80010e2:	480a      	ldr	r0, [pc, #40]	; (800110c <Reset_IPCC+0x40>)
 80010e4:	f7ff ff66 	bl	8000fb4 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80010e8:	213f      	movs	r1, #63	; 0x3f
 80010ea:	4808      	ldr	r0, [pc, #32]	; (800110c <Reset_IPCC+0x40>)
 80010ec:	f7ff ff0e 	bl	8000f0c <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80010f0:	213f      	movs	r1, #63	; 0x3f
 80010f2:	4806      	ldr	r0, [pc, #24]	; (800110c <Reset_IPCC+0x40>)
 80010f4:	f7ff ff2d 	bl	8000f52 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80010f8:	213f      	movs	r1, #63	; 0x3f
 80010fa:	4804      	ldr	r0, [pc, #16]	; (800110c <Reset_IPCC+0x40>)
 80010fc:	f7ff ff18 	bl	8000f30 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001100:	213f      	movs	r1, #63	; 0x3f
 8001102:	4802      	ldr	r0, [pc, #8]	; (800110c <Reset_IPCC+0x40>)
 8001104:	f7ff ff37 	bl	8000f76 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001108:	bf00      	nop
}
 800110a:	bd80      	pop	{r7, pc}
 800110c:	58000c00 	.word	0x58000c00

08001110 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001116:	2000      	movs	r0, #0
 8001118:	f008 fb0e 	bl	8009738 <OTP_Read>
 800111c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	799b      	ldrb	r3, [r3, #6]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fe4d 	bl	8000dc8 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800112e:	bf00      	nop
 8001130:	bf00      	nop
}
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <System_Init>:

static void System_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  Init_Smps();
 800113c:	f7ff ff98 	bl	8001070 <Init_Smps>

  Init_Exti();
 8001140:	f7ff ff9d 	bl	800107e <Init_Exti>

  Init_Rtc();
 8001144:	f000 f802 	bl	800114c <Init_Rtc>

  return;
 8001148:	bf00      	nop
}
 800114a:	bd80      	pop	{r7, pc}

0800114c <Init_Rtc>:

static void Init_Rtc(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <Init_Rtc+0x1c>)
 8001152:	f7ff ff4a 	bl	8000fea <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001156:	2100      	movs	r1, #0
 8001158:	4803      	ldr	r0, [pc, #12]	; (8001168 <Init_Rtc+0x1c>)
 800115a:	f7ff ff56 	bl	800100a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800115e:	4802      	ldr	r0, [pc, #8]	; (8001168 <Init_Rtc+0x1c>)
 8001160:	f7ff ff36 	bl	8000fd0 <LL_RTC_EnableWriteProtection>

  return;
 8001164:	bf00      	nop
}
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40002800 	.word	0x40002800

0800116c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001170:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001174:	f7ff fe46 	bl	8000e04 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001178:	f00b f97a 	bl	800c470 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800117c:	2004      	movs	r0, #4
 800117e:	f7ff fdf9 	bl	8000d74 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001182:	bf00      	nop
}
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800118e:	f007 ffb3 	bl	80090f8 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001192:	4a11      	ldr	r2, [pc, #68]	; (80011d8 <appe_Tl_Init+0x50>)
 8001194:	2100      	movs	r1, #0
 8001196:	2004      	movs	r0, #4
 8001198:	f00b faa8 	bl	800c6ec <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <appe_Tl_Init+0x54>)
 800119e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <appe_Tl_Init+0x58>)
 80011a2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80011a4:	463b      	mov	r3, r7
 80011a6:	4619      	mov	r1, r3
 80011a8:	480e      	ldr	r0, [pc, #56]	; (80011e4 <appe_Tl_Init+0x5c>)
 80011aa:	f007 fe6b 	bl	8008e84 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <appe_Tl_Init+0x60>)
 80011b0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <appe_Tl_Init+0x64>)
 80011b4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <appe_Tl_Init+0x68>)
 80011b8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80011ba:	f240 533c 	movw	r3, #1340	; 0x53c
 80011be:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	4618      	mov	r0, r3
 80011c6:	f008 f8d9 	bl	800937c <TL_MM_Init>

  TL_Enable();
 80011ca:	f007 ff8f 	bl	80090ec <TL_Enable>

  return;
 80011ce:	bf00      	nop
}
 80011d0:	3720      	adds	r7, #32
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	08008ebd 	.word	0x08008ebd
 80011dc:	20030734 	.word	0x20030734
 80011e0:	080011f5 	.word	0x080011f5
 80011e4:	0800120d 	.word	0x0800120d
 80011e8:	2003094c 	.word	0x2003094c
 80011ec:	20030840 	.word	0x20030840
 80011f0:	200301f8 	.word	0x200301f8

080011f4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80011fe:	bf00      	nop
}
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	330b      	adds	r3, #11
 800121a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	b29b      	uxth	r3, r3
 8001222:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8001226:	2b07      	cmp	r3, #7
 8001228:	f200 80d0 	bhi.w	80013cc <APPE_SysUserEvtRx+0x1c0>
 800122c:	a201      	add	r2, pc, #4	; (adr r2, 8001234 <APPE_SysUserEvtRx+0x28>)
 800122e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001232:	bf00      	nop
 8001234:	08001255 	.word	0x08001255
 8001238:	080012e7 	.word	0x080012e7
 800123c:	08001309 	.word	0x08001309
 8001240:	080013cd 	.word	0x080013cd
 8001244:	0800134d 	.word	0x0800134d
 8001248:	08001371 	.word	0x08001371
 800124c:	0800138d 	.word	0x0800138d
 8001250:	080013b1 	.word	0x080013b1
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	4618      	mov	r0, r3
 800125a:	f007 fbcf 	bl	80089fc <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 800125e:	485e      	ldr	r0, [pc, #376]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 8001260:	f008 f98c 	bl	800957c <DbgTraceGetFileName>
 8001264:	4601      	mov	r1, r0
 8001266:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800126a:	4a5c      	ldr	r2, [pc, #368]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 800126c:	485c      	ldr	r0, [pc, #368]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 800126e:	f00b fbbf 	bl	800c9f0 <iprintf>
 8001272:	7b3b      	ldrb	r3, [r7, #12]
 8001274:	4619      	mov	r1, r3
 8001276:	7b7b      	ldrb	r3, [r7, #13]
 8001278:	461a      	mov	r2, r3
 800127a:	7bbb      	ldrb	r3, [r7, #14]
 800127c:	4859      	ldr	r0, [pc, #356]	; (80013e4 <APPE_SysUserEvtRx+0x1d8>)
 800127e:	f00b fbb7 	bl	800c9f0 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8001282:	4855      	ldr	r0, [pc, #340]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 8001284:	f008 f97a 	bl	800957c <DbgTraceGetFileName>
 8001288:	4601      	mov	r1, r0
 800128a:	f240 1369 	movw	r3, #361	; 0x169
 800128e:	4a53      	ldr	r2, [pc, #332]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 8001290:	4853      	ldr	r0, [pc, #332]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 8001292:	f00b fbad 	bl	800c9f0 <iprintf>
 8001296:	7c3b      	ldrb	r3, [r7, #16]
 8001298:	4619      	mov	r1, r3
 800129a:	4853      	ldr	r0, [pc, #332]	; (80013e8 <APPE_SysUserEvtRx+0x1dc>)
 800129c:	f00b fba8 	bl	800c9f0 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80012a0:	484d      	ldr	r0, [pc, #308]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 80012a2:	f008 f96b 	bl	800957c <DbgTraceGetFileName>
 80012a6:	4601      	mov	r1, r0
 80012a8:	f44f 73b5 	mov.w	r3, #362	; 0x16a
 80012ac:	4a4b      	ldr	r2, [pc, #300]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 80012ae:	484c      	ldr	r0, [pc, #304]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 80012b0:	f00b fb9e 	bl	800c9f0 <iprintf>
 80012b4:	7dbb      	ldrb	r3, [r7, #22]
 80012b6:	4619      	mov	r1, r3
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	461a      	mov	r2, r3
 80012bc:	7e3b      	ldrb	r3, [r7, #24]
 80012be:	484b      	ldr	r0, [pc, #300]	; (80013ec <APPE_SysUserEvtRx+0x1e0>)
 80012c0:	f00b fb96 	bl	800c9f0 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80012c4:	4844      	ldr	r0, [pc, #272]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 80012c6:	f008 f959 	bl	800957c <DbgTraceGetFileName>
 80012ca:	4601      	mov	r1, r0
 80012cc:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80012d0:	4a42      	ldr	r2, [pc, #264]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 80012d2:	4843      	ldr	r0, [pc, #268]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 80012d4:	f00b fb8c 	bl	800c9f0 <iprintf>
 80012d8:	4845      	ldr	r0, [pc, #276]	; (80013f0 <APPE_SysUserEvtRx+0x1e4>)
 80012da:	f00b fb89 	bl	800c9f0 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 f8e0 	bl	80014a4 <APPE_SysEvtReadyProcessing>
    break;
 80012e4:	e073      	b.n	80013ce <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80012e6:	483c      	ldr	r0, [pc, #240]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 80012e8:	f008 f948 	bl	800957c <DbgTraceGetFileName>
 80012ec:	4601      	mov	r1, r0
 80012ee:	f240 1371 	movw	r3, #369	; 0x171
 80012f2:	4a3a      	ldr	r2, [pc, #232]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 80012f4:	483a      	ldr	r0, [pc, #232]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 80012f6:	f00b fb7b 	bl	800c9f0 <iprintf>
 80012fa:	483e      	ldr	r0, [pc, #248]	; (80013f4 <APPE_SysUserEvtRx+0x1e8>)
 80012fc:	f00b fb78 	bl	800c9f0 <iprintf>
    APPE_SysEvtError(pPayload);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f885 	bl	8001410 <APPE_SysEvtError>
    break;
 8001306:	e062      	b.n	80013ce <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001308:	4833      	ldr	r0, [pc, #204]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 800130a:	f008 f937 	bl	800957c <DbgTraceGetFileName>
 800130e:	4601      	mov	r1, r0
 8001310:	f44f 73bb 	mov.w	r3, #374	; 0x176
 8001314:	4a31      	ldr	r2, [pc, #196]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 8001316:	4832      	ldr	r0, [pc, #200]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 8001318:	f00b fb6a 	bl	800c9f0 <iprintf>
 800131c:	4836      	ldr	r0, [pc, #216]	; (80013f8 <APPE_SysUserEvtRx+0x1ec>)
 800131e:	f00b fc03 	bl	800cb28 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001322:	482d      	ldr	r0, [pc, #180]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 8001324:	f008 f92a 	bl	800957c <DbgTraceGetFileName>
 8001328:	4601      	mov	r1, r0
 800132a:	f240 1377 	movw	r3, #375	; 0x177
 800132e:	4a2b      	ldr	r2, [pc, #172]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 8001330:	482b      	ldr	r0, [pc, #172]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 8001332:	f00b fb5d 	bl	800c9f0 <iprintf>
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3302      	adds	r3, #2
 800133a:	6819      	ldr	r1, [r3, #0]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	3302      	adds	r3, #2
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	461a      	mov	r2, r3
 8001344:	482d      	ldr	r0, [pc, #180]	; (80013fc <APPE_SysUserEvtRx+0x1f0>)
 8001346:	f00b fb53 	bl	800c9f0 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 800134a:	e040      	b.n	80013ce <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 800134c:	4822      	ldr	r0, [pc, #136]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 800134e:	f008 f915 	bl	800957c <DbgTraceGetFileName>
 8001352:	4601      	mov	r1, r0
 8001354:	f240 137d 	movw	r3, #381	; 0x17d
 8001358:	4a20      	ldr	r2, [pc, #128]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 800135a:	4821      	ldr	r0, [pc, #132]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 800135c:	f00b fb48 	bl	800c9f0 <iprintf>
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	3302      	adds	r3, #2
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4619      	mov	r1, r3
 8001368:	4825      	ldr	r0, [pc, #148]	; (8001400 <APPE_SysUserEvtRx+0x1f4>)
 800136a:	f00b fb41 	bl	800c9f0 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 800136e:	e02e      	b.n	80013ce <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001370:	4819      	ldr	r0, [pc, #100]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 8001372:	f008 f903 	bl	800957c <DbgTraceGetFileName>
 8001376:	4601      	mov	r1, r0
 8001378:	f44f 73c1 	mov.w	r3, #386	; 0x182
 800137c:	4a17      	ldr	r2, [pc, #92]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 800137e:	4818      	ldr	r0, [pc, #96]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 8001380:	f00b fb36 	bl	800c9f0 <iprintf>
 8001384:	481f      	ldr	r0, [pc, #124]	; (8001404 <APPE_SysUserEvtRx+0x1f8>)
 8001386:	f00b fb33 	bl	800c9f0 <iprintf>
    break;
 800138a:	e020      	b.n	80013ce <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 800138c:	4812      	ldr	r0, [pc, #72]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 800138e:	f008 f8f5 	bl	800957c <DbgTraceGetFileName>
 8001392:	4601      	mov	r1, r0
 8001394:	f44f 73c3 	mov.w	r3, #390	; 0x186
 8001398:	4a10      	ldr	r2, [pc, #64]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 800139a:	4811      	ldr	r0, [pc, #68]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 800139c:	f00b fb28 	bl	800c9f0 <iprintf>
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	3302      	adds	r3, #2
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4619      	mov	r1, r3
 80013a8:	4817      	ldr	r0, [pc, #92]	; (8001408 <APPE_SysUserEvtRx+0x1fc>)
 80013aa:	f00b fb21 	bl	800c9f0 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 80013ae:	e00e      	b.n	80013ce <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80013b0:	4809      	ldr	r0, [pc, #36]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 80013b2:	f008 f8e3 	bl	800957c <DbgTraceGetFileName>
 80013b6:	4601      	mov	r1, r0
 80013b8:	f240 138b 	movw	r3, #395	; 0x18b
 80013bc:	4a07      	ldr	r2, [pc, #28]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 80013be:	4808      	ldr	r0, [pc, #32]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 80013c0:	f00b fb16 	bl	800c9f0 <iprintf>
 80013c4:	4811      	ldr	r0, [pc, #68]	; (800140c <APPE_SysUserEvtRx+0x200>)
 80013c6:	f00b fb13 	bl	800c9f0 <iprintf>
    break;
 80013ca:	e000      	b.n	80013ce <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 80013cc:	bf00      	nop
  }

  return;
 80013ce:	bf00      	nop
}
 80013d0:	3720      	adds	r7, #32
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	0800ded4 	.word	0x0800ded4
 80013dc:	0800fbf0 	.word	0x0800fbf0
 80013e0:	0800deec 	.word	0x0800deec
 80013e4:	0800df00 	.word	0x0800df00
 80013e8:	0800df24 	.word	0x0800df24
 80013ec:	0800df40 	.word	0x0800df40
 80013f0:	0800df58 	.word	0x0800df58
 80013f4:	0800df78 	.word	0x0800df78
 80013f8:	0800df9c 	.word	0x0800df9c
 80013fc:	0800dfec 	.word	0x0800dfec
 8001400:	0800e014 	.word	0x0800e014
 8001404:	0800e050 	.word	0x0800e050
 8001408:	0800e074 	.word	0x0800e074
 800140c:	0800e0b0 	.word	0x0800e0b0

08001410 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	330b      	adds	r3, #11
 800141e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3302      	adds	r3, #2
 8001424:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8001426:	4819      	ldr	r0, [pc, #100]	; (800148c <APPE_SysEvtError+0x7c>)
 8001428:	f008 f8a8 	bl	800957c <DbgTraceGetFileName>
 800142c:	4601      	mov	r1, r0
 800142e:	f240 13a3 	movw	r3, #419	; 0x1a3
 8001432:	4a17      	ldr	r2, [pc, #92]	; (8001490 <APPE_SysEvtError+0x80>)
 8001434:	4817      	ldr	r0, [pc, #92]	; (8001494 <APPE_SysEvtError+0x84>)
 8001436:	f00b fadb 	bl	800c9f0 <iprintf>
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	4619      	mov	r1, r3
 8001440:	4815      	ldr	r0, [pc, #84]	; (8001498 <APPE_SysEvtError+0x88>)
 8001442:	f00b fad5 	bl	800c9f0 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10d      	bne.n	800146a <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 800144e:	480f      	ldr	r0, [pc, #60]	; (800148c <APPE_SysEvtError+0x7c>)
 8001450:	f008 f894 	bl	800957c <DbgTraceGetFileName>
 8001454:	4601      	mov	r1, r0
 8001456:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 800145a:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <APPE_SysEvtError+0x80>)
 800145c:	480d      	ldr	r0, [pc, #52]	; (8001494 <APPE_SysEvtError+0x84>)
 800145e:	f00b fac7 	bl	800c9f0 <iprintf>
 8001462:	480e      	ldr	r0, [pc, #56]	; (800149c <APPE_SysEvtError+0x8c>)
 8001464:	f00b fb60 	bl	800cb28 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001468:	e00d      	b.n	8001486 <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 800146a:	4808      	ldr	r0, [pc, #32]	; (800148c <APPE_SysEvtError+0x7c>)
 800146c:	f008 f886 	bl	800957c <DbgTraceGetFileName>
 8001470:	4601      	mov	r1, r0
 8001472:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
 8001476:	4a06      	ldr	r2, [pc, #24]	; (8001490 <APPE_SysEvtError+0x80>)
 8001478:	4806      	ldr	r0, [pc, #24]	; (8001494 <APPE_SysEvtError+0x84>)
 800147a:	f00b fab9 	bl	800c9f0 <iprintf>
 800147e:	4808      	ldr	r0, [pc, #32]	; (80014a0 <APPE_SysEvtError+0x90>)
 8001480:	f00b fb52 	bl	800cb28 <puts>
  return;
 8001484:	bf00      	nop
}
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	0800ded4 	.word	0x0800ded4
 8001490:	0800fc04 	.word	0x0800fc04
 8001494:	0800deec 	.word	0x0800deec
 8001498:	0800e0d4 	.word	0x0800e0d4
 800149c:	0800e104 	.word	0x0800e104
 80014a0:	0800e140 	.word	0x0800e140

080014a4 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	; 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	330b      	adds	r3, #11
 80014c4:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	3302      	adds	r3, #2
 80014ca:	61fb      	str	r3, [r7, #28]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d132      	bne.n	800153a <APPE_SysEvtReadyProcessing+0x96>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80014d4:	482c      	ldr	r0, [pc, #176]	; (8001588 <APPE_SysEvtReadyProcessing+0xe4>)
 80014d6:	f008 f851 	bl	800957c <DbgTraceGetFileName>
 80014da:	4601      	mov	r1, r0
 80014dc:	f240 13c1 	movw	r3, #449	; 0x1c1
 80014e0:	4a2a      	ldr	r2, [pc, #168]	; (800158c <APPE_SysEvtReadyProcessing+0xe8>)
 80014e2:	482b      	ldr	r0, [pc, #172]	; (8001590 <APPE_SysEvtReadyProcessing+0xec>)
 80014e4:	f00b fa84 	bl	800c9f0 <iprintf>
 80014e8:	482a      	ldr	r0, [pc, #168]	; (8001594 <APPE_SysEvtReadyProcessing+0xf0>)
 80014ea:	f00b fb1d 	bl	800cb28 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80014ee:	f7ff fb63 	bl	8000bb8 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80014f2:	230d      	movs	r3, #13
 80014f4:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80014f6:	237f      	movs	r3, #127	; 0x7f
 80014f8:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80014fa:	f7ff fcf9 	bl	8000ef0 <LL_DBGMCU_GetRevisionID>
 80014fe:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001500:	4821      	ldr	r0, [pc, #132]	; (8001588 <APPE_SysEvtReadyProcessing+0xe4>)
 8001502:	f008 f83b 	bl	800957c <DbgTraceGetFileName>
 8001506:	4601      	mov	r1, r0
 8001508:	f240 13d9 	movw	r3, #473	; 0x1d9
 800150c:	4a1f      	ldr	r2, [pc, #124]	; (800158c <APPE_SysEvtReadyProcessing+0xe8>)
 800150e:	4820      	ldr	r0, [pc, #128]	; (8001590 <APPE_SysEvtReadyProcessing+0xec>)
 8001510:	f00b fa6e 	bl	800c9f0 <iprintf>
 8001514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001516:	4820      	ldr	r0, [pc, #128]	; (8001598 <APPE_SysEvtReadyProcessing+0xf4>)
 8001518:	f00b fa6a 	bl	800c9f0 <iprintf>

    config_param.RevisionID = RevisionID;
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	b29b      	uxth	r3, r3
 8001520:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	4618      	mov	r0, r3
 8001528:	f007 fa52 	bl	80089d0 <SHCI_C2_Config>

    APP_BLE_Init();
 800152c:	f008 fe10 	bl	800a150 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001530:	2100      	movs	r1, #0
 8001532:	2001      	movs	r0, #1
 8001534:	f00a ffae 	bl	800c494 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001538:	e022      	b.n	8001580 <APPE_SysEvtReadyProcessing+0xdc>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d110      	bne.n	8001564 <APPE_SysEvtReadyProcessing+0xc0>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001542:	4811      	ldr	r0, [pc, #68]	; (8001588 <APPE_SysEvtReadyProcessing+0xe4>)
 8001544:	f008 f81a 	bl	800957c <DbgTraceGetFileName>
 8001548:	4601      	mov	r1, r0
 800154a:	f240 13e7 	movw	r3, #487	; 0x1e7
 800154e:	4a0f      	ldr	r2, [pc, #60]	; (800158c <APPE_SysEvtReadyProcessing+0xe8>)
 8001550:	480f      	ldr	r0, [pc, #60]	; (8001590 <APPE_SysEvtReadyProcessing+0xec>)
 8001552:	f00b fa4d 	bl	800c9f0 <iprintf>
 8001556:	4811      	ldr	r0, [pc, #68]	; (800159c <APPE_SysEvtReadyProcessing+0xf8>)
 8001558:	f00b fa4a 	bl	800c9f0 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
  return;
 8001562:	e00d      	b.n	8001580 <APPE_SysEvtReadyProcessing+0xdc>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001564:	4808      	ldr	r0, [pc, #32]	; (8001588 <APPE_SysEvtReadyProcessing+0xe4>)
 8001566:	f008 f809 	bl	800957c <DbgTraceGetFileName>
 800156a:	4601      	mov	r1, r0
 800156c:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
 8001570:	4a06      	ldr	r2, [pc, #24]	; (800158c <APPE_SysEvtReadyProcessing+0xe8>)
 8001572:	4807      	ldr	r0, [pc, #28]	; (8001590 <APPE_SysEvtReadyProcessing+0xec>)
 8001574:	f00b fa3c 	bl	800c9f0 <iprintf>
 8001578:	4809      	ldr	r0, [pc, #36]	; (80015a0 <APPE_SysEvtReadyProcessing+0xfc>)
 800157a:	f00b fa39 	bl	800c9f0 <iprintf>
  return;
 800157e:	bf00      	nop
}
 8001580:	3728      	adds	r7, #40	; 0x28
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	0800ded4 	.word	0x0800ded4
 800158c:	0800fc18 	.word	0x0800fc18
 8001590:	0800deec 	.word	0x0800deec
 8001594:	0800e178 	.word	0x0800e178
 8001598:	0800e194 	.word	0x0800e194
 800159c:	0800e1b8 	.word	0x0800e1b8
 80015a0:	0800e1ec 	.word	0x0800e1ec

080015a4 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80015a8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ac:	f00a ffa2 	bl	800c4f4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80015b8:	bf00      	nop
}
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	f00a ff90 	bl	800c4f4 <UTIL_SEQ_Run>

  return;
 80015d4:	bf00      	nop
}
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80015e4:	2100      	movs	r1, #0
 80015e6:	2004      	movs	r0, #4
 80015e8:	f00b f8a2 	bl	800c730 <UTIL_SEQ_SetTask>
  return;
 80015ec:	bf00      	nop
}
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80015fc:	2002      	movs	r0, #2
 80015fe:	f00b f903 	bl	800c808 <UTIL_SEQ_SetEvt>
  return;
 8001602:	bf00      	nop
}
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001612:	2002      	movs	r0, #2
 8001614:	f00b f918 	bl	800c848 <UTIL_SEQ_WaitEvt>
  return;
 8001618:	bf00      	nop
}
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001630:	d102      	bne.n	8001638 <HAL_GPIO_EXTI_Callback+0x18>
  {
    case GPIO_PIN_12:
     APP_BLE_Key_Button1_Action();
 8001632:	f009 fc95 	bl	800af60 <APP_BLE_Key_Button1_Action>
      break;
 8001636:	e000      	b.n	800163a <HAL_GPIO_EXTI_Callback+0x1a>
    default:
      break;
 8001638:	bf00      	nop

  }
  return;
 800163a:	bf00      	nop
}
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <LL_AHB1_GRP1_EnableClock>:
{
 8001642:	b480      	push	{r7}
 8001644:	b085      	sub	sp, #20
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800164a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800164e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001650:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4313      	orrs	r3, r2
 8001658:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800165a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800165e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4013      	ands	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001666:	68fb      	ldr	r3, [r7, #12]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001678:	2004      	movs	r0, #4
 800167a:	f7ff ffe2 	bl	8001642 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 800167e:	2002      	movs	r0, #2
 8001680:	f7ff ffdf 	bl	8001642 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2100      	movs	r1, #0
 8001688:	203a      	movs	r0, #58	; 0x3a
 800168a:	f002 f802 	bl	8003692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 800168e:	203a      	movs	r0, #58	; 0x3a
 8001690:	f002 f819 	bl	80036c6 <HAL_NVIC_EnableIRQ>

}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}

08001698 <LL_AHB2_GRP1_EnableClock>:
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4013      	ands	r3, r2
 80016ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016bc:	68fb      	ldr	r3, [r7, #12]
}
 80016be:	bf00      	nop
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <MX_GPIO_Init>:

/** Configure pins
     PC1   ------> LPUART1_TX
*/
void MX_GPIO_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e0:	2004      	movs	r0, #4
 80016e2:	f7ff ffd9 	bl	8001698 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e6:	2002      	movs	r0, #2
 80016e8:	f7ff ffd6 	bl	8001698 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ec:	2008      	movs	r0, #8
 80016ee:	f7ff ffd3 	bl	8001698 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_DEV_PWR_EN_GPIO_Port, OUT_DEV_PWR_EN_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2108      	movs	r1, #8
 80016f6:	481c      	ldr	r0, [pc, #112]	; (8001768 <MX_GPIO_Init+0x9c>)
 80016f8:	f002 fccc 	bl	8004094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016fc:	2302      	movs	r3, #2
 80016fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800170c:	2308      	movs	r3, #8
 800170e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	4619      	mov	r1, r3
 8001714:	4815      	ldr	r0, [pc, #84]	; (800176c <MX_GPIO_Init+0xa0>)
 8001716:	f002 fb4d 	bl	8003db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BI_USER_Pin;
 800171a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001720:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001724:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001726:	2301      	movs	r3, #1
 8001728:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BI_USER_GPIO_Port, &GPIO_InitStruct);
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	4619      	mov	r1, r3
 800172e:	480f      	ldr	r0, [pc, #60]	; (800176c <MX_GPIO_Init+0xa0>)
 8001730:	f002 fb40 	bl	8003db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_DEV_PWR_EN_Pin;
 8001734:	2308      	movs	r3, #8
 8001736:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001738:	2301      	movs	r3, #1
 800173a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(OUT_DEV_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	4619      	mov	r1, r3
 8001748:	4807      	ldr	r0, [pc, #28]	; (8001768 <MX_GPIO_Init+0x9c>)
 800174a:	f002 fb33 	bl	8003db4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2100      	movs	r1, #0
 8001752:	2028      	movs	r0, #40	; 0x28
 8001754:	f001 ff9d 	bl	8003692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001758:	2028      	movs	r0, #40	; 0x28
 800175a:	f001 ffb4 	bl	80036c6 <HAL_NVIC_EnableIRQ>

}
 800175e:	bf00      	nop
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	48000c00 	.word	0x48000c00
 800176c:	48000800 	.word	0x48000800

08001770 <LL_EXTI_EnableIT_0_31>:
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <LL_EXTI_EnableIT_0_31+0x24>)
 800177a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800177e:	4905      	ldr	r1, [pc, #20]	; (8001794 <LL_EXTI_EnableIT_0_31+0x24>)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4313      	orrs	r3, r2
 8001784:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	58000800 	.word	0x58000800

08001798 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4904      	ldr	r1, [pc, #16]	; (80017b8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	600b      	str	r3, [r1, #0]

}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	58000800 	.word	0x58000800

080017bc <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <ReadRtcSsrValue+0x3c>)
 80017c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <ReadRtcSsrValue+0x3c>)
 80017cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80017d2:	e005      	b.n	80017e0 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80017d8:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <ReadRtcSsrValue+0x3c>)
 80017da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017dc:	b29b      	uxth	r3, r3
 80017de:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d1f5      	bne.n	80017d4 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80017e8:	683b      	ldr	r3, [r7, #0]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40002800 	.word	0x40002800

080017fc <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	460a      	mov	r2, r1
 8001806:	71fb      	strb	r3, [r7, #7]
 8001808:	4613      	mov	r3, r2
 800180a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 800180c:	79ba      	ldrb	r2, [r7, #6]
 800180e:	491d      	ldr	r1, [pc, #116]	; (8001884 <LinkTimerAfter+0x88>)
 8001810:	4613      	mov	r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4413      	add	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	440b      	add	r3, r1
 800181a:	3315      	adds	r3, #21
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	2b06      	cmp	r3, #6
 8001824:	d009      	beq.n	800183a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001826:	7bfa      	ldrb	r2, [r7, #15]
 8001828:	4916      	ldr	r1, [pc, #88]	; (8001884 <LinkTimerAfter+0x88>)
 800182a:	4613      	mov	r3, r2
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	440b      	add	r3, r1
 8001834:	3314      	adds	r3, #20
 8001836:	79fa      	ldrb	r2, [r7, #7]
 8001838:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800183a:	79fa      	ldrb	r2, [r7, #7]
 800183c:	4911      	ldr	r1, [pc, #68]	; (8001884 <LinkTimerAfter+0x88>)
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	440b      	add	r3, r1
 8001848:	3315      	adds	r3, #21
 800184a:	7bfa      	ldrb	r2, [r7, #15]
 800184c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800184e:	79fa      	ldrb	r2, [r7, #7]
 8001850:	490c      	ldr	r1, [pc, #48]	; (8001884 <LinkTimerAfter+0x88>)
 8001852:	4613      	mov	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	4413      	add	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	440b      	add	r3, r1
 800185c:	3314      	adds	r3, #20
 800185e:	79ba      	ldrb	r2, [r7, #6]
 8001860:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001862:	79ba      	ldrb	r2, [r7, #6]
 8001864:	4907      	ldr	r1, [pc, #28]	; (8001884 <LinkTimerAfter+0x88>)
 8001866:	4613      	mov	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	4413      	add	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	440b      	add	r3, r1
 8001870:	3315      	adds	r3, #21
 8001872:	79fa      	ldrb	r2, [r7, #7]
 8001874:	701a      	strb	r2, [r3, #0]

  return;
 8001876:	bf00      	nop
}
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20000098 	.word	0x20000098

08001888 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	460a      	mov	r2, r1
 8001892:	71fb      	strb	r3, [r7, #7]
 8001894:	4613      	mov	r3, r2
 8001896:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001898:	4b29      	ldr	r3, [pc, #164]	; (8001940 <LinkTimerBefore+0xb8>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	79ba      	ldrb	r2, [r7, #6]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d032      	beq.n	800190a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80018a4:	79ba      	ldrb	r2, [r7, #6]
 80018a6:	4927      	ldr	r1, [pc, #156]	; (8001944 <LinkTimerBefore+0xbc>)
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	440b      	add	r3, r1
 80018b2:	3314      	adds	r3, #20
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80018b8:	7bfa      	ldrb	r2, [r7, #15]
 80018ba:	4922      	ldr	r1, [pc, #136]	; (8001944 <LinkTimerBefore+0xbc>)
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	440b      	add	r3, r1
 80018c6:	3315      	adds	r3, #21
 80018c8:	79fa      	ldrb	r2, [r7, #7]
 80018ca:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80018cc:	79fa      	ldrb	r2, [r7, #7]
 80018ce:	491d      	ldr	r1, [pc, #116]	; (8001944 <LinkTimerBefore+0xbc>)
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	440b      	add	r3, r1
 80018da:	3315      	adds	r3, #21
 80018dc:	79ba      	ldrb	r2, [r7, #6]
 80018de:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80018e0:	79fa      	ldrb	r2, [r7, #7]
 80018e2:	4918      	ldr	r1, [pc, #96]	; (8001944 <LinkTimerBefore+0xbc>)
 80018e4:	4613      	mov	r3, r2
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	4413      	add	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	440b      	add	r3, r1
 80018ee:	3314      	adds	r3, #20
 80018f0:	7bfa      	ldrb	r2, [r7, #15]
 80018f2:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80018f4:	79ba      	ldrb	r2, [r7, #6]
 80018f6:	4913      	ldr	r1, [pc, #76]	; (8001944 <LinkTimerBefore+0xbc>)
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	440b      	add	r3, r1
 8001902:	3314      	adds	r3, #20
 8001904:	79fa      	ldrb	r2, [r7, #7]
 8001906:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001908:	e014      	b.n	8001934 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800190a:	79fa      	ldrb	r2, [r7, #7]
 800190c:	490d      	ldr	r1, [pc, #52]	; (8001944 <LinkTimerBefore+0xbc>)
 800190e:	4613      	mov	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4413      	add	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	440b      	add	r3, r1
 8001918:	3315      	adds	r3, #21
 800191a:	79ba      	ldrb	r2, [r7, #6]
 800191c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800191e:	79ba      	ldrb	r2, [r7, #6]
 8001920:	4908      	ldr	r1, [pc, #32]	; (8001944 <LinkTimerBefore+0xbc>)
 8001922:	4613      	mov	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4413      	add	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	440b      	add	r3, r1
 800192c:	3314      	adds	r3, #20
 800192e:	79fa      	ldrb	r2, [r7, #7]
 8001930:	701a      	strb	r2, [r3, #0]
  return;
 8001932:	bf00      	nop
}
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20000128 	.word	0x20000128
 8001944:	20000098 	.word	0x20000098

08001948 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001952:	4b4e      	ldr	r3, [pc, #312]	; (8001a8c <linkTimer+0x144>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b06      	cmp	r3, #6
 800195a:	d118      	bne.n	800198e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 800195c:	4b4b      	ldr	r3, [pc, #300]	; (8001a8c <linkTimer+0x144>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	b2da      	uxtb	r2, r3
 8001962:	4b4b      	ldr	r3, [pc, #300]	; (8001a90 <linkTimer+0x148>)
 8001964:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001966:	4a49      	ldr	r2, [pc, #292]	; (8001a8c <linkTimer+0x144>)
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 800196c:	79fa      	ldrb	r2, [r7, #7]
 800196e:	4949      	ldr	r1, [pc, #292]	; (8001a94 <linkTimer+0x14c>)
 8001970:	4613      	mov	r3, r2
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	4413      	add	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	440b      	add	r3, r1
 800197a:	3315      	adds	r3, #21
 800197c:	2206      	movs	r2, #6
 800197e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001980:	4b45      	ldr	r3, [pc, #276]	; (8001a98 <linkTimer+0x150>)
 8001982:	f04f 32ff 	mov.w	r2, #4294967295
 8001986:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	81fb      	strh	r3, [r7, #14]
 800198c:	e078      	b.n	8001a80 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800198e:	f000 f909 	bl	8001ba4 <ReturnTimeElapsed>
 8001992:	4603      	mov	r3, r0
 8001994:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001996:	79fa      	ldrb	r2, [r7, #7]
 8001998:	493e      	ldr	r1, [pc, #248]	; (8001a94 <linkTimer+0x14c>)
 800199a:	4613      	mov	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	4413      	add	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	440b      	add	r3, r1
 80019a4:	3308      	adds	r3, #8
 80019a6:	6819      	ldr	r1, [r3, #0]
 80019a8:	89fb      	ldrh	r3, [r7, #14]
 80019aa:	79fa      	ldrb	r2, [r7, #7]
 80019ac:	4419      	add	r1, r3
 80019ae:	4839      	ldr	r0, [pc, #228]	; (8001a94 <linkTimer+0x14c>)
 80019b0:	4613      	mov	r3, r2
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	4413      	add	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	4403      	add	r3, r0
 80019ba:	3308      	adds	r3, #8
 80019bc:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80019be:	79fa      	ldrb	r2, [r7, #7]
 80019c0:	4934      	ldr	r1, [pc, #208]	; (8001a94 <linkTimer+0x14c>)
 80019c2:	4613      	mov	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4413      	add	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	440b      	add	r3, r1
 80019cc:	3308      	adds	r3, #8
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80019d2:	4b2e      	ldr	r3, [pc, #184]	; (8001a8c <linkTimer+0x144>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	4619      	mov	r1, r3
 80019da:	4a2e      	ldr	r2, [pc, #184]	; (8001a94 <linkTimer+0x14c>)
 80019dc:	460b      	mov	r3, r1
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	440b      	add	r3, r1
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	4413      	add	r3, r2
 80019e6:	3308      	adds	r3, #8
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d337      	bcc.n	8001a60 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80019f0:	4b26      	ldr	r3, [pc, #152]	; (8001a8c <linkTimer+0x144>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80019f6:	7b7a      	ldrb	r2, [r7, #13]
 80019f8:	4926      	ldr	r1, [pc, #152]	; (8001a94 <linkTimer+0x14c>)
 80019fa:	4613      	mov	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4413      	add	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	440b      	add	r3, r1
 8001a04:	3315      	adds	r3, #21
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001a0a:	e013      	b.n	8001a34 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001a0c:	7b7a      	ldrb	r2, [r7, #13]
 8001a0e:	4921      	ldr	r1, [pc, #132]	; (8001a94 <linkTimer+0x14c>)
 8001a10:	4613      	mov	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4413      	add	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	440b      	add	r3, r1
 8001a1a:	3315      	adds	r3, #21
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001a20:	7b7a      	ldrb	r2, [r7, #13]
 8001a22:	491c      	ldr	r1, [pc, #112]	; (8001a94 <linkTimer+0x14c>)
 8001a24:	4613      	mov	r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	440b      	add	r3, r1
 8001a2e:	3315      	adds	r3, #21
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001a34:	7b3b      	ldrb	r3, [r7, #12]
 8001a36:	2b06      	cmp	r3, #6
 8001a38:	d00b      	beq.n	8001a52 <linkTimer+0x10a>
 8001a3a:	7b3a      	ldrb	r2, [r7, #12]
 8001a3c:	4915      	ldr	r1, [pc, #84]	; (8001a94 <linkTimer+0x14c>)
 8001a3e:	4613      	mov	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4413      	add	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	440b      	add	r3, r1
 8001a48:	3308      	adds	r3, #8
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68ba      	ldr	r2, [r7, #8]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d2dc      	bcs.n	8001a0c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001a52:	7b7a      	ldrb	r2, [r7, #13]
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fecf 	bl	80017fc <LinkTimerAfter>
 8001a5e:	e00f      	b.n	8001a80 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <linkTimer+0x144>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	4611      	mov	r1, r2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff ff0c 	bl	8001888 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <linkTimer+0x144>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <linkTimer+0x148>)
 8001a78:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001a7a:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <linkTimer+0x144>)
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001a80:	89fb      	ldrh	r3, [r7, #14]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000128 	.word	0x20000128
 8001a90:	20000129 	.word	0x20000129
 8001a94:	20000098 	.word	0x20000098
 8001a98:	2000012c 	.word	0x2000012c

08001a9c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	460a      	mov	r2, r1
 8001aa6:	71fb      	strb	r3, [r7, #7]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001aac:	4b39      	ldr	r3, [pc, #228]	; (8001b94 <UnlinkTimer+0xf8>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	79fa      	ldrb	r2, [r7, #7]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d111      	bne.n	8001adc <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001ab8:	4b36      	ldr	r3, [pc, #216]	; (8001b94 <UnlinkTimer+0xf8>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <UnlinkTimer+0xfc>)
 8001ac0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001ac2:	79fa      	ldrb	r2, [r7, #7]
 8001ac4:	4935      	ldr	r1, [pc, #212]	; (8001b9c <UnlinkTimer+0x100>)
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	4413      	add	r3, r2
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	440b      	add	r3, r1
 8001ad0:	3315      	adds	r3, #21
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	4b2f      	ldr	r3, [pc, #188]	; (8001b94 <UnlinkTimer+0xf8>)
 8001ad8:	701a      	strb	r2, [r3, #0]
 8001ada:	e03e      	b.n	8001b5a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001adc:	79fa      	ldrb	r2, [r7, #7]
 8001ade:	492f      	ldr	r1, [pc, #188]	; (8001b9c <UnlinkTimer+0x100>)
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	440b      	add	r3, r1
 8001aea:	3314      	adds	r3, #20
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001af0:	79fa      	ldrb	r2, [r7, #7]
 8001af2:	492a      	ldr	r1, [pc, #168]	; (8001b9c <UnlinkTimer+0x100>)
 8001af4:	4613      	mov	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	4413      	add	r3, r2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	440b      	add	r3, r1
 8001afe:	3315      	adds	r3, #21
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001b04:	79f9      	ldrb	r1, [r7, #7]
 8001b06:	7bfa      	ldrb	r2, [r7, #15]
 8001b08:	4824      	ldr	r0, [pc, #144]	; (8001b9c <UnlinkTimer+0x100>)
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	440b      	add	r3, r1
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4403      	add	r3, r0
 8001b14:	3315      	adds	r3, #21
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	b2d8      	uxtb	r0, r3
 8001b1a:	4920      	ldr	r1, [pc, #128]	; (8001b9c <UnlinkTimer+0x100>)
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4413      	add	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	440b      	add	r3, r1
 8001b26:	3315      	adds	r3, #21
 8001b28:	4602      	mov	r2, r0
 8001b2a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b2c:	7bbb      	ldrb	r3, [r7, #14]
 8001b2e:	2b06      	cmp	r3, #6
 8001b30:	d013      	beq.n	8001b5a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001b32:	79f9      	ldrb	r1, [r7, #7]
 8001b34:	7bba      	ldrb	r2, [r7, #14]
 8001b36:	4819      	ldr	r0, [pc, #100]	; (8001b9c <UnlinkTimer+0x100>)
 8001b38:	460b      	mov	r3, r1
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	440b      	add	r3, r1
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4403      	add	r3, r0
 8001b42:	3314      	adds	r3, #20
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	b2d8      	uxtb	r0, r3
 8001b48:	4914      	ldr	r1, [pc, #80]	; (8001b9c <UnlinkTimer+0x100>)
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4413      	add	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	440b      	add	r3, r1
 8001b54:	3314      	adds	r3, #20
 8001b56:	4602      	mov	r2, r0
 8001b58:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001b5a:	79fa      	ldrb	r2, [r7, #7]
 8001b5c:	490f      	ldr	r1, [pc, #60]	; (8001b9c <UnlinkTimer+0x100>)
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	440b      	add	r3, r1
 8001b68:	330c      	adds	r3, #12
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <UnlinkTimer+0xf8>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b06      	cmp	r3, #6
 8001b76:	d107      	bne.n	8001b88 <UnlinkTimer+0xec>
 8001b78:	79bb      	ldrb	r3, [r7, #6]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d104      	bne.n	8001b88 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <UnlinkTimer+0x104>)
 8001b80:	f04f 32ff 	mov.w	r2, #4294967295
 8001b84:	601a      	str	r2, [r3, #0]
  }

  return;
 8001b86:	bf00      	nop
 8001b88:	bf00      	nop
}
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	20000128 	.word	0x20000128
 8001b98:	20000129 	.word	0x20000129
 8001b9c:	20000098 	.word	0x20000098
 8001ba0:	2000012c 	.word	0x2000012c

08001ba4 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001baa:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <ReturnTimeElapsed+0x70>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb2:	d026      	beq.n	8001c02 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001bb4:	f7ff fe02 	bl	80017bc <ReadRtcSsrValue>
 8001bb8:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001bba:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <ReturnTimeElapsed+0x70>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d805      	bhi.n	8001bd0 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001bc4:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <ReturnTimeElapsed+0x70>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	e00a      	b.n	8001be6 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <ReturnTimeElapsed+0x74>)
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001bdc:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <ReturnTimeElapsed+0x70>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001be6:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <ReturnTimeElapsed+0x78>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	fb02 f303 	mul.w	r3, r2, r3
 8001bf2:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <ReturnTimeElapsed+0x7c>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	40d3      	lsrs	r3, r2
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	e001      	b.n	8001c06 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	b29b      	uxth	r3, r3
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2000012c 	.word	0x2000012c
 8001c18:	20000246 	.word	0x20000246
 8001c1c:	20000245 	.word	0x20000245
 8001c20:	20000244 	.word	0x20000244

08001c24 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d108      	bne.n	8001c46 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001c34:	f7ff fdc2 	bl	80017bc <ReadRtcSsrValue>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	4a24      	ldr	r2, [pc, #144]	; (8001ccc <RestartWakeupCounter+0xa8>)
 8001c3c:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001c3e:	2003      	movs	r0, #3
 8001c40:	f001 fd69 	bl	8003716 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001c44:	e03e      	b.n	8001cc4 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d803      	bhi.n	8001c54 <RestartWakeupCounter+0x30>
 8001c4c:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <RestartWakeupCounter+0xac>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d002      	beq.n	8001c5a <RestartWakeupCounter+0x36>
      Value -= 1;
 8001c54:	88fb      	ldrh	r3, [r7, #6]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001c5a:	bf00      	nop
 8001c5c:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <RestartWakeupCounter+0xb0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0f7      	beq.n	8001c5c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001c6c:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <RestartWakeupCounter+0xb0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <RestartWakeupCounter+0xb0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001c80:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <RestartWakeupCounter+0xb4>)
 8001c84:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c88:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001c8a:	2003      	movs	r0, #3
 8001c8c:	f001 fd51 	bl	8003732 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001c90:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <RestartWakeupCounter+0xb8>)
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	0c1b      	lsrs	r3, r3, #16
 8001c96:	041b      	lsls	r3, r3, #16
 8001c98:	88fa      	ldrh	r2, [r7, #6]
 8001c9a:	4910      	ldr	r1, [pc, #64]	; (8001cdc <RestartWakeupCounter+0xb8>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001ca0:	f7ff fd8c 	bl	80017bc <ReadRtcSsrValue>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	4a09      	ldr	r2, [pc, #36]	; (8001ccc <RestartWakeupCounter+0xa8>)
 8001ca8:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <RestartWakeupCounter+0xb0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <RestartWakeupCounter+0xb0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001cbc:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001cbe:	f3af 8000 	nop.w
  return ;
 8001cc2:	bf00      	nop
}
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	2000012c 	.word	0x2000012c
 8001cd0:	20000244 	.word	0x20000244
 8001cd4:	20000240 	.word	0x20000240
 8001cd8:	58000800 	.word	0x58000800
 8001cdc:	40002800 	.word	0x40002800

08001ce0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001ce6:	4b47      	ldr	r3, [pc, #284]	; (8001e04 <RescheduleTimerList+0x124>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf2:	d108      	bne.n	8001d06 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001cf4:	bf00      	nop
 8001cf6:	4b44      	ldr	r3, [pc, #272]	; (8001e08 <RescheduleTimerList+0x128>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f7      	bne.n	8001cf6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001d06:	4b40      	ldr	r3, [pc, #256]	; (8001e08 <RescheduleTimerList+0x128>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	4b3e      	ldr	r3, [pc, #248]	; (8001e08 <RescheduleTimerList+0x128>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d18:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001d1a:	4b3c      	ldr	r3, [pc, #240]	; (8001e0c <RescheduleTimerList+0x12c>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001d20:	7bfa      	ldrb	r2, [r7, #15]
 8001d22:	493b      	ldr	r1, [pc, #236]	; (8001e10 <RescheduleTimerList+0x130>)
 8001d24:	4613      	mov	r3, r2
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4413      	add	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	440b      	add	r3, r1
 8001d2e:	3308      	adds	r3, #8
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001d34:	f7ff ff36 	bl	8001ba4 <ReturnTimeElapsed>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d205      	bcs.n	8001d50 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001d48:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <RescheduleTimerList+0x134>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	701a      	strb	r2, [r3, #0]
 8001d4e:	e04d      	b.n	8001dec <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001d50:	88fb      	ldrh	r3, [r7, #6]
 8001d52:	4a31      	ldr	r2, [pc, #196]	; (8001e18 <RescheduleTimerList+0x138>)
 8001d54:	8812      	ldrh	r2, [r2, #0]
 8001d56:	b292      	uxth	r2, r2
 8001d58:	4413      	add	r3, r2
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d906      	bls.n	8001d70 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001d62:	4b2d      	ldr	r3, [pc, #180]	; (8001e18 <RescheduleTimerList+0x138>)
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001d68:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <RescheduleTimerList+0x134>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
 8001d6e:	e03d      	b.n	8001dec <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	88fb      	ldrh	r3, [r7, #6]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <RescheduleTimerList+0x134>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d80:	e034      	b.n	8001dec <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001d82:	7bfa      	ldrb	r2, [r7, #15]
 8001d84:	4922      	ldr	r1, [pc, #136]	; (8001e10 <RescheduleTimerList+0x130>)
 8001d86:	4613      	mov	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4413      	add	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	440b      	add	r3, r1
 8001d90:	3308      	adds	r3, #8
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	88fb      	ldrh	r3, [r7, #6]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d20a      	bcs.n	8001db0 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001d9a:	7bfa      	ldrb	r2, [r7, #15]
 8001d9c:	491c      	ldr	r1, [pc, #112]	; (8001e10 <RescheduleTimerList+0x130>)
 8001d9e:	4613      	mov	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4413      	add	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	440b      	add	r3, r1
 8001da8:	3308      	adds	r3, #8
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	e013      	b.n	8001dd8 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	4917      	ldr	r1, [pc, #92]	; (8001e10 <RescheduleTimerList+0x130>)
 8001db4:	4613      	mov	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4413      	add	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	440b      	add	r3, r1
 8001dbe:	3308      	adds	r3, #8
 8001dc0:	6819      	ldr	r1, [r3, #0]
 8001dc2:	88fb      	ldrh	r3, [r7, #6]
 8001dc4:	7bfa      	ldrb	r2, [r7, #15]
 8001dc6:	1ac9      	subs	r1, r1, r3
 8001dc8:	4811      	ldr	r0, [pc, #68]	; (8001e10 <RescheduleTimerList+0x130>)
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4403      	add	r3, r0
 8001dd4:	3308      	adds	r3, #8
 8001dd6:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	490d      	ldr	r1, [pc, #52]	; (8001e10 <RescheduleTimerList+0x130>)
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	440b      	add	r3, r1
 8001de6:	3315      	adds	r3, #21
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d1c7      	bne.n	8001d82 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001df2:	89bb      	ldrh	r3, [r7, #12]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff15 	bl	8001c24 <RestartWakeupCounter>

  return ;
 8001dfa:	bf00      	nop
}
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40002800 	.word	0x40002800
 8001e08:	20000240 	.word	0x20000240
 8001e0c:	20000128 	.word	0x20000128
 8001e10:	20000098 	.word	0x20000098
 8001e14:	20000130 	.word	0x20000130
 8001e18:	20000248 	.word	0x20000248

08001e1c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	; 0x28
 8001e20:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e22:	f3ef 8310 	mrs	r3, PRIMASK
 8001e26:	617b      	str	r3, [r7, #20]
  return(result);
 8001e28:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001e2c:	b672      	cpsid	i
}
 8001e2e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001e30:	4b5f      	ldr	r3, [pc, #380]	; (8001fb0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	22ca      	movs	r2, #202	; 0xca
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24
 8001e3a:	4b5d      	ldr	r3, [pc, #372]	; (8001fb0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2253      	movs	r2, #83	; 0x53
 8001e42:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001e44:	4b5a      	ldr	r3, [pc, #360]	; (8001fb0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	4b58      	ldr	r3, [pc, #352]	; (8001fb0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e56:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001e58:	4b56      	ldr	r3, [pc, #344]	; (8001fb4 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001e60:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e64:	4954      	ldr	r1, [pc, #336]	; (8001fb8 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001e66:	4613      	mov	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	440b      	add	r3, r1
 8001e70:	330c      	adds	r3, #12
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d172      	bne.n	8001f60 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001e7a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e7e:	494e      	ldr	r1, [pc, #312]	; (8001fb8 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001e80:	4613      	mov	r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4413      	add	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	440b      	add	r3, r1
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001e8e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e92:	4949      	ldr	r1, [pc, #292]	; (8001fb8 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001e94:	4613      	mov	r3, r2
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4413      	add	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	440b      	add	r3, r1
 8001e9e:	3310      	adds	r3, #16
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001ea4:	4b45      	ldr	r3, [pc, #276]	; (8001fbc <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d050      	beq.n	8001f50 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001eae:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001eb2:	4941      	ldr	r1, [pc, #260]	; (8001fb8 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4413      	add	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	440b      	add	r3, r1
 8001ebe:	330d      	adds	r3, #13
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d126      	bne.n	8001f16 <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001ec8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ecc:	2101      	movs	r1, #1
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fde4 	bl	8001a9c <UnlinkTimer>
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	f383 8810 	msr	PRIMASK, r3
}
 8001ede:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001ee0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ee4:	4934      	ldr	r1, [pc, #208]	; (8001fb8 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	440b      	add	r3, r1
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ef8:	4611      	mov	r1, r2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 f9d4 	bl	80022a8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001f00:	4b2b      	ldr	r3, [pc, #172]	; (8001fb0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	22ca      	movs	r2, #202	; 0xca
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24
 8001f0a:	4b29      	ldr	r3, [pc, #164]	; (8001fb0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2253      	movs	r2, #83	; 0x53
 8001f12:	625a      	str	r2, [r3, #36]	; 0x24
 8001f14:	e014      	b.n	8001f40 <HW_TS_RTC_Wakeup_Handler+0x124>
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f383 8810 	msr	PRIMASK, r3
}
 8001f20:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001f22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 f932 	bl	8002190 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001f2c:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	22ca      	movs	r2, #202	; 0xca
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2253      	movs	r2, #83	; 0x53
 8001f3e:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001f40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	4619      	mov	r1, r3
 8001f48:	69b8      	ldr	r0, [r7, #24]
 8001f4a:	f000 fa35 	bl	80023b8 <HW_TS_RTC_Int_AppNot>
 8001f4e:	e025      	b.n	8001f9c <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8001f50:	f7ff fec6 	bl	8001ce0 <RescheduleTimerList>
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f383 8810 	msr	PRIMASK, r3
}
 8001f5e:	e01d      	b.n	8001f9c <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001f60:	bf00      	nop
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f7      	beq.n	8001f62 <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001f72:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001f86:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001f88:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 8001f8a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f8e:	60da      	str	r2, [r3, #12]
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f383 8810 	msr	PRIMASK, r3
}
 8001f9a:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	22ff      	movs	r2, #255	; 0xff
 8001fa4:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001fa6:	bf00      	nop
}
 8001fa8:	3728      	adds	r7, #40	; 0x28
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000240 	.word	0x20000240
 8001fb4:	20000128 	.word	0x20000128
 8001fb8:	20000098 	.word	0x20000098
 8001fbc:	20000130 	.word	0x20000130
 8001fc0:	58000800 	.word	0x58000800

08001fc4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	6039      	str	r1, [r7, #0]
 8001fce:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001fd0:	4a64      	ldr	r2, [pc, #400]	; (8002164 <HW_TS_Init+0x1a0>)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001fd6:	4b63      	ldr	r3, [pc, #396]	; (8002164 <HW_TS_Init+0x1a0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	22ca      	movs	r2, #202	; 0xca
 8001fde:	625a      	str	r2, [r3, #36]	; 0x24
 8001fe0:	4b60      	ldr	r3, [pc, #384]	; (8002164 <HW_TS_Init+0x1a0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2253      	movs	r2, #83	; 0x53
 8001fe8:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001fea:	4b5f      	ldr	r3, [pc, #380]	; (8002168 <HW_TS_Init+0x1a4>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	4a5e      	ldr	r2, [pc, #376]	; (8002168 <HW_TS_Init+0x1a4>)
 8001ff0:	f043 0320 	orr.w	r3, r3, #32
 8001ff4:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001ff6:	4b5c      	ldr	r3, [pc, #368]	; (8002168 <HW_TS_Init+0x1a4>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	b2db      	uxtb	r3, r3
 8002002:	f1c3 0304 	rsb	r3, r3, #4
 8002006:	b2da      	uxtb	r2, r3
 8002008:	4b58      	ldr	r3, [pc, #352]	; (800216c <HW_TS_Init+0x1a8>)
 800200a:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800200c:	4b56      	ldr	r3, [pc, #344]	; (8002168 <HW_TS_Init+0x1a4>)
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002014:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002018:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	fa92 f2a2 	rbit	r2, r2
 8002020:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	2a00      	cmp	r2, #0
 800202a:	d101      	bne.n	8002030 <HW_TS_Init+0x6c>
  {
    return 32U;
 800202c:	2220      	movs	r2, #32
 800202e:	e003      	b.n	8002038 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	fab2 f282 	clz	r2, r2
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	40d3      	lsrs	r3, r2
 800203a:	b2db      	uxtb	r3, r3
 800203c:	3301      	adds	r3, #1
 800203e:	b2da      	uxtb	r2, r3
 8002040:	4b4b      	ldr	r3, [pc, #300]	; (8002170 <HW_TS_Init+0x1ac>)
 8002042:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002044:	4b48      	ldr	r3, [pc, #288]	; (8002168 <HW_TS_Init+0x1a4>)
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	b29b      	uxth	r3, r3
 800204a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800204e:	b29b      	uxth	r3, r3
 8002050:	3301      	adds	r3, #1
 8002052:	b29a      	uxth	r2, r3
 8002054:	4b47      	ldr	r3, [pc, #284]	; (8002174 <HW_TS_Init+0x1b0>)
 8002056:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002058:	4b46      	ldr	r3, [pc, #280]	; (8002174 <HW_TS_Init+0x1b0>)
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	3b01      	subs	r3, #1
 800205e:	4a44      	ldr	r2, [pc, #272]	; (8002170 <HW_TS_Init+0x1ac>)
 8002060:	7812      	ldrb	r2, [r2, #0]
 8002062:	fb02 f303 	mul.w	r3, r2, r3
 8002066:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800206a:	4a40      	ldr	r2, [pc, #256]	; (800216c <HW_TS_Init+0x1a8>)
 800206c:	7812      	ldrb	r2, [r2, #0]
 800206e:	40d3      	lsrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002078:	4293      	cmp	r3, r2
 800207a:	d904      	bls.n	8002086 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800207c:	4b3e      	ldr	r3, [pc, #248]	; (8002178 <HW_TS_Init+0x1b4>)
 800207e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002082:	801a      	strh	r2, [r3, #0]
 8002084:	e003      	b.n	800208e <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	b29a      	uxth	r2, r3
 800208a:	4b3b      	ldr	r3, [pc, #236]	; (8002178 <HW_TS_Init+0x1b4>)
 800208c:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800208e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002092:	f7ff fb81 	bl	8001798 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002096:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800209a:	f7ff fb69 	bl	8001770 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d143      	bne.n	800212c <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80020a4:	4b35      	ldr	r3, [pc, #212]	; (800217c <HW_TS_Init+0x1b8>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80020aa:	4b35      	ldr	r3, [pc, #212]	; (8002180 <HW_TS_Init+0x1bc>)
 80020ac:	f04f 32ff 	mov.w	r2, #4294967295
 80020b0:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80020b2:	2300      	movs	r3, #0
 80020b4:	77fb      	strb	r3, [r7, #31]
 80020b6:	e00c      	b.n	80020d2 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80020b8:	7ffa      	ldrb	r2, [r7, #31]
 80020ba:	4932      	ldr	r1, [pc, #200]	; (8002184 <HW_TS_Init+0x1c0>)
 80020bc:	4613      	mov	r3, r2
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	4413      	add	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	440b      	add	r3, r1
 80020c6:	330c      	adds	r3, #12
 80020c8:	2200      	movs	r2, #0
 80020ca:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80020cc:	7ffb      	ldrb	r3, [r7, #31]
 80020ce:	3301      	adds	r3, #1
 80020d0:	77fb      	strb	r3, [r7, #31]
 80020d2:	7ffb      	ldrb	r3, [r7, #31]
 80020d4:	2b05      	cmp	r3, #5
 80020d6:	d9ef      	bls.n	80020b8 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80020d8:	4b2b      	ldr	r3, [pc, #172]	; (8002188 <HW_TS_Init+0x1c4>)
 80020da:	2206      	movs	r2, #6
 80020dc:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80020de:	4b21      	ldr	r3, [pc, #132]	; (8002164 <HW_TS_Init+0x1a0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	4b1f      	ldr	r3, [pc, #124]	; (8002164 <HW_TS_Init+0x1a0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020f0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80020f2:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <HW_TS_Init+0x1a0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	4b19      	ldr	r3, [pc, #100]	; (8002164 <HW_TS_Init+0x1a0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002106:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002108:	4b20      	ldr	r3, [pc, #128]	; (800218c <HW_TS_Init+0x1c8>)
 800210a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800210e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002110:	2003      	movs	r0, #3
 8002112:	f001 fb0e 	bl	8003732 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002116:	4b13      	ldr	r3, [pc, #76]	; (8002164 <HW_TS_Init+0x1a0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	4b11      	ldr	r3, [pc, #68]	; (8002164 <HW_TS_Init+0x1a0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	e00a      	b.n	8002142 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 800212c:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <HW_TS_Init+0x1a0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800213c:	2003      	movs	r0, #3
 800213e:	f001 faea 	bl	8003716 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <HW_TS_Init+0x1a0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	22ff      	movs	r2, #255	; 0xff
 800214a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800214c:	2200      	movs	r2, #0
 800214e:	2103      	movs	r1, #3
 8002150:	2003      	movs	r0, #3
 8002152:	f001 fa9e 	bl	8003692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002156:	2003      	movs	r0, #3
 8002158:	f001 fab5 	bl	80036c6 <HAL_NVIC_EnableIRQ>

  return;
 800215c:	bf00      	nop
}
 800215e:	3720      	adds	r7, #32
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000240 	.word	0x20000240
 8002168:	40002800 	.word	0x40002800
 800216c:	20000244 	.word	0x20000244
 8002170:	20000245 	.word	0x20000245
 8002174:	20000246 	.word	0x20000246
 8002178:	20000248 	.word	0x20000248
 800217c:	20000130 	.word	0x20000130
 8002180:	2000012c 	.word	0x2000012c
 8002184:	20000098 	.word	0x20000098
 8002188:	20000128 	.word	0x20000128
 800218c:	58000800 	.word	0x58000800

08002190 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800219a:	f3ef 8310 	mrs	r3, PRIMASK
 800219e:	60fb      	str	r3, [r7, #12]
  return(result);
 80021a0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80021a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80021a4:	b672      	cpsid	i
}
 80021a6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80021a8:	2003      	movs	r0, #3
 80021aa:	f001 fa9a 	bl	80036e2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80021ae:	4b38      	ldr	r3, [pc, #224]	; (8002290 <HW_TS_Stop+0x100>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	22ca      	movs	r2, #202	; 0xca
 80021b6:	625a      	str	r2, [r3, #36]	; 0x24
 80021b8:	4b35      	ldr	r3, [pc, #212]	; (8002290 <HW_TS_Stop+0x100>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2253      	movs	r2, #83	; 0x53
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80021c2:	79fa      	ldrb	r2, [r7, #7]
 80021c4:	4933      	ldr	r1, [pc, #204]	; (8002294 <HW_TS_Stop+0x104>)
 80021c6:	4613      	mov	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4413      	add	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	440b      	add	r3, r1
 80021d0:	330c      	adds	r3, #12
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d148      	bne.n	800226c <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	2100      	movs	r1, #0
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fc5c 	bl	8001a9c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80021e4:	4b2c      	ldr	r3, [pc, #176]	; (8002298 <HW_TS_Stop+0x108>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80021ea:	7cfb      	ldrb	r3, [r7, #19]
 80021ec:	2b06      	cmp	r3, #6
 80021ee:	d135      	bne.n	800225c <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80021f0:	4b2a      	ldr	r3, [pc, #168]	; (800229c <HW_TS_Stop+0x10c>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021fc:	d108      	bne.n	8002210 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80021fe:	bf00      	nop
 8002200:	4b23      	ldr	r3, [pc, #140]	; (8002290 <HW_TS_Stop+0x100>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1f7      	bne.n	8002200 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8002210:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <HW_TS_Stop+0x100>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <HW_TS_Stop+0x100>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002222:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8002224:	bf00      	nop
 8002226:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <HW_TS_Stop+0x100>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f7      	beq.n	8002226 <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002236:	4b16      	ldr	r3, [pc, #88]	; (8002290 <HW_TS_Stop+0x100>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	b2da      	uxtb	r2, r3
 8002240:	4b13      	ldr	r3, [pc, #76]	; (8002290 <HW_TS_Stop+0x100>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800224a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800224c:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <HW_TS_Stop+0x110>)
 800224e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002252:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002254:	2003      	movs	r0, #3
 8002256:	f001 fa6c 	bl	8003732 <HAL_NVIC_ClearPendingIRQ>
 800225a:	e007      	b.n	800226c <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <HW_TS_Stop+0x114>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	7cfa      	ldrb	r2, [r7, #19]
 8002264:	429a      	cmp	r2, r3
 8002266:	d001      	beq.n	800226c <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8002268:	f7ff fd3a 	bl	8001ce0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800226c:	4b08      	ldr	r3, [pc, #32]	; (8002290 <HW_TS_Stop+0x100>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	22ff      	movs	r2, #255	; 0xff
 8002274:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002276:	2003      	movs	r0, #3
 8002278:	f001 fa25 	bl	80036c6 <HAL_NVIC_EnableIRQ>
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f383 8810 	msr	PRIMASK, r3
}
 8002286:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002288:	bf00      	nop
}
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000240 	.word	0x20000240
 8002294:	20000098 	.word	0x20000098
 8002298:	20000128 	.word	0x20000128
 800229c:	40002800 	.word	0x40002800
 80022a0:	58000800 	.word	0x58000800
 80022a4:	20000129 	.word	0x20000129

080022a8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	6039      	str	r1, [r7, #0]
 80022b2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80022b4:	79fa      	ldrb	r2, [r7, #7]
 80022b6:	493c      	ldr	r1, [pc, #240]	; (80023a8 <HW_TS_Start+0x100>)
 80022b8:	4613      	mov	r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	4413      	add	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	440b      	add	r3, r1
 80022c2:	330c      	adds	r3, #12
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d103      	bne.n	80022d4 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff ff5e 	bl	8002190 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022d4:	f3ef 8310 	mrs	r3, PRIMASK
 80022d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80022da:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80022dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80022de:	b672      	cpsid	i
}
 80022e0:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80022e2:	2003      	movs	r0, #3
 80022e4:	f001 f9fd 	bl	80036e2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80022e8:	4b30      	ldr	r3, [pc, #192]	; (80023ac <HW_TS_Start+0x104>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	22ca      	movs	r2, #202	; 0xca
 80022f0:	625a      	str	r2, [r3, #36]	; 0x24
 80022f2:	4b2e      	ldr	r3, [pc, #184]	; (80023ac <HW_TS_Start+0x104>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2253      	movs	r2, #83	; 0x53
 80022fa:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80022fc:	79fa      	ldrb	r2, [r7, #7]
 80022fe:	492a      	ldr	r1, [pc, #168]	; (80023a8 <HW_TS_Start+0x100>)
 8002300:	4613      	mov	r3, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4413      	add	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	440b      	add	r3, r1
 800230a:	330c      	adds	r3, #12
 800230c:	2202      	movs	r2, #2
 800230e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002310:	79fa      	ldrb	r2, [r7, #7]
 8002312:	4925      	ldr	r1, [pc, #148]	; (80023a8 <HW_TS_Start+0x100>)
 8002314:	4613      	mov	r3, r2
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4413      	add	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	440b      	add	r3, r1
 800231e:	3308      	adds	r3, #8
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002324:	79fa      	ldrb	r2, [r7, #7]
 8002326:	4920      	ldr	r1, [pc, #128]	; (80023a8 <HW_TS_Start+0x100>)
 8002328:	4613      	mov	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4413      	add	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	440b      	add	r3, r1
 8002332:	3304      	adds	r3, #4
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fb04 	bl	8001948 <linkTimer>
 8002340:	4603      	mov	r3, r0
 8002342:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002344:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <HW_TS_Start+0x108>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800234a:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <HW_TS_Start+0x10c>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	7c7a      	ldrb	r2, [r7, #17]
 8002352:	429a      	cmp	r2, r3
 8002354:	d002      	beq.n	800235c <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 8002356:	f7ff fcc3 	bl	8001ce0 <RescheduleTimerList>
 800235a:	e013      	b.n	8002384 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800235c:	79fa      	ldrb	r2, [r7, #7]
 800235e:	4912      	ldr	r1, [pc, #72]	; (80023a8 <HW_TS_Start+0x100>)
 8002360:	4613      	mov	r3, r2
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4413      	add	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	440b      	add	r3, r1
 800236a:	3308      	adds	r3, #8
 800236c:	6819      	ldr	r1, [r3, #0]
 800236e:	8a7b      	ldrh	r3, [r7, #18]
 8002370:	79fa      	ldrb	r2, [r7, #7]
 8002372:	1ac9      	subs	r1, r1, r3
 8002374:	480c      	ldr	r0, [pc, #48]	; (80023a8 <HW_TS_Start+0x100>)
 8002376:	4613      	mov	r3, r2
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	4413      	add	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4403      	add	r3, r0
 8002380:	3308      	adds	r3, #8
 8002382:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8002384:	4b09      	ldr	r3, [pc, #36]	; (80023ac <HW_TS_Start+0x104>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	22ff      	movs	r2, #255	; 0xff
 800238c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800238e:	2003      	movs	r0, #3
 8002390:	f001 f999 	bl	80036c6 <HAL_NVIC_EnableIRQ>
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f383 8810 	msr	PRIMASK, r3
}
 800239e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80023a0:	bf00      	nop
}
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000098 	.word	0x20000098
 80023ac:	20000240 	.word	0x20000240
 80023b0:	20000128 	.word	0x20000128
 80023b4:	20000129 	.word	0x20000129

080023b8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	460b      	mov	r3, r1
 80023c2:	607a      	str	r2, [r7, #4]
 80023c4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4798      	blx	r3

  return;
 80023ca:	bf00      	nop
}
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607b      	str	r3, [r7, #4]
 80023de:	4603      	mov	r3, r0
 80023e0:	73fb      	strb	r3, [r7, #15]
 80023e2:	4613      	mov	r3, r2
 80023e4:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80023ea:	2300      	movs	r3, #0
 80023ec:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10e      	bne.n	8002412 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80023f4:	4a17      	ldr	r2, [pc, #92]	; (8002454 <HW_UART_Transmit_DMA+0x80>)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80023fa:	4b17      	ldr	r3, [pc, #92]	; (8002458 <HW_UART_Transmit_DMA+0x84>)
 80023fc:	4a17      	ldr	r2, [pc, #92]	; (800245c <HW_UART_Transmit_DMA+0x88>)
 80023fe:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002400:	89bb      	ldrh	r3, [r7, #12]
 8002402:	461a      	mov	r2, r3
 8002404:	68b9      	ldr	r1, [r7, #8]
 8002406:	4814      	ldr	r0, [pc, #80]	; (8002458 <HW_UART_Transmit_DMA+0x84>)
 8002408:	f003 fe58 	bl	80060bc <HAL_UART_Transmit_DMA>
 800240c:	4603      	mov	r3, r0
 800240e:	75fb      	strb	r3, [r7, #23]
            break;
 8002410:	e000      	b.n	8002414 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8002412:	bf00      	nop
    }

    switch (hal_status)
 8002414:	7dfb      	ldrb	r3, [r7, #23]
 8002416:	2b03      	cmp	r3, #3
 8002418:	d816      	bhi.n	8002448 <HW_UART_Transmit_DMA+0x74>
 800241a:	a201      	add	r2, pc, #4	; (adr r2, 8002420 <HW_UART_Transmit_DMA+0x4c>)
 800241c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002420:	08002431 	.word	0x08002431
 8002424:	08002437 	.word	0x08002437
 8002428:	0800243d 	.word	0x0800243d
 800242c:	08002443 	.word	0x08002443
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002430:	2300      	movs	r3, #0
 8002432:	75bb      	strb	r3, [r7, #22]
            break;
 8002434:	e009      	b.n	800244a <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8002436:	2301      	movs	r3, #1
 8002438:	75bb      	strb	r3, [r7, #22]
            break;
 800243a:	e006      	b.n	800244a <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 800243c:	2302      	movs	r3, #2
 800243e:	75bb      	strb	r3, [r7, #22]
            break;
 8002440:	e003      	b.n	800244a <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002442:	2303      	movs	r3, #3
 8002444:	75bb      	strb	r3, [r7, #22]
            break;
 8002446:	e000      	b.n	800244a <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002448:	bf00      	nop
    }

    return hw_status;
 800244a:	7dbb      	ldrb	r3, [r7, #22]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	2000024c 	.word	0x2000024c
 8002458:	200003ac 	.word	0x200003ac
 800245c:	40013800 	.word	0x40013800

08002460 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	4b09      	ldr	r3, [pc, #36]	; (8002494 <HAL_UART_TxCpltCallback+0x34>)
 8002470:	429a      	cmp	r2, r3
 8002472:	d107      	bne.n	8002484 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <HAL_UART_TxCpltCallback+0x38>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_UART_TxCpltCallback+0x38>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4798      	blx	r3
            }
            break;
 8002482:	e001      	b.n	8002488 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002484:	bf00      	nop
 8002486:	e000      	b.n	800248a <HAL_UART_TxCpltCallback+0x2a>
            break;
 8002488:	bf00      	nop
    }

    return;
 800248a:	bf00      	nop
}
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40013800 	.word	0x40013800
 8002498:	2000024c 	.word	0x2000024c

0800249c <LL_RCC_LSE_SetDriveCapability>:
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80024a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ac:	f023 0218 	bic.w	r2, r3, #24
 80024b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ca:	b09d      	sub	sp, #116	; 0x74
 80024cc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024ce:	f000 ff1b 	bl	8003308 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80024d2:	f7fe fdad 	bl	8001030 <MX_APPE_Config>
  /* USER CODE BEGIN Init */
  //Config_HSE();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024d6:	f000 f885 	bl	80025e4 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80024da:	f000 f8e9 	bl	80026b0 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 80024de:	f000 fb52 	bl	8002b86 <MX_RF_Init>
  MX_GPIO_Init();
 80024e2:	f7ff f8f3 	bl	80016cc <MX_GPIO_Init>
  MX_RTC_Init();
 80024e6:	f000 fb7f 	bl	8002be8 <MX_RTC_Init>
  MX_DMA_Init();
 80024ea:	f7ff f8c3 	bl	8001674 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
 // HAL_GPIO_WritePin(OUT_DEV_PWR_EN_GPIO_Port, OUT_DEV_PWR_EN_Pin, GPIO_PIN_SET);
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80024ee:	f7fe fdad 	bl	800104c <MX_APPE_Init>

  char btString[53];

  int angle = 10;
 80024f2:	230a      	movs	r3, #10
 80024f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  int angleMax = 20;
 80024f6:	2314      	movs	r3, #20
 80024f8:	65bb      	str	r3, [r7, #88]	; 0x58

  int repXmin = 5;
 80024fa:	2305      	movs	r3, #5
 80024fc:	657b      	str	r3, [r7, #84]	; 0x54
  int repLimitXmin = 10;
 80024fe:	230a      	movs	r3, #10
 8002500:	653b      	str	r3, [r7, #80]	; 0x50
  int timeElevationXmin = 15;
 8002502:	230f      	movs	r3, #15
 8002504:	64fb      	str	r3, [r7, #76]	; 0x4c
  int timeLimitXmin = 20;
 8002506:	2314      	movs	r3, #20
 8002508:	64bb      	str	r3, [r7, #72]	; 0x48
  int repTotal = 100;
 800250a:	2364      	movs	r3, #100	; 0x64
 800250c:	647b      	str	r3, [r7, #68]	; 0x44
  int timeElevationTotal = 5;
 800250e:	2305      	movs	r3, #5
 8002510:	643b      	str	r3, [r7, #64]	; 0x40


		 sprintf(btString,"%3d,%3d,%3d,%3d,%3d,%3d",
 8002512:	4638      	mov	r0, r7
 8002514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002516:	9303      	str	r3, [sp, #12]
 8002518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800251a:	9302      	str	r3, [sp, #8]
 800251c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002526:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002528:	4927      	ldr	r1, [pc, #156]	; (80025c8 <main+0x100>)
 800252a:	f00a fb05 	bl	800cb38 <siprintf>

  //livedataUpdateChar(btString);
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

 connectControlCallback(getControlBluetooth);
 800252e:	4827      	ldr	r0, [pc, #156]	; (80025cc <main+0x104>)
 8002530:	f008 fef0 	bl	800b314 <connectControlCallback>
 connectConfigReceiveCallback(getConfigBluetooth);
 8002534:	4826      	ldr	r0, [pc, #152]	; (80025d0 <main+0x108>)
 8002536:	f008 fefd 	bl	800b334 <connectConfigReceiveCallback>

  uint32_t currentTime = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t lastTime = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	63fb      	str	r3, [r7, #60]	; 0x3c

  sprintf(deviceName,"Montre 1");
 8002542:	4924      	ldr	r1, [pc, #144]	; (80025d4 <main+0x10c>)
 8002544:	4824      	ldr	r0, [pc, #144]	; (80025d8 <main+0x110>)
 8002546:	f00a faf7 	bl	800cb38 <siprintf>
  {


	  //UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
    /* USER CODE END WHILE */
    MX_APPE_Process();
 800254a:	f7ff f82b 	bl	80015a4 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */

    currentTime = HAL_GetTick();
 800254e:	f000 ff41 	bl	80033d4 <HAL_GetTick>
 8002552:	63b8      	str	r0, [r7, #56]	; 0x38
    	  if(currentTime-lastTime >= 1000)
 8002554:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800255e:	d3f4      	bcc.n	800254a <main+0x82>
    	  {
    		  lastTime = currentTime;
 8002560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002562:	63fb      	str	r3, [r7, #60]	; 0x3c

    		  sprintf(btString,"%3d,%3d,%3d,%3d,%3d,%3d,",
 8002564:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8002566:	1c63      	adds	r3, r4, #1
 8002568:	657b      	str	r3, [r7, #84]	; 0x54
 800256a:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800256c:	1c6b      	adds	r3, r5, #1
 800256e:	653b      	str	r3, [r7, #80]	; 0x50
 8002570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002576:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002578:	1c51      	adds	r1, r2, #1
 800257a:	64b9      	str	r1, [r7, #72]	; 0x48
 800257c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800257e:	1c48      	adds	r0, r1, #1
 8002580:	6478      	str	r0, [r7, #68]	; 0x44
 8002582:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002584:	1c46      	adds	r6, r0, #1
 8002586:	643e      	str	r6, [r7, #64]	; 0x40
 8002588:	463e      	mov	r6, r7
 800258a:	9003      	str	r0, [sp, #12]
 800258c:	9102      	str	r1, [sp, #8]
 800258e:	9201      	str	r2, [sp, #4]
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	462b      	mov	r3, r5
 8002594:	4622      	mov	r2, r4
 8002596:	4911      	ldr	r1, [pc, #68]	; (80025dc <main+0x114>)
 8002598:	4630      	mov	r0, r6
 800259a:	f00a facd 	bl	800cb38 <siprintf>
    		 				 timeLimitXmin++,
    		 				 repTotal++,
    		 				 timeElevationTotal++
    		           );

    		  livedataUpdateChar(btString);
 800259e:	463b      	mov	r3, r7
 80025a0:	4618      	mov	r0, r3
 80025a2:	f008 fe57 	bl	800b254 <livedataUpdateChar>

    		  sprintf(btString,"%3d,%3d,",
 80025a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80025a8:	1c53      	adds	r3, r2, #1
 80025aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025ae:	1c59      	adds	r1, r3, #1
 80025b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80025b2:	4638      	mov	r0, r7
 80025b4:	490a      	ldr	r1, [pc, #40]	; (80025e0 <main+0x118>)
 80025b6:	f00a fabf 	bl	800cb38 <siprintf>
    		    		 				 angle++,
    		    		 				 angleMax++
    		    		           );

    		  angleUpdateChar(btString);
 80025ba:	463b      	mov	r3, r7
 80025bc:	4618      	mov	r0, r3
 80025be:	f008 fe69 	bl	800b294 <angleUpdateChar>
    		  sendConfigBluetooth();
 80025c2:	f000 f89b 	bl	80026fc <_Z19sendConfigBluetoothv>
    MX_APPE_Process();
 80025c6:	e7c0      	b.n	800254a <main+0x82>
 80025c8:	0800e220 	.word	0x0800e220
 80025cc:	0800279d 	.word	0x0800279d
 80025d0:	08002831 	.word	0x08002831
 80025d4:	0800e238 	.word	0x0800e238
 80025d8:	20000250 	.word	0x20000250
 80025dc:	0800e244 	.word	0x0800e244
 80025e0:	0800e260 	.word	0x0800e260

080025e4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b09a      	sub	sp, #104	; 0x68
 80025e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ea:	f107 0320 	add.w	r3, r7, #32
 80025ee:	2248      	movs	r2, #72	; 0x48
 80025f0:	2100      	movs	r1, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f00a f9f4 	bl	800c9e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	605a      	str	r2, [r3, #4]
 8002600:	609a      	str	r2, [r3, #8]
 8002602:	60da      	str	r2, [r3, #12]
 8002604:	611a      	str	r2, [r3, #16]
 8002606:	615a      	str	r2, [r3, #20]
 8002608:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800260a:	f001 fd97 	bl	800413c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800260e:	2000      	movs	r0, #0
 8002610:	f7ff ff44 	bl	800249c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002614:	4b25      	ldr	r3, [pc, #148]	; (80026ac <_Z18SystemClock_Configv+0xc8>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800261c:	4a23      	ldr	r2, [pc, #140]	; (80026ac <_Z18SystemClock_Configv+0xc8>)
 800261e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002622:	6013      	str	r3, [r2, #0]
 8002624:	4b21      	ldr	r3, [pc, #132]	; (80026ac <_Z18SystemClock_Configv+0xc8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800262c:	603b      	str	r3, [r7, #0]
 800262e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002630:	2307      	movs	r3, #7
 8002632:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002634:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800263a:	2301      	movs	r3, #1
 800263c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800263e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002642:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002644:	2340      	movs	r3, #64	; 0x40
 8002646:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002648:	2300      	movs	r3, #0
 800264a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800264c:	f107 0320 	add.w	r3, r7, #32
 8002650:	4618      	mov	r0, r3
 8002652:	f002 f907 	bl	8004864 <HAL_RCC_OscConfig>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf14      	ite	ne
 800265c:	2301      	movne	r3, #1
 800265e:	2300      	moveq	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8002666:	f000 fa89 	bl	8002b7c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800266a:	236f      	movs	r3, #111	; 0x6f
 800266c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800266e:	2302      	movs	r3, #2
 8002670:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002676:	2300      	movs	r3, #0
 8002678:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800267e:	2300      	movs	r3, #0
 8002680:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002686:	1d3b      	adds	r3, r7, #4
 8002688:	2101      	movs	r1, #1
 800268a:	4618      	mov	r0, r3
 800268c:	f002 fc5e 	bl	8004f4c <HAL_RCC_ClockConfig>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	bf14      	ite	ne
 8002696:	2301      	movne	r3, #1
 8002698:	2300      	moveq	r3, #0
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 80026a0:	f000 fa6c 	bl	8002b7c <Error_Handler>
  }
}
 80026a4:	bf00      	nop
 80026a6:	3768      	adds	r7, #104	; 0x68
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	58000400 	.word	0x58000400

080026b0 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b094      	sub	sp, #80	; 0x50
 80026b4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026b6:	463b      	mov	r3, r7
 80026b8:	2250      	movs	r2, #80	; 0x50
 80026ba:	2100      	movs	r1, #0
 80026bc:	4618      	mov	r0, r3
 80026be:	f00a f98f 	bl	800c9e0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80026c2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80026c6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80026c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026cc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80026ce:	2302      	movs	r3, #2
 80026d0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80026d2:	2310      	movs	r3, #16
 80026d4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026d6:	463b      	mov	r3, r7
 80026d8:	4618      	mov	r0, r3
 80026da:	f003 f874 	bl	80057c6 <HAL_RCCEx_PeriphCLKConfig>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	bf14      	ite	ne
 80026e4:	2301      	movne	r3, #1
 80026e6:	2300      	moveq	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <_Z24PeriphCommonClock_Configv+0x42>
  {
    Error_Handler();
 80026ee:	f000 fa45 	bl	8002b7c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80026f2:	bf00      	nop
 80026f4:	3750      	adds	r7, #80	; 0x50
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <_Z19sendConfigBluetoothv>:




void sendConfigBluetooth()
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b090      	sub	sp, #64	; 0x40
 8002700:	af00      	add	r7, sp, #0
   char cfgString[53];

   for(int i = 0; i < 53; i++)
 8002702:	2300      	movs	r3, #0
 8002704:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002708:	2b34      	cmp	r3, #52	; 0x34
 800270a:	dc08      	bgt.n	800271e <_Z19sendConfigBluetoothv+0x22>
   {
	   cfgString[i] = '\0';
 800270c:	1d3a      	adds	r2, r7, #4
 800270e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002710:	4413      	add	r3, r2
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]
   for(int i = 0; i < 53; i++)
 8002716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002718:	3301      	adds	r3, #1
 800271a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800271c:	e7f3      	b.n	8002706 <_Z19sendConfigBluetoothv+0xa>
   }
      if(1)//mainMenu.page_config.pageAlerts.getToneAlertEnable())
      {
          cfgString[BT_CONFIG_TONE_ALERT] = '1';
 800271e:	2331      	movs	r3, #49	; 0x31
 8002720:	713b      	strb	r3, [r7, #4]
      {
          cfgString[BT_CONFIG_VIBRATION_ALERT] = '1';
      }
      else
      {
          cfgString[BT_CONFIG_VIBRATION_ALERT] = '0';
 8002722:	2330      	movs	r3, #48	; 0x30
 8002724:	717b      	strb	r3, [r7, #5]
      }

      if(1)//mainMenu.page_config.pageAlerts.getRepetitionAlertEnable())
      {
          cfgString[BT_CONFIG_REPETITION_ALERT] = '1';
 8002726:	2331      	movs	r3, #49	; 0x31
 8002728:	71bb      	strb	r3, [r7, #6]
          cfgString[BT_CONFIG_REPETITION_ALERT] = '0';
      }

      if(1)//mainMenu.page_config.pageAlerts.getTimeAlertEnable())
      {
          cfgString[BT_CONFIG_TIME_ALERT] = '1';
 800272a:	2331      	movs	r3, #49	; 0x31
 800272c:	71fb      	strb	r3, [r7, #7]
          cfgString[BT_CONFIG_TIME_ALERT] = '0';
      }

      if(1)//mainMenu.page_config.pageAlerts.getAngleDetectAlertEnable())
      {
          cfgString[BT_CONFIG_ELEVATION_ANGLE_ALERT] = '1';
 800272e:	2331      	movs	r3, #49	; 0x31
 8002730:	723b      	strb	r3, [r7, #8]
          cfgString[BT_CONFIG_ELEVATION_ANGLE_ALERT] = '0';
      }

      if(1)//mainMenu.page_config.pageAlerts.getAngleMaxAlertEnable())
      {
        cfgString[BT_CONFIG_MAX_ANGLE_ALERT] = '1';
 8002732:	2331      	movs	r3, #49	; 0x31
 8002734:	727b      	strb	r3, [r7, #9]
      else
      {
        cfgString[BT_CONFIG_MAX_ANGLE_ALERT] = '0';
      }

      uintToArray((uint16_t)12, &cfgString[BT_CONFIG_ELEVATION_ANGLE_VALUE], 3 );
 8002736:	1d3b      	adds	r3, r7, #4
 8002738:	3306      	adds	r3, #6
 800273a:	2203      	movs	r2, #3
 800273c:	4619      	mov	r1, r3
 800273e:	200c      	movs	r0, #12
 8002740:	f000 fc3a 	bl	8002fb8 <_Z11uintToArraytPch>

      uintToArray((uint16_t)5, &cfgString[BT_CONFIG_TIME_VALUE], 3);
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	3309      	adds	r3, #9
 8002748:	2203      	movs	r2, #3
 800274a:	4619      	mov	r1, r3
 800274c:	2005      	movs	r0, #5
 800274e:	f000 fc33 	bl	8002fb8 <_Z11uintToArraytPch>

      uintToArray((uint16_t)10, &cfgString[BT_CONFIG_PERIOD_TIME_VALUE], 3 );
 8002752:	1d3b      	adds	r3, r7, #4
 8002754:	330c      	adds	r3, #12
 8002756:	2203      	movs	r2, #3
 8002758:	4619      	mov	r1, r3
 800275a:	200a      	movs	r0, #10
 800275c:	f000 fc2c 	bl	8002fb8 <_Z11uintToArraytPch>

      uintToArray((uint16_t)20, &cfgString[BT_CONFIG_REP_LIMIT_VALUE], 3 );
 8002760:	1d3b      	adds	r3, r7, #4
 8002762:	330f      	adds	r3, #15
 8002764:	2203      	movs	r2, #3
 8002766:	4619      	mov	r1, r3
 8002768:	2014      	movs	r0, #20
 800276a:	f000 fc25 	bl	8002fb8 <_Z11uintToArraytPch>

      uintToArray((uint16_t)145, &cfgString[BT_CONFIG_MAX_ANGLE_VALUE], 3 );
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	3312      	adds	r3, #18
 8002772:	2203      	movs	r2, #3
 8002774:	4619      	mov	r1, r3
 8002776:	2091      	movs	r0, #145	; 0x91
 8002778:	f000 fc1e 	bl	8002fb8 <_Z11uintToArraytPch>



      strcpy(&cfgString[BT_CONFIG_DEVICE_NAME],deviceName);
 800277c:	1d3b      	adds	r3, r7, #4
 800277e:	3315      	adds	r3, #21
 8002780:	4905      	ldr	r1, [pc, #20]	; (8002798 <_Z19sendConfigBluetoothv+0x9c>)
 8002782:	4618      	mov	r0, r3
 8002784:	f00a f9f8 	bl	800cb78 <strcpy>

     //Serial.println("Sent max value:");
      //Serial.println((uint16_t)(mainMenu.page_config.page_angle_max.mAngleLimit));


      bt_updateConfigString(cfgString);
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	4618      	mov	r0, r3
 800278c:	f008 fda2 	bl	800b2d4 <bt_updateConfigString>

}
 8002790:	bf00      	nop
 8002792:	3740      	adds	r7, #64	; 0x40
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20000250 	.word	0x20000250

0800279c <_Z19getControlBluetoothPci>:
char serialOutBuffer[256];

void getControlBluetooth(char * cfgString, int stringSize)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]

	uint8_t controlValue;

	controlValue = (uint8_t)cfgString[0];
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	73fb      	strb	r3, [r7, #15]

	 switch(controlValue)
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	2b05      	cmp	r3, #5
 80027b2:	d82f      	bhi.n	8002814 <_Z19getControlBluetoothPci+0x78>
 80027b4:	a201      	add	r2, pc, #4	; (adr r2, 80027bc <_Z19getControlBluetoothPci+0x20>)
 80027b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ba:	bf00      	nop
 80027bc:	080027d5 	.word	0x080027d5
 80027c0:	080027f5 	.word	0x080027f5
 80027c4:	08002815 	.word	0x08002815
 80027c8:	08002815 	.word	0x08002815
 80027cc:	08002815 	.word	0x08002815
 80027d0:	08002815 	.word	0x08002815
	      {
	            case 1: // reset zero

	            	sprintf(serialOutBuffer,"\r\nControl: Zero reset");
 80027d4:	4912      	ldr	r1, [pc, #72]	; (8002820 <_Z19getControlBluetoothPci+0x84>)
 80027d6:	4813      	ldr	r0, [pc, #76]	; (8002824 <_Z19getControlBluetoothPci+0x88>)
 80027d8:	f00a f9ae 	bl	800cb38 <siprintf>
	            	HAL_UART_Transmit(&huart1, (uint8_t*)serialOutBuffer, strlen(serialOutBuffer), HAL_MAX_DELAY);
 80027dc:	4811      	ldr	r0, [pc, #68]	; (8002824 <_Z19getControlBluetoothPci+0x88>)
 80027de:	f7fd fccf 	bl	8000180 <strlen>
 80027e2:	4603      	mov	r3, r0
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ea:	490e      	ldr	r1, [pc, #56]	; (8002824 <_Z19getControlBluetoothPci+0x88>)
 80027ec:	480e      	ldr	r0, [pc, #56]	; (8002828 <_Z19getControlBluetoothPci+0x8c>)
 80027ee:	f003 fbcf 	bl	8005f90 <HAL_UART_Transmit>
	                //elevationFlagFirst = 0; // Reset zero
	            break;
 80027f2:	e010      	b.n	8002816 <_Z19getControlBluetoothPci+0x7a>

	            case 2: // reset max angle
	            	sprintf(serialOutBuffer,"\r\nControl: Max Angle Reset reset");
 80027f4:	490d      	ldr	r1, [pc, #52]	; (800282c <_Z19getControlBluetoothPci+0x90>)
 80027f6:	480b      	ldr	r0, [pc, #44]	; (8002824 <_Z19getControlBluetoothPci+0x88>)
 80027f8:	f00a f99e 	bl	800cb38 <siprintf>
	            	HAL_UART_Transmit(&huart1, (uint8_t*)serialOutBuffer, strlen(serialOutBuffer), HAL_MAX_DELAY);
 80027fc:	4809      	ldr	r0, [pc, #36]	; (8002824 <_Z19getControlBluetoothPci+0x88>)
 80027fe:	f7fd fcbf 	bl	8000180 <strlen>
 8002802:	4603      	mov	r3, r0
 8002804:	b29a      	uxth	r2, r3
 8002806:	f04f 33ff 	mov.w	r3, #4294967295
 800280a:	4906      	ldr	r1, [pc, #24]	; (8002824 <_Z19getControlBluetoothPci+0x88>)
 800280c:	4806      	ldr	r0, [pc, #24]	; (8002828 <_Z19getControlBluetoothPci+0x8c>)
 800280e:	f003 fbbf 	bl	8005f90 <HAL_UART_Transmit>
	                //mainMenu.resetMaxAngle();
	            break;
 8002812:	e000      	b.n	8002816 <_Z19getControlBluetoothPci+0x7a>

	              //TODO reset time total
	            break;

	            default:
	            break;
 8002814:	bf00      	nop
	      }

}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	0800e26c 	.word	0x0800e26c
 8002824:	20000284 	.word	0x20000284
 8002828:	200003ac 	.word	0x200003ac
 800282c:	0800e284 	.word	0x0800e284

08002830 <_Z18getConfigBluetoothPci>:


void getConfigBluetooth(char * cfgString, int stringSize)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
//	   bt_readConfigString(cfgString);
//   }

   //mainMenu.page_config.pageAlerts.configChange = true;

	if(cfgString[BT_CONFIG_TONE_ALERT] == '1')
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b31      	cmp	r3, #49	; 0x31
 8002840:	d10f      	bne.n	8002862 <_Z18getConfigBluetoothPci+0x32>
	{
		//mainMenu.page_config.pageAlerts.setToneAlertEnable(1);
		sprintf(serialOutBuffer,"\r\nBT_CONFIG_TONE_ALERT: On");
 8002842:	4962      	ldr	r1, [pc, #392]	; (80029cc <_Z18getConfigBluetoothPci+0x19c>)
 8002844:	4862      	ldr	r0, [pc, #392]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 8002846:	f00a f977 	bl	800cb38 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)serialOutBuffer, strlen(serialOutBuffer), HAL_MAX_DELAY);
 800284a:	4861      	ldr	r0, [pc, #388]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 800284c:	f7fd fc98 	bl	8000180 <strlen>
 8002850:	4603      	mov	r3, r0
 8002852:	b29a      	uxth	r2, r3
 8002854:	f04f 33ff 	mov.w	r3, #4294967295
 8002858:	495d      	ldr	r1, [pc, #372]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 800285a:	485e      	ldr	r0, [pc, #376]	; (80029d4 <_Z18getConfigBluetoothPci+0x1a4>)
 800285c:	f003 fb98 	bl	8005f90 <HAL_UART_Transmit>
 8002860:	e00e      	b.n	8002880 <_Z18getConfigBluetoothPci+0x50>
	}
	else
	{
		//mainMenu.page_config.pageAlerts.setToneAlertEnable(0);
		sprintf(serialOutBuffer,"\r\nBT_CONFIG_TONE_ALERT: Off");
 8002862:	495d      	ldr	r1, [pc, #372]	; (80029d8 <_Z18getConfigBluetoothPci+0x1a8>)
 8002864:	485a      	ldr	r0, [pc, #360]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 8002866:	f00a f967 	bl	800cb38 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)serialOutBuffer, strlen(serialOutBuffer), HAL_MAX_DELAY);
 800286a:	4859      	ldr	r0, [pc, #356]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 800286c:	f7fd fc88 	bl	8000180 <strlen>
 8002870:	4603      	mov	r3, r0
 8002872:	b29a      	uxth	r2, r3
 8002874:	f04f 33ff 	mov.w	r3, #4294967295
 8002878:	4955      	ldr	r1, [pc, #340]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 800287a:	4856      	ldr	r0, [pc, #344]	; (80029d4 <_Z18getConfigBluetoothPci+0x1a4>)
 800287c:	f003 fb88 	bl	8005f90 <HAL_UART_Transmit>
	}

	if(cfgString[BT_CONFIG_VIBRATION_ALERT] == '1')
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3301      	adds	r3, #1
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b31      	cmp	r3, #49	; 0x31
 8002888:	d10f      	bne.n	80028aa <_Z18getConfigBluetoothPci+0x7a>
	{
		//mainMenu.page_config.pageAlerts.setVibrationAlertEnable(1);
		sprintf(serialOutBuffer,"\r\nBT_CONFIG_VIBRATION_ALERT: On");
 800288a:	4954      	ldr	r1, [pc, #336]	; (80029dc <_Z18getConfigBluetoothPci+0x1ac>)
 800288c:	4850      	ldr	r0, [pc, #320]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 800288e:	f00a f953 	bl	800cb38 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)serialOutBuffer, strlen(serialOutBuffer), HAL_MAX_DELAY);
 8002892:	484f      	ldr	r0, [pc, #316]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 8002894:	f7fd fc74 	bl	8000180 <strlen>
 8002898:	4603      	mov	r3, r0
 800289a:	b29a      	uxth	r2, r3
 800289c:	f04f 33ff 	mov.w	r3, #4294967295
 80028a0:	494b      	ldr	r1, [pc, #300]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 80028a2:	484c      	ldr	r0, [pc, #304]	; (80029d4 <_Z18getConfigBluetoothPci+0x1a4>)
 80028a4:	f003 fb74 	bl	8005f90 <HAL_UART_Transmit>
 80028a8:	e00e      	b.n	80028c8 <_Z18getConfigBluetoothPci+0x98>
	}
	else
	{
		//mainMenu.page_config.pageAlerts.setVibrationAlertEnable(0);
		sprintf(serialOutBuffer,"\r\nBT_CONFIG_VIBRATION_ALERT: Off");
 80028aa:	494d      	ldr	r1, [pc, #308]	; (80029e0 <_Z18getConfigBluetoothPci+0x1b0>)
 80028ac:	4848      	ldr	r0, [pc, #288]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 80028ae:	f00a f943 	bl	800cb38 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)serialOutBuffer, strlen(serialOutBuffer), HAL_MAX_DELAY);
 80028b2:	4847      	ldr	r0, [pc, #284]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 80028b4:	f7fd fc64 	bl	8000180 <strlen>
 80028b8:	4603      	mov	r3, r0
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	f04f 33ff 	mov.w	r3, #4294967295
 80028c0:	4943      	ldr	r1, [pc, #268]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 80028c2:	4844      	ldr	r0, [pc, #272]	; (80029d4 <_Z18getConfigBluetoothPci+0x1a4>)
 80028c4:	f003 fb64 	bl	8005f90 <HAL_UART_Transmit>
	}

	if(cfgString[BT_CONFIG_REPETITION_ALERT] == '1')
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3302      	adds	r3, #2
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b31      	cmp	r3, #49	; 0x31
 80028d0:	d10f      	bne.n	80028f2 <_Z18getConfigBluetoothPci+0xc2>
	{
		//mainMenu.page_config.pageAlerts.setRepetitionAlertEnable(1);
		sprintf(serialOutBuffer,"\r\nBT_CONFIG_REPETITION_ALERT: On");
 80028d2:	4944      	ldr	r1, [pc, #272]	; (80029e4 <_Z18getConfigBluetoothPci+0x1b4>)
 80028d4:	483e      	ldr	r0, [pc, #248]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 80028d6:	f00a f92f 	bl	800cb38 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)serialOutBuffer, strlen(serialOutBuffer), HAL_MAX_DELAY);
 80028da:	483d      	ldr	r0, [pc, #244]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 80028dc:	f7fd fc50 	bl	8000180 <strlen>
 80028e0:	4603      	mov	r3, r0
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	f04f 33ff 	mov.w	r3, #4294967295
 80028e8:	4939      	ldr	r1, [pc, #228]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 80028ea:	483a      	ldr	r0, [pc, #232]	; (80029d4 <_Z18getConfigBluetoothPci+0x1a4>)
 80028ec:	f003 fb50 	bl	8005f90 <HAL_UART_Transmit>
 80028f0:	e00e      	b.n	8002910 <_Z18getConfigBluetoothPci+0xe0>
	}
	else
	{
		//mainMenu.page_config.pageAlerts.setRepetitionAlertEnable(0);
		sprintf(serialOutBuffer,"\r\nBT_CONFIG_REPETITION_ALERT: Off");
 80028f2:	493d      	ldr	r1, [pc, #244]	; (80029e8 <_Z18getConfigBluetoothPci+0x1b8>)
 80028f4:	4836      	ldr	r0, [pc, #216]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 80028f6:	f00a f91f 	bl	800cb38 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)serialOutBuffer, strlen(serialOutBuffer), HAL_MAX_DELAY);
 80028fa:	4835      	ldr	r0, [pc, #212]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 80028fc:	f7fd fc40 	bl	8000180 <strlen>
 8002900:	4603      	mov	r3, r0
 8002902:	b29a      	uxth	r2, r3
 8002904:	f04f 33ff 	mov.w	r3, #4294967295
 8002908:	4931      	ldr	r1, [pc, #196]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 800290a:	4832      	ldr	r0, [pc, #200]	; (80029d4 <_Z18getConfigBluetoothPci+0x1a4>)
 800290c:	f003 fb40 	bl	8005f90 <HAL_UART_Transmit>
	}

	if(cfgString[BT_CONFIG_TIME_ALERT] == '1')
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3303      	adds	r3, #3
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b31      	cmp	r3, #49	; 0x31
 8002918:	d10f      	bne.n	800293a <_Z18getConfigBluetoothPci+0x10a>
	{
		//mainMenu.page_config.pageAlerts.setTimeAlertEnable(1);
		sprintf(serialOutBuffer,"\r\nBT_CONFIG_TIME_ALERT: On");
 800291a:	4934      	ldr	r1, [pc, #208]	; (80029ec <_Z18getConfigBluetoothPci+0x1bc>)
 800291c:	482c      	ldr	r0, [pc, #176]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 800291e:	f00a f90b 	bl	800cb38 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)serialOutBuffer, strlen(serialOutBuffer), HAL_MAX_DELAY);
 8002922:	482b      	ldr	r0, [pc, #172]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 8002924:	f7fd fc2c 	bl	8000180 <strlen>
 8002928:	4603      	mov	r3, r0
 800292a:	b29a      	uxth	r2, r3
 800292c:	f04f 33ff 	mov.w	r3, #4294967295
 8002930:	4927      	ldr	r1, [pc, #156]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 8002932:	4828      	ldr	r0, [pc, #160]	; (80029d4 <_Z18getConfigBluetoothPci+0x1a4>)
 8002934:	f003 fb2c 	bl	8005f90 <HAL_UART_Transmit>
 8002938:	e00e      	b.n	8002958 <_Z18getConfigBluetoothPci+0x128>
	}
	else
	{
		//mainMenu.page_config.pageAlerts.setTimeAlertEnable(0);
		sprintf(serialOutBuffer,"\r\nBT_CONFIG_TIME_ALERT: Off");
 800293a:	492d      	ldr	r1, [pc, #180]	; (80029f0 <_Z18getConfigBluetoothPci+0x1c0>)
 800293c:	4824      	ldr	r0, [pc, #144]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 800293e:	f00a f8fb 	bl	800cb38 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)serialOutBuffer, strlen(serialOutBuffer), HAL_MAX_DELAY);
 8002942:	4823      	ldr	r0, [pc, #140]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 8002944:	f7fd fc1c 	bl	8000180 <strlen>
 8002948:	4603      	mov	r3, r0
 800294a:	b29a      	uxth	r2, r3
 800294c:	f04f 33ff 	mov.w	r3, #4294967295
 8002950:	491f      	ldr	r1, [pc, #124]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 8002952:	4820      	ldr	r0, [pc, #128]	; (80029d4 <_Z18getConfigBluetoothPci+0x1a4>)
 8002954:	f003 fb1c 	bl	8005f90 <HAL_UART_Transmit>
	}

	if(cfgString[BT_CONFIG_ELEVATION_ANGLE_ALERT] == '1')
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3304      	adds	r3, #4
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b31      	cmp	r3, #49	; 0x31
 8002960:	d10f      	bne.n	8002982 <_Z18getConfigBluetoothPci+0x152>
	{
		//mainMenu.page_config.pageAlerts.setAngleDetectAlertEnable(1);
		sprintf(serialOutBuffer,"\r\nBT_CONFIG_ELEVATION_ANGLE_ALERT: On");
 8002962:	4924      	ldr	r1, [pc, #144]	; (80029f4 <_Z18getConfigBluetoothPci+0x1c4>)
 8002964:	481a      	ldr	r0, [pc, #104]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 8002966:	f00a f8e7 	bl	800cb38 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)serialOutBuffer, strlen(serialOutBuffer), HAL_MAX_DELAY);
 800296a:	4819      	ldr	r0, [pc, #100]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 800296c:	f7fd fc08 	bl	8000180 <strlen>
 8002970:	4603      	mov	r3, r0
 8002972:	b29a      	uxth	r2, r3
 8002974:	f04f 33ff 	mov.w	r3, #4294967295
 8002978:	4915      	ldr	r1, [pc, #84]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 800297a:	4816      	ldr	r0, [pc, #88]	; (80029d4 <_Z18getConfigBluetoothPci+0x1a4>)
 800297c:	f003 fb08 	bl	8005f90 <HAL_UART_Transmit>
 8002980:	e00e      	b.n	80029a0 <_Z18getConfigBluetoothPci+0x170>
	}
	else
	{
		//mainMenu.page_config.pageAlerts.setAngleDetectAlertEnable(0);
		sprintf(serialOutBuffer,"\r\nBT_CONFIG_ELEVATION_ANGLE_ALERT: Off");
 8002982:	491d      	ldr	r1, [pc, #116]	; (80029f8 <_Z18getConfigBluetoothPci+0x1c8>)
 8002984:	4812      	ldr	r0, [pc, #72]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 8002986:	f00a f8d7 	bl	800cb38 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)serialOutBuffer, strlen(serialOutBuffer), HAL_MAX_DELAY);
 800298a:	4811      	ldr	r0, [pc, #68]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 800298c:	f7fd fbf8 	bl	8000180 <strlen>
 8002990:	4603      	mov	r3, r0
 8002992:	b29a      	uxth	r2, r3
 8002994:	f04f 33ff 	mov.w	r3, #4294967295
 8002998:	490d      	ldr	r1, [pc, #52]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 800299a:	480e      	ldr	r0, [pc, #56]	; (80029d4 <_Z18getConfigBluetoothPci+0x1a4>)
 800299c:	f003 faf8 	bl	8005f90 <HAL_UART_Transmit>
	}

	if(cfgString[BT_CONFIG_MAX_ANGLE_ALERT] == '1')
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3305      	adds	r3, #5
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b31      	cmp	r3, #49	; 0x31
 80029a8:	d12a      	bne.n	8002a00 <_Z18getConfigBluetoothPci+0x1d0>
	{
	  //mainMenu.page_config.pageAlerts.setAngleMaxAlertEnable(1);
		sprintf(serialOutBuffer,"\r\nBT_CONFIG_MAX_ANGLE_ALERT: On");
 80029aa:	4914      	ldr	r1, [pc, #80]	; (80029fc <_Z18getConfigBluetoothPci+0x1cc>)
 80029ac:	4808      	ldr	r0, [pc, #32]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 80029ae:	f00a f8c3 	bl	800cb38 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)serialOutBuffer, strlen(serialOutBuffer), HAL_MAX_DELAY);
 80029b2:	4807      	ldr	r0, [pc, #28]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 80029b4:	f7fd fbe4 	bl	8000180 <strlen>
 80029b8:	4603      	mov	r3, r0
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	f04f 33ff 	mov.w	r3, #4294967295
 80029c0:	4903      	ldr	r1, [pc, #12]	; (80029d0 <_Z18getConfigBluetoothPci+0x1a0>)
 80029c2:	4804      	ldr	r0, [pc, #16]	; (80029d4 <_Z18getConfigBluetoothPci+0x1a4>)
 80029c4:	f003 fae4 	bl	8005f90 <HAL_UART_Transmit>
 80029c8:	e029      	b.n	8002a1e <_Z18getConfigBluetoothPci+0x1ee>
 80029ca:	bf00      	nop
 80029cc:	0800e2a8 	.word	0x0800e2a8
 80029d0:	20000284 	.word	0x20000284
 80029d4:	200003ac 	.word	0x200003ac
 80029d8:	0800e2c4 	.word	0x0800e2c4
 80029dc:	0800e2e0 	.word	0x0800e2e0
 80029e0:	0800e300 	.word	0x0800e300
 80029e4:	0800e324 	.word	0x0800e324
 80029e8:	0800e348 	.word	0x0800e348
 80029ec:	0800e36c 	.word	0x0800e36c
 80029f0:	0800e388 	.word	0x0800e388
 80029f4:	0800e3a4 	.word	0x0800e3a4
 80029f8:	0800e3cc 	.word	0x0800e3cc
 80029fc:	0800e3f4 	.word	0x0800e3f4
	}
	else
	{
	  //mainMenu.page_config.pageAlerts.setAngleMaxAlertEnable(0);
		sprintf(serialOutBuffer,"\r\nBT_CONFIG_MAX_ANGLE_ALERT: Off");
 8002a00:	4954      	ldr	r1, [pc, #336]	; (8002b54 <_Z18getConfigBluetoothPci+0x324>)
 8002a02:	4855      	ldr	r0, [pc, #340]	; (8002b58 <_Z18getConfigBluetoothPci+0x328>)
 8002a04:	f00a f898 	bl	800cb38 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)serialOutBuffer, strlen(serialOutBuffer), HAL_MAX_DELAY);
 8002a08:	4853      	ldr	r0, [pc, #332]	; (8002b58 <_Z18getConfigBluetoothPci+0x328>)
 8002a0a:	f7fd fbb9 	bl	8000180 <strlen>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	f04f 33ff 	mov.w	r3, #4294967295
 8002a16:	4950      	ldr	r1, [pc, #320]	; (8002b58 <_Z18getConfigBluetoothPci+0x328>)
 8002a18:	4850      	ldr	r0, [pc, #320]	; (8002b5c <_Z18getConfigBluetoothPci+0x32c>)
 8002a1a:	f003 fab9 	bl	8005f90 <HAL_UART_Transmit>
	}

	//mainMenu.page_config.page_angle_detect.mAngleLimit = arrayToUint(&cfgString[BT_CONFIG_ELEVATION_ANGLE_VALUE] , 3);
	//mainMenu.page_config.page_angle_detect.configChange = true;
	sprintf(serialOutBuffer,"\r\nBT_CONFIG_ELEVATION_ANGLE_VALUE:%u",arrayToUint(&cfgString[BT_CONFIG_ELEVATION_ANGLE_VALUE],3));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3306      	adds	r3, #6
 8002a22:	2103      	movs	r1, #3
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 fa97 	bl	8002f58 <_Z11arrayToUintPKch>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	494c      	ldr	r1, [pc, #304]	; (8002b60 <_Z18getConfigBluetoothPci+0x330>)
 8002a30:	4849      	ldr	r0, [pc, #292]	; (8002b58 <_Z18getConfigBluetoothPci+0x328>)
 8002a32:	f00a f881 	bl	800cb38 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)serialOutBuffer, strlen(serialOutBuffer), HAL_MAX_DELAY);
 8002a36:	4848      	ldr	r0, [pc, #288]	; (8002b58 <_Z18getConfigBluetoothPci+0x328>)
 8002a38:	f7fd fba2 	bl	8000180 <strlen>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	f04f 33ff 	mov.w	r3, #4294967295
 8002a44:	4944      	ldr	r1, [pc, #272]	; (8002b58 <_Z18getConfigBluetoothPci+0x328>)
 8002a46:	4845      	ldr	r0, [pc, #276]	; (8002b5c <_Z18getConfigBluetoothPci+0x32c>)
 8002a48:	f003 faa2 	bl	8005f90 <HAL_UART_Transmit>


	//mainMenu.page_config.page_time.mTimeTargetMilliseconds = arrayToUint(&cfgString[BT_CONFIG_TIME_VALUE] , 3)*60*1000;
	//mainMenu.page_config.page_time.configChange = true;
	sprintf(serialOutBuffer,"\r\nBT_CONFIG_TIME_VALUE:%u",arrayToUint(&cfgString[BT_CONFIG_TIME_VALUE],3));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3309      	adds	r3, #9
 8002a50:	2103      	movs	r1, #3
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 fa80 	bl	8002f58 <_Z11arrayToUintPKch>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	4941      	ldr	r1, [pc, #260]	; (8002b64 <_Z18getConfigBluetoothPci+0x334>)
 8002a5e:	483e      	ldr	r0, [pc, #248]	; (8002b58 <_Z18getConfigBluetoothPci+0x328>)
 8002a60:	f00a f86a 	bl	800cb38 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)serialOutBuffer, strlen(serialOutBuffer), HAL_MAX_DELAY);
 8002a64:	483c      	ldr	r0, [pc, #240]	; (8002b58 <_Z18getConfigBluetoothPci+0x328>)
 8002a66:	f7fd fb8b 	bl	8000180 <strlen>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a72:	4939      	ldr	r1, [pc, #228]	; (8002b58 <_Z18getConfigBluetoothPci+0x328>)
 8002a74:	4839      	ldr	r0, [pc, #228]	; (8002b5c <_Z18getConfigBluetoothPci+0x32c>)
 8002a76:	f003 fa8b 	bl	8005f90 <HAL_UART_Transmit>

	//mainMenu.page_config.page_Length.mPeriodLength = arrayToUint(&cfgString[BT_CONFIG_PERIOD_TIME_VALUE] , 3)*60*1000;
	//mainMenu.page_config.page_Length.configChange = true;
	sprintf(serialOutBuffer,"\r\nBT_CONFIG_PERIOD_TIME_VALUE:%u",arrayToUint(&cfgString[BT_CONFIG_PERIOD_TIME_VALUE],3));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	330c      	adds	r3, #12
 8002a7e:	2103      	movs	r1, #3
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fa69 	bl	8002f58 <_Z11arrayToUintPKch>
 8002a86:	4603      	mov	r3, r0
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4937      	ldr	r1, [pc, #220]	; (8002b68 <_Z18getConfigBluetoothPci+0x338>)
 8002a8c:	4832      	ldr	r0, [pc, #200]	; (8002b58 <_Z18getConfigBluetoothPci+0x328>)
 8002a8e:	f00a f853 	bl	800cb38 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)serialOutBuffer, strlen(serialOutBuffer), HAL_MAX_DELAY);
 8002a92:	4831      	ldr	r0, [pc, #196]	; (8002b58 <_Z18getConfigBluetoothPci+0x328>)
 8002a94:	f7fd fb74 	bl	8000180 <strlen>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa0:	492d      	ldr	r1, [pc, #180]	; (8002b58 <_Z18getConfigBluetoothPci+0x328>)
 8002aa2:	482e      	ldr	r0, [pc, #184]	; (8002b5c <_Z18getConfigBluetoothPci+0x32c>)
 8002aa4:	f003 fa74 	bl	8005f90 <HAL_UART_Transmit>

	//mainMenu.page_config.page_rep.mRepLimit = arrayToUint(&cfgString[BT_CONFIG_REP_LIMIT_VALUE] , 3);
	//mainMenu.page_config.page_rep.configChange = true;
	sprintf(serialOutBuffer,"\r\nBT_CONFIG_REP_LIMIT_VALUE:%u",arrayToUint(&cfgString[BT_CONFIG_REP_LIMIT_VALUE],3));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	330f      	adds	r3, #15
 8002aac:	2103      	movs	r1, #3
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 fa52 	bl	8002f58 <_Z11arrayToUintPKch>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	492c      	ldr	r1, [pc, #176]	; (8002b6c <_Z18getConfigBluetoothPci+0x33c>)
 8002aba:	4827      	ldr	r0, [pc, #156]	; (8002b58 <_Z18getConfigBluetoothPci+0x328>)
 8002abc:	f00a f83c 	bl	800cb38 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)serialOutBuffer, strlen(serialOutBuffer), HAL_MAX_DELAY);
 8002ac0:	4825      	ldr	r0, [pc, #148]	; (8002b58 <_Z18getConfigBluetoothPci+0x328>)
 8002ac2:	f7fd fb5d 	bl	8000180 <strlen>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	f04f 33ff 	mov.w	r3, #4294967295
 8002ace:	4922      	ldr	r1, [pc, #136]	; (8002b58 <_Z18getConfigBluetoothPci+0x328>)
 8002ad0:	4822      	ldr	r0, [pc, #136]	; (8002b5c <_Z18getConfigBluetoothPci+0x32c>)
 8002ad2:	f003 fa5d 	bl	8005f90 <HAL_UART_Transmit>

	//mainMenu.page_config.page_angle_max.mAngleLimit = arrayToUint(&cfgString[BT_CONFIG_MAX_ANGLE_VALUE] , 3);
	//mainMenu.page_config.page_angle_max.configChange = true;
	sprintf(serialOutBuffer,"\r\nBT_CONFIG_MAX_ANGLE_VALUE:%u",arrayToUint(&cfgString[BT_CONFIG_MAX_ANGLE_VALUE],3));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3312      	adds	r3, #18
 8002ada:	2103      	movs	r1, #3
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 fa3b 	bl	8002f58 <_Z11arrayToUintPKch>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4922      	ldr	r1, [pc, #136]	; (8002b70 <_Z18getConfigBluetoothPci+0x340>)
 8002ae8:	481b      	ldr	r0, [pc, #108]	; (8002b58 <_Z18getConfigBluetoothPci+0x328>)
 8002aea:	f00a f825 	bl	800cb38 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)serialOutBuffer, strlen(serialOutBuffer), HAL_MAX_DELAY);
 8002aee:	481a      	ldr	r0, [pc, #104]	; (8002b58 <_Z18getConfigBluetoothPci+0x328>)
 8002af0:	f7fd fb46 	bl	8000180 <strlen>
 8002af4:	4603      	mov	r3, r0
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	f04f 33ff 	mov.w	r3, #4294967295
 8002afc:	4916      	ldr	r1, [pc, #88]	; (8002b58 <_Z18getConfigBluetoothPci+0x328>)
 8002afe:	4817      	ldr	r0, [pc, #92]	; (8002b5c <_Z18getConfigBluetoothPci+0x32c>)
 8002b00:	f003 fa46 	bl	8005f90 <HAL_UART_Transmit>

	//mainMenu.page_config.configChange = true;
	//strcpy(mainMenu.page_config.bluetoothDeviceName,&cfgString[BT_CONFIG_DEVICE_NAME]);
	sprintf(serialOutBuffer,"\r\nBT_CONFIG_DEVICE_NAME: ");
 8002b04:	491b      	ldr	r1, [pc, #108]	; (8002b74 <_Z18getConfigBluetoothPci+0x344>)
 8002b06:	4814      	ldr	r0, [pc, #80]	; (8002b58 <_Z18getConfigBluetoothPci+0x328>)
 8002b08:	f00a f816 	bl	800cb38 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)serialOutBuffer, strlen(serialOutBuffer), HAL_MAX_DELAY);
 8002b0c:	4812      	ldr	r0, [pc, #72]	; (8002b58 <_Z18getConfigBluetoothPci+0x328>)
 8002b0e:	f7fd fb37 	bl	8000180 <strlen>
 8002b12:	4603      	mov	r3, r0
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	f04f 33ff 	mov.w	r3, #4294967295
 8002b1a:	490f      	ldr	r1, [pc, #60]	; (8002b58 <_Z18getConfigBluetoothPci+0x328>)
 8002b1c:	480f      	ldr	r0, [pc, #60]	; (8002b5c <_Z18getConfigBluetoothPci+0x32c>)
 8002b1e:	f003 fa37 	bl	8005f90 <HAL_UART_Transmit>

	sprintf(deviceName,&cfgString[BT_CONFIG_DEVICE_NAME]);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3315      	adds	r3, #21
 8002b26:	4619      	mov	r1, r3
 8002b28:	4813      	ldr	r0, [pc, #76]	; (8002b78 <_Z18getConfigBluetoothPci+0x348>)
 8002b2a:	f00a f805 	bl	800cb38 <siprintf>
	sprintf(serialOutBuffer,deviceName);
 8002b2e:	4912      	ldr	r1, [pc, #72]	; (8002b78 <_Z18getConfigBluetoothPci+0x348>)
 8002b30:	4809      	ldr	r0, [pc, #36]	; (8002b58 <_Z18getConfigBluetoothPci+0x328>)
 8002b32:	f00a f801 	bl	800cb38 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)serialOutBuffer, strlen(serialOutBuffer), HAL_MAX_DELAY);
 8002b36:	4808      	ldr	r0, [pc, #32]	; (8002b58 <_Z18getConfigBluetoothPci+0x328>)
 8002b38:	f7fd fb22 	bl	8000180 <strlen>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	f04f 33ff 	mov.w	r3, #4294967295
 8002b44:	4904      	ldr	r1, [pc, #16]	; (8002b58 <_Z18getConfigBluetoothPci+0x328>)
 8002b46:	4805      	ldr	r0, [pc, #20]	; (8002b5c <_Z18getConfigBluetoothPci+0x32c>)
 8002b48:	f003 fa22 	bl	8005f90 <HAL_UART_Transmit>

	//BLE.setDeviceName(mainMenu.page_config.bluetoothDeviceName);
	//BLE.setDeviceName(DEFAULT_BLUTOOTH_NAME);
	//BLE.advertise();

}
 8002b4c:	bf00      	nop
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	0800e414 	.word	0x0800e414
 8002b58:	20000284 	.word	0x20000284
 8002b5c:	200003ac 	.word	0x200003ac
 8002b60:	0800e438 	.word	0x0800e438
 8002b64:	0800e460 	.word	0x0800e460
 8002b68:	0800e47c 	.word	0x0800e47c
 8002b6c:	0800e4a0 	.word	0x0800e4a0
 8002b70:	0800e4c0 	.word	0x0800e4c0
 8002b74:	0800e4e0 	.word	0x0800e4e0
 8002b78:	20000250 	.word	0x20000250

08002b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002b80:	b672      	cpsid	i
}
 8002b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b84:	e7fe      	b.n	8002b84 <Error_Handler+0x8>

08002b86 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8002b86:	b480      	push	{r7}
 8002b88:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002b8a:	bf00      	nop
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <LL_RCC_EnableRTC>:
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ba8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <LL_APB1_GRP1_EnableClock>:
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b085      	sub	sp, #20
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002bc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bda:	68fb      	ldr	r3, [r7, #12]
}
 8002bdc:	bf00      	nop
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002bec:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <MX_RTC_Init+0x4c>)
 8002bee:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <MX_RTC_Init+0x50>)
 8002bf0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002bf2:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <MX_RTC_Init+0x4c>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002bf8:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <MX_RTC_Init+0x4c>)
 8002bfa:	220f      	movs	r2, #15
 8002bfc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <MX_RTC_Init+0x4c>)
 8002c00:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002c04:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002c06:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <MX_RTC_Init+0x4c>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002c0c:	4b09      	ldr	r3, [pc, #36]	; (8002c34 <MX_RTC_Init+0x4c>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002c12:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <MX_RTC_Init+0x4c>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <MX_RTC_Init+0x4c>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002c1e:	4805      	ldr	r0, [pc, #20]	; (8002c34 <MX_RTC_Init+0x4c>)
 8002c20:	f003 f858 	bl	8005cd4 <HAL_RTC_Init>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002c2a:	f7ff ffa7 	bl	8002b7c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000384 	.word	0x20000384
 8002c38:	40002800 	.word	0x40002800

08002c3c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b096      	sub	sp, #88	; 0x58
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c44:	f107 0308 	add.w	r3, r7, #8
 8002c48:	2250      	movs	r2, #80	; 0x50
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f009 fec7 	bl	800c9e0 <memset>
  if(rtcHandle->Instance==RTC)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a0e      	ldr	r2, [pc, #56]	; (8002c90 <HAL_RTC_MspInit+0x54>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d115      	bne.n	8002c88 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c60:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002c62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c66:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c68:	f107 0308 	add.w	r3, r7, #8
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f002 fdaa 	bl	80057c6 <HAL_RCCEx_PeriphCLKConfig>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002c78:	f7ff ff80 	bl	8002b7c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c7c:	f7ff ff8a 	bl	8002b94 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002c80:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002c84:	f7ff ff97 	bl	8002bb6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002c88:	bf00      	nop
 8002c8a:	3758      	adds	r7, #88	; 0x58
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40002800 	.word	0x40002800

08002c94 <LL_AHB3_GRP1_EnableClock>:
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ca2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
}
 8002cba:	bf00      	nop
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002cca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002cce:	f7ff ffe1 	bl	8002c94 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	202e      	movs	r0, #46	; 0x2e
 8002cd8:	f000 fcdb 	bl	8003692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002cdc:	202e      	movs	r0, #46	; 0x2e
 8002cde:	f000 fcf2 	bl	80036c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cea:	e7fe      	b.n	8002cea <NMI_Handler+0x4>

08002cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cf0:	e7fe      	b.n	8002cf0 <HardFault_Handler+0x4>

08002cf2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cf6:	e7fe      	b.n	8002cf6 <MemManage_Handler+0x4>

08002cf8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cfc:	e7fe      	b.n	8002cfc <BusFault_Handler+0x4>

08002cfe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d02:	e7fe      	b.n	8002d02 <UsageFault_Handler+0x4>

08002d04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d08:	bf00      	nop
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d12:	b480      	push	{r7}
 8002d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d24:	bf00      	nop
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d32:	f000 fb3b 	bl	80033ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d40:	4802      	ldr	r0, [pc, #8]	; (8002d4c <USART1_IRQHandler+0x10>)
 8002d42:	f003 fa4d 	bl	80061e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	200003ac 	.word	0x200003ac

08002d50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BI_USER_Pin);
 8002d54:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002d58:	f001 f9b4 	bl	80040c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d5c:	bf00      	nop
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002d64:	f001 f9c6 	bl	80040f4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002d68:	bf00      	nop
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002d70:	4802      	ldr	r0, [pc, #8]	; (8002d7c <DMA2_Channel4_IRQHandler+0x10>)
 8002d72:	f000 fece 	bl	8003b12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	2000043c 	.word	0x2000043c

08002d80 <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8002d84:	f7ff f84a 	bl	8001e1c <HW_TS_RTC_Wakeup_Handler>
}
 8002d88:	bf00      	nop
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <IPCC_C1_TX_IRQHandler>:

void IPCC_C1_TX_IRQHandler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8002d90:	f009 fa62 	bl	800c258 <HW_IPCC_Tx_Handler>
  return;
 8002d94:	bf00      	nop
}
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8002d9c:	f009 fa24 	bl	800c1e8 <HW_IPCC_Rx_Handler>
  return;
 8002da0:	bf00      	nop
}
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	e00a      	b.n	8002dcc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002db6:	f3af 8000 	nop.w
 8002dba:	4601      	mov	r1, r0
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	1c5a      	adds	r2, r3, #1
 8002dc0:	60ba      	str	r2, [r7, #8]
 8002dc2:	b2ca      	uxtb	r2, r1
 8002dc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	dbf0      	blt.n	8002db6 <_read+0x12>
	}

return len;
 8002dd4:	687b      	ldr	r3, [r7, #4]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <_close>:
	}
	return len;
}

int _close(int file)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
	return -1;
 8002de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e06:	605a      	str	r2, [r3, #4]
	return 0;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <_isatty>:

int _isatty(int file)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
	return 1;
 8002e1e:	2301      	movs	r3, #1
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
	return 0;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
	...

08002e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e50:	4a14      	ldr	r2, [pc, #80]	; (8002ea4 <_sbrk+0x5c>)
 8002e52:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <_sbrk+0x60>)
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e5c:	4b13      	ldr	r3, [pc, #76]	; (8002eac <_sbrk+0x64>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d102      	bne.n	8002e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e64:	4b11      	ldr	r3, [pc, #68]	; (8002eac <_sbrk+0x64>)
 8002e66:	4a12      	ldr	r2, [pc, #72]	; (8002eb0 <_sbrk+0x68>)
 8002e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e6a:	4b10      	ldr	r3, [pc, #64]	; (8002eac <_sbrk+0x64>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d207      	bcs.n	8002e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e78:	f009 fd7a 	bl	800c970 <__errno>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	220c      	movs	r2, #12
 8002e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e82:	f04f 33ff 	mov.w	r3, #4294967295
 8002e86:	e009      	b.n	8002e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e88:	4b08      	ldr	r3, [pc, #32]	; (8002eac <_sbrk+0x64>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e8e:	4b07      	ldr	r3, [pc, #28]	; (8002eac <_sbrk+0x64>)
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4413      	add	r3, r2
 8002e96:	4a05      	ldr	r2, [pc, #20]	; (8002eac <_sbrk+0x64>)
 8002e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	20030000 	.word	0x20030000
 8002ea8:	00000400 	.word	0x00000400
 8002eac:	200003a8 	.word	0x200003a8
 8002eb0:	200016f8 	.word	0x200016f8

08002eb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002eb8:	4b24      	ldr	r3, [pc, #144]	; (8002f4c <SystemInit+0x98>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebe:	4a23      	ldr	r2, [pc, #140]	; (8002f4c <SystemInit+0x98>)
 8002ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002edc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002ee0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eec:	4b18      	ldr	r3, [pc, #96]	; (8002f50 <SystemInit+0x9c>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002efa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002efe:	f023 0305 	bic.w	r3, r3, #5
 8002f02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f12:	f023 0301 	bic.w	r3, r3, #1
 8002f16:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1e:	4a0d      	ldr	r2, [pc, #52]	; (8002f54 <SystemInit+0xa0>)
 8002f20:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f26:	4a0b      	ldr	r2, [pc, #44]	; (8002f54 <SystemInit+0xa0>)
 8002f28:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f38:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3e:	2200      	movs	r2, #0
 8002f40:	619a      	str	r2, [r3, #24]
}
 8002f42:	bf00      	nop
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	e000ed00 	.word	0xe000ed00
 8002f50:	faf6fefb 	.word	0xfaf6fefb
 8002f54:	22041000 	.word	0x22041000

08002f58 <_Z11arrayToUintPKch>:
 * @param array         The source aray that contains the number in char
 * @param nbDigit       The number of digit
 * @return unsigned int The number in unsigned int
 */
unsigned int arrayToUint(const char* array, uint8_t nbDigit )
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	70fb      	strb	r3, [r7, #3]
    uint16_t filenumberInt = 0;;
 8002f64:	2300      	movs	r3, #0
 8002f66:	81fb      	strh	r3, [r7, #14]


    for(int i = 0 ; i < nbDigit; i++)
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	78fb      	ldrb	r3, [r7, #3]
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	da19      	bge.n	8002fa8 <_Z11arrayToUintPKch+0x50>
        {
            filenumberInt = (filenumberInt * 10);
 8002f74:	89fb      	ldrh	r3, [r7, #14]
 8002f76:	461a      	mov	r2, r3
 8002f78:	0092      	lsls	r2, r2, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	81fb      	strh	r3, [r7, #14]

            if(array[i] != '0')
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	4413      	add	r3, r2
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b30      	cmp	r3, #48	; 0x30
 8002f8a:	d009      	beq.n	8002fa0 <_Z11arrayToUintPKch+0x48>
            {
                filenumberInt = filenumberInt + (array[i] - '0');
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	4413      	add	r3, r2
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	89fb      	ldrh	r3, [r7, #14]
 8002f98:	4413      	add	r3, r2
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3b30      	subs	r3, #48	; 0x30
 8002f9e:	81fb      	strh	r3, [r7, #14]
    for(int i = 0 ; i < nbDigit; i++)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	e7e1      	b.n	8002f6c <_Z11arrayToUintPKch+0x14>
            }
        }
    return filenumberInt;
 8002fa8:	89fb      	ldrh	r3, [r7, #14]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <_Z11uintToArraytPch>:
 * @param nbDigit The number of digits.
 * 
 * @return error Status
 */
uint8_t uintToArray(uint16_t number, char* array, uint8_t nbDigit )
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b087      	sub	sp, #28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	6039      	str	r1, [r7, #0]
 8002fc2:	80fb      	strh	r3, [r7, #6]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	717b      	strb	r3, [r7, #5]

    uint16_t originalNumber = number;
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	82fb      	strh	r3, [r7, #22]
    uint16_t divider = 1;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	82bb      	strh	r3, [r7, #20]
    uint16_t testnumber = 0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	817b      	strh	r3, [r7, #10]

    for(int i = 1 ; i < nbDigit; i++)
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	797b      	ldrb	r3, [r7, #5]
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	da09      	bge.n	8002ff4 <_Z11uintToArraytPch+0x3c>
    {
        divider = divider * 10;
 8002fe0:	8abb      	ldrh	r3, [r7, #20]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	0092      	lsls	r2, r2, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	82bb      	strh	r3, [r7, #20]
    for(int i = 1 ; i < nbDigit; i++)
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	e7f1      	b.n	8002fd8 <_Z11uintToArraytPch+0x20>
    }

    if(number >= (divider * 10))
 8002ff4:	88f9      	ldrh	r1, [r7, #6]
 8002ff6:	8aba      	ldrh	r2, [r7, #20]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	4299      	cmp	r1, r3
 8003002:	db01      	blt.n	8003008 <_Z11uintToArraytPch+0x50>
    {
       return 0;
 8003004:	2300      	movs	r3, #0
 8003006:	e025      	b.n	8003054 <_Z11uintToArraytPch+0x9c>
    }
    else
    {
        for(int i = 0 ; i < nbDigit; i++)
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	797b      	ldrb	r3, [r7, #5]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	429a      	cmp	r2, r3
 8003012:	da1e      	bge.n	8003052 <_Z11uintToArraytPch+0x9a>
        {
            testnumber = originalNumber / divider;
 8003014:	8afa      	ldrh	r2, [r7, #22]
 8003016:	8abb      	ldrh	r3, [r7, #20]
 8003018:	fbb2 f3f3 	udiv	r3, r2, r3
 800301c:	817b      	strh	r3, [r7, #10]
            array[i] = testnumber + '0';
 800301e:	897b      	ldrh	r3, [r7, #10]
 8003020:	b2da      	uxtb	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6839      	ldr	r1, [r7, #0]
 8003026:	440b      	add	r3, r1
 8003028:	3230      	adds	r2, #48	; 0x30
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]
            originalNumber -= (testnumber * divider);
 800302e:	897a      	ldrh	r2, [r7, #10]
 8003030:	8abb      	ldrh	r3, [r7, #20]
 8003032:	fb12 f303 	smulbb	r3, r2, r3
 8003036:	b29b      	uxth	r3, r3
 8003038:	8afa      	ldrh	r2, [r7, #22]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	82fb      	strh	r3, [r7, #22]
            divider = divider / 10;
 800303e:	8abb      	ldrh	r3, [r7, #20]
 8003040:	4a07      	ldr	r2, [pc, #28]	; (8003060 <_Z11uintToArraytPch+0xa8>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	08db      	lsrs	r3, r3, #3
 8003048:	82bb      	strh	r3, [r7, #20]
        for(int i = 0 ; i < nbDigit; i++)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	3301      	adds	r3, #1
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	e7dc      	b.n	800300c <_Z11uintToArraytPch+0x54>
        }
    }

    return 1;
 8003052:	2301      	movs	r3, #1
}
 8003054:	4618      	mov	r0, r3
 8003056:	371c      	adds	r7, #28
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	cccccccd 	.word	0xcccccccd

08003064 <LL_AHB2_GRP1_EnableClock>:
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800306c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003070:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003072:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4313      	orrs	r3, r2
 800307a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800307c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003080:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4013      	ands	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003088:	68fb      	ldr	r3, [r7, #12]
}
 800308a:	bf00      	nop
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <LL_APB2_GRP1_EnableClock>:
{
 8003096:	b480      	push	{r7}
 8003098:	b085      	sub	sp, #20
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800309e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80030ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4013      	ands	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030ba:	68fb      	ldr	r3, [r7, #12]
}
 80030bc:	bf00      	nop
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80030cc:	4b23      	ldr	r3, [pc, #140]	; (800315c <MX_USART1_UART_Init+0x94>)
 80030ce:	4a24      	ldr	r2, [pc, #144]	; (8003160 <MX_USART1_UART_Init+0x98>)
 80030d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80030d2:	4b22      	ldr	r3, [pc, #136]	; (800315c <MX_USART1_UART_Init+0x94>)
 80030d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030da:	4b20      	ldr	r3, [pc, #128]	; (800315c <MX_USART1_UART_Init+0x94>)
 80030dc:	2200      	movs	r2, #0
 80030de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030e0:	4b1e      	ldr	r3, [pc, #120]	; (800315c <MX_USART1_UART_Init+0x94>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80030e6:	4b1d      	ldr	r3, [pc, #116]	; (800315c <MX_USART1_UART_Init+0x94>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030ec:	4b1b      	ldr	r3, [pc, #108]	; (800315c <MX_USART1_UART_Init+0x94>)
 80030ee:	220c      	movs	r2, #12
 80030f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030f2:	4b1a      	ldr	r3, [pc, #104]	; (800315c <MX_USART1_UART_Init+0x94>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80030f8:	4b18      	ldr	r3, [pc, #96]	; (800315c <MX_USART1_UART_Init+0x94>)
 80030fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80030fe:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003100:	4b16      	ldr	r3, [pc, #88]	; (800315c <MX_USART1_UART_Init+0x94>)
 8003102:	2200      	movs	r2, #0
 8003104:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003106:	4b15      	ldr	r3, [pc, #84]	; (800315c <MX_USART1_UART_Init+0x94>)
 8003108:	2200      	movs	r2, #0
 800310a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800310c:	4b13      	ldr	r3, [pc, #76]	; (800315c <MX_USART1_UART_Init+0x94>)
 800310e:	2200      	movs	r2, #0
 8003110:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003112:	4812      	ldr	r0, [pc, #72]	; (800315c <MX_USART1_UART_Init+0x94>)
 8003114:	f002 feec 	bl	8005ef0 <HAL_UART_Init>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800311e:	f7ff fd2d 	bl	8002b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003122:	2100      	movs	r1, #0
 8003124:	480d      	ldr	r0, [pc, #52]	; (800315c <MX_USART1_UART_Init+0x94>)
 8003126:	f004 f948 	bl	80073ba <HAL_UARTEx_SetTxFifoThreshold>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8003130:	f7ff fd24 	bl	8002b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003134:	2100      	movs	r1, #0
 8003136:	4809      	ldr	r0, [pc, #36]	; (800315c <MX_USART1_UART_Init+0x94>)
 8003138:	f004 f97d 	bl	8007436 <HAL_UARTEx_SetRxFifoThreshold>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8003142:	f7ff fd1b 	bl	8002b7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003146:	4805      	ldr	r0, [pc, #20]	; (800315c <MX_USART1_UART_Init+0x94>)
 8003148:	f004 f8fe 	bl	8007348 <HAL_UARTEx_DisableFifoMode>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8003152:	f7ff fd13 	bl	8002b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	200003ac 	.word	0x200003ac
 8003160:	40013800 	.word	0x40013800

08003164 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b09c      	sub	sp, #112	; 0x70
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800317c:	f107 030c 	add.w	r3, r7, #12
 8003180:	2250      	movs	r2, #80	; 0x50
 8003182:	2100      	movs	r1, #0
 8003184:	4618      	mov	r0, r3
 8003186:	f009 fc2b 	bl	800c9e0 <memset>
  if(uartHandle->Instance==USART1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a2e      	ldr	r2, [pc, #184]	; (8003248 <HAL_UART_MspInit+0xe4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d155      	bne.n	8003240 <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003194:	2301      	movs	r3, #1
 8003196:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003198:	2300      	movs	r3, #0
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800319c:	f107 030c 	add.w	r3, r7, #12
 80031a0:	4618      	mov	r0, r3
 80031a2:	f002 fb10 	bl	80057c6 <HAL_RCCEx_PeriphCLKConfig>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80031ac:	f7ff fce6 	bl	8002b7c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031b0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80031b4:	f7ff ff6f 	bl	8003096 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b8:	2002      	movs	r0, #2
 80031ba:	f7ff ff53 	bl	8003064 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80031be:	23c0      	movs	r3, #192	; 0xc0
 80031c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c2:	2302      	movs	r3, #2
 80031c4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ca:	2300      	movs	r3, #0
 80031cc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031ce:	2307      	movs	r3, #7
 80031d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80031d6:	4619      	mov	r1, r3
 80031d8:	481c      	ldr	r0, [pc, #112]	; (800324c <HAL_UART_MspInit+0xe8>)
 80031da:	f000 fdeb 	bl	8003db4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel4;
 80031de:	4b1c      	ldr	r3, [pc, #112]	; (8003250 <HAL_UART_MspInit+0xec>)
 80031e0:	4a1c      	ldr	r2, [pc, #112]	; (8003254 <HAL_UART_MspInit+0xf0>)
 80031e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80031e4:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <HAL_UART_MspInit+0xec>)
 80031e6:	220f      	movs	r2, #15
 80031e8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031ea:	4b19      	ldr	r3, [pc, #100]	; (8003250 <HAL_UART_MspInit+0xec>)
 80031ec:	2210      	movs	r2, #16
 80031ee:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031f0:	4b17      	ldr	r3, [pc, #92]	; (8003250 <HAL_UART_MspInit+0xec>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031f6:	4b16      	ldr	r3, [pc, #88]	; (8003250 <HAL_UART_MspInit+0xec>)
 80031f8:	2280      	movs	r2, #128	; 0x80
 80031fa:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031fc:	4b14      	ldr	r3, [pc, #80]	; (8003250 <HAL_UART_MspInit+0xec>)
 80031fe:	2200      	movs	r2, #0
 8003200:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003202:	4b13      	ldr	r3, [pc, #76]	; (8003250 <HAL_UART_MspInit+0xec>)
 8003204:	2200      	movs	r2, #0
 8003206:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003208:	4b11      	ldr	r3, [pc, #68]	; (8003250 <HAL_UART_MspInit+0xec>)
 800320a:	2200      	movs	r2, #0
 800320c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800320e:	4b10      	ldr	r3, [pc, #64]	; (8003250 <HAL_UART_MspInit+0xec>)
 8003210:	2200      	movs	r2, #0
 8003212:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003214:	480e      	ldr	r0, [pc, #56]	; (8003250 <HAL_UART_MspInit+0xec>)
 8003216:	f000 fa9b 	bl	8003750 <HAL_DMA_Init>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8003220:	f7ff fcac 	bl	8002b7c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <HAL_UART_MspInit+0xec>)
 8003228:	679a      	str	r2, [r3, #120]	; 0x78
 800322a:	4a09      	ldr	r2, [pc, #36]	; (8003250 <HAL_UART_MspInit+0xec>)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003230:	2200      	movs	r2, #0
 8003232:	2100      	movs	r1, #0
 8003234:	2024      	movs	r0, #36	; 0x24
 8003236:	f000 fa2c 	bl	8003692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800323a:	2024      	movs	r0, #36	; 0x24
 800323c:	f000 fa43 	bl	80036c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003240:	bf00      	nop
 8003242:	3770      	adds	r7, #112	; 0x70
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40013800 	.word	0x40013800
 800324c:	48000400 	.word	0x48000400
 8003250:	2000043c 	.word	0x2000043c
 8003254:	40020444 	.word	0x40020444

08003258 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003258:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800325a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800325c:	3304      	adds	r3, #4

0800325e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800325e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003260:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003262:	d3f9      	bcc.n	8003258 <CopyDataInit>
  bx lr
 8003264:	4770      	bx	lr

08003266 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003266:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003268:	3004      	adds	r0, #4

0800326a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800326a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800326c:	d3fb      	bcc.n	8003266 <FillZerobss>
  bx lr
 800326e:	4770      	bx	lr

08003270 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003270:	480c      	ldr	r0, [pc, #48]	; (80032a4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8003272:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003274:	f7ff fe1e 	bl	8002eb4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003278:	480b      	ldr	r0, [pc, #44]	; (80032a8 <LoopForever+0x8>)
 800327a:	490c      	ldr	r1, [pc, #48]	; (80032ac <LoopForever+0xc>)
 800327c:	4a0c      	ldr	r2, [pc, #48]	; (80032b0 <LoopForever+0x10>)
 800327e:	2300      	movs	r3, #0
 8003280:	f7ff ffed 	bl	800325e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003284:	480b      	ldr	r0, [pc, #44]	; (80032b4 <LoopForever+0x14>)
 8003286:	490c      	ldr	r1, [pc, #48]	; (80032b8 <LoopForever+0x18>)
 8003288:	2300      	movs	r3, #0
 800328a:	f7ff ffee 	bl	800326a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800328e:	480b      	ldr	r0, [pc, #44]	; (80032bc <LoopForever+0x1c>)
 8003290:	490b      	ldr	r1, [pc, #44]	; (80032c0 <LoopForever+0x20>)
 8003292:	2300      	movs	r3, #0
 8003294:	f7ff ffe9 	bl	800326a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003298:	f009 fb70 	bl	800c97c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800329c:	f7ff f914 	bl	80024c8 <main>

080032a0 <LoopForever>:

LoopForever:
  b LoopForever
 80032a0:	e7fe      	b.n	80032a0 <LoopForever>
 80032a2:	0000      	.short	0x0000
  ldr   r0, =_estack
 80032a4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80032a8:	20000004 	.word	0x20000004
 80032ac:	20000098 	.word	0x20000098
 80032b0:	0800fe84 	.word	0x0800fe84
  INIT_BSS _sbss, _ebss
 80032b4:	20000224 	.word	0x20000224
 80032b8:	200016f4 	.word	0x200016f4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80032bc:	200301e4 	.word	0x200301e4
 80032c0:	20030a67 	.word	0x20030a67

080032c4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80032c4:	e7fe      	b.n	80032c4 <ADC1_IRQHandler>
	...

080032c8 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80032cc:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	4a04      	ldr	r2, [pc, #16]	; (80032e4 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	6053      	str	r3, [r2, #4]
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	e0042000 	.word	0xe0042000

080032e8 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80032ec:	4b05      	ldr	r3, [pc, #20]	; (8003304 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	4a04      	ldr	r2, [pc, #16]	; (8003304 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80032f2:	f043 0302 	orr.w	r3, r3, #2
 80032f6:	6053      	str	r3, [r2, #4]
}
 80032f8:	bf00      	nop
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	e0042000 	.word	0xe0042000

08003308 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003312:	2003      	movs	r0, #3
 8003314:	f000 f9b2 	bl	800367c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003318:	2000      	movs	r0, #0
 800331a:	f000 f80d 	bl	8003338 <HAL_InitTick>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	71fb      	strb	r3, [r7, #7]
 8003328:	e001      	b.n	800332e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800332a:	f7ff fccc 	bl	8002cc6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800332e:	79fb      	ldrb	r3, [r7, #7]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003340:	2300      	movs	r3, #0
 8003342:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003344:	4b17      	ldr	r3, [pc, #92]	; (80033a4 <HAL_InitTick+0x6c>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d024      	beq.n	8003396 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 800334c:	f001 ffaa 	bl	80052a4 <HAL_RCC_GetHCLKFreq>
 8003350:	4602      	mov	r2, r0
 8003352:	4b14      	ldr	r3, [pc, #80]	; (80033a4 <HAL_InitTick+0x6c>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	4619      	mov	r1, r3
 8003358:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800335c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003360:	fbb2 f3f3 	udiv	r3, r2, r3
 8003364:	4618      	mov	r0, r3
 8003366:	f000 f9ca 	bl	80036fe <HAL_SYSTICK_Config>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10f      	bne.n	8003390 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b0f      	cmp	r3, #15
 8003374:	d809      	bhi.n	800338a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003376:	2200      	movs	r2, #0
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	f04f 30ff 	mov.w	r0, #4294967295
 800337e:	f000 f988 	bl	8003692 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003382:	4a09      	ldr	r2, [pc, #36]	; (80033a8 <HAL_InitTick+0x70>)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	e007      	b.n	800339a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	73fb      	strb	r3, [r7, #15]
 800338e:	e004      	b.n	800339a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	73fb      	strb	r3, [r7, #15]
 8003394:	e001      	b.n	800339a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800339a:	7bfb      	ldrb	r3, [r7, #15]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	2000000c 	.word	0x2000000c
 80033a8:	20000008 	.word	0x20000008

080033ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033b0:	4b06      	ldr	r3, [pc, #24]	; (80033cc <HAL_IncTick+0x20>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	461a      	mov	r2, r3
 80033b6:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <HAL_IncTick+0x24>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4413      	add	r3, r2
 80033bc:	4a04      	ldr	r2, [pc, #16]	; (80033d0 <HAL_IncTick+0x24>)
 80033be:	6013      	str	r3, [r2, #0]
}
 80033c0:	bf00      	nop
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	2000000c 	.word	0x2000000c
 80033d0:	2000049c 	.word	0x2000049c

080033d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  return uwTick;
 80033d8:	4b03      	ldr	r3, [pc, #12]	; (80033e8 <HAL_GetTick+0x14>)
 80033da:	681b      	ldr	r3, [r3, #0]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	2000049c 	.word	0x2000049c

080033ec <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80033f0:	4b03      	ldr	r3, [pc, #12]	; (8003400 <HAL_GetTickPrio+0x14>)
 80033f2:	681b      	ldr	r3, [r3, #0]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	20000008 	.word	0x20000008

08003404 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003408:	f7ff ff5e 	bl	80032c8 <LL_DBGMCU_EnableDBGSleepMode>
}
 800340c:	bf00      	nop
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003414:	f7ff ff68 	bl	80032e8 <LL_DBGMCU_EnableDBGStopMode>
}
 8003418:	bf00      	nop
 800341a:	bd80      	pop	{r7, pc}

0800341c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800342c:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <__NVIC_SetPriorityGrouping+0x44>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003438:	4013      	ands	r3, r2
 800343a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003444:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800344c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800344e:	4a04      	ldr	r2, [pc, #16]	; (8003460 <__NVIC_SetPriorityGrouping+0x44>)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	60d3      	str	r3, [r2, #12]
}
 8003454:	bf00      	nop
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	e000ed00 	.word	0xe000ed00

08003464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003468:	4b04      	ldr	r3, [pc, #16]	; (800347c <__NVIC_GetPriorityGrouping+0x18>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	0a1b      	lsrs	r3, r3, #8
 800346e:	f003 0307 	and.w	r3, r3, #7
}
 8003472:	4618      	mov	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	e000ed00 	.word	0xe000ed00

08003480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348e:	2b00      	cmp	r3, #0
 8003490:	db0b      	blt.n	80034aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	f003 021f 	and.w	r2, r3, #31
 8003498:	4907      	ldr	r1, [pc, #28]	; (80034b8 <__NVIC_EnableIRQ+0x38>)
 800349a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	2001      	movs	r0, #1
 80034a2:	fa00 f202 	lsl.w	r2, r0, r2
 80034a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	e000e100 	.word	0xe000e100

080034bc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	db12      	blt.n	80034f4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	f003 021f 	and.w	r2, r3, #31
 80034d4:	490a      	ldr	r1, [pc, #40]	; (8003500 <__NVIC_DisableIRQ+0x44>)
 80034d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	2001      	movs	r0, #1
 80034de:	fa00 f202 	lsl.w	r2, r0, r2
 80034e2:	3320      	adds	r3, #32
 80034e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80034e8:	f3bf 8f4f 	dsb	sy
}
 80034ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80034ee:	f3bf 8f6f 	isb	sy
}
 80034f2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	e000e100 	.word	0xe000e100

08003504 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800350e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003512:	2b00      	cmp	r3, #0
 8003514:	db0c      	blt.n	8003530 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	f003 021f 	and.w	r2, r3, #31
 800351c:	4907      	ldr	r1, [pc, #28]	; (800353c <__NVIC_SetPendingIRQ+0x38>)
 800351e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	2001      	movs	r0, #1
 8003526:	fa00 f202 	lsl.w	r2, r0, r2
 800352a:	3340      	adds	r3, #64	; 0x40
 800352c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	e000e100 	.word	0xe000e100

08003540 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800354a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354e:	2b00      	cmp	r3, #0
 8003550:	db0c      	blt.n	800356c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003552:	79fb      	ldrb	r3, [r7, #7]
 8003554:	f003 021f 	and.w	r2, r3, #31
 8003558:	4907      	ldr	r1, [pc, #28]	; (8003578 <__NVIC_ClearPendingIRQ+0x38>)
 800355a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	2001      	movs	r0, #1
 8003562:	fa00 f202 	lsl.w	r2, r0, r2
 8003566:	3360      	adds	r3, #96	; 0x60
 8003568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	e000e100 	.word	0xe000e100

0800357c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	6039      	str	r1, [r7, #0]
 8003586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358c:	2b00      	cmp	r3, #0
 800358e:	db0a      	blt.n	80035a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	b2da      	uxtb	r2, r3
 8003594:	490c      	ldr	r1, [pc, #48]	; (80035c8 <__NVIC_SetPriority+0x4c>)
 8003596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359a:	0112      	lsls	r2, r2, #4
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	440b      	add	r3, r1
 80035a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035a4:	e00a      	b.n	80035bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	4908      	ldr	r1, [pc, #32]	; (80035cc <__NVIC_SetPriority+0x50>)
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	3b04      	subs	r3, #4
 80035b4:	0112      	lsls	r2, r2, #4
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	440b      	add	r3, r1
 80035ba:	761a      	strb	r2, [r3, #24]
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	e000e100 	.word	0xe000e100
 80035cc:	e000ed00 	.word	0xe000ed00

080035d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b089      	sub	sp, #36	; 0x24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f1c3 0307 	rsb	r3, r3, #7
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	bf28      	it	cs
 80035ee:	2304      	movcs	r3, #4
 80035f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	3304      	adds	r3, #4
 80035f6:	2b06      	cmp	r3, #6
 80035f8:	d902      	bls.n	8003600 <NVIC_EncodePriority+0x30>
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	3b03      	subs	r3, #3
 80035fe:	e000      	b.n	8003602 <NVIC_EncodePriority+0x32>
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003604:	f04f 32ff 	mov.w	r2, #4294967295
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43da      	mvns	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	401a      	ands	r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003618:	f04f 31ff 	mov.w	r1, #4294967295
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	fa01 f303 	lsl.w	r3, r1, r3
 8003622:	43d9      	mvns	r1, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003628:	4313      	orrs	r3, r2
         );
}
 800362a:	4618      	mov	r0, r3
 800362c:	3724      	adds	r7, #36	; 0x24
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
	...

08003638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3b01      	subs	r3, #1
 8003644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003648:	d301      	bcc.n	800364e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800364a:	2301      	movs	r3, #1
 800364c:	e00f      	b.n	800366e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800364e:	4a0a      	ldr	r2, [pc, #40]	; (8003678 <SysTick_Config+0x40>)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3b01      	subs	r3, #1
 8003654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003656:	210f      	movs	r1, #15
 8003658:	f04f 30ff 	mov.w	r0, #4294967295
 800365c:	f7ff ff8e 	bl	800357c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <SysTick_Config+0x40>)
 8003662:	2200      	movs	r2, #0
 8003664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003666:	4b04      	ldr	r3, [pc, #16]	; (8003678 <SysTick_Config+0x40>)
 8003668:	2207      	movs	r2, #7
 800366a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	e000e010 	.word	0xe000e010

0800367c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff fec9 	bl	800341c <__NVIC_SetPriorityGrouping>
}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b086      	sub	sp, #24
 8003696:	af00      	add	r7, sp, #0
 8003698:	4603      	mov	r3, r0
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036a0:	f7ff fee0 	bl	8003464 <__NVIC_GetPriorityGrouping>
 80036a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	68b9      	ldr	r1, [r7, #8]
 80036aa:	6978      	ldr	r0, [r7, #20]
 80036ac:	f7ff ff90 	bl	80035d0 <NVIC_EncodePriority>
 80036b0:	4602      	mov	r2, r0
 80036b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036b6:	4611      	mov	r1, r2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff ff5f 	bl	800357c <__NVIC_SetPriority>
}
 80036be:	bf00      	nop
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	4603      	mov	r3, r0
 80036ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff fed3 	bl	8003480 <__NVIC_EnableIRQ>
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	4603      	mov	r3, r0
 80036ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80036ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff fee3 	bl	80034bc <__NVIC_DisableIRQ>
}
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7ff ff96 	bl	8003638 <SysTick_Config>
 800370c:	4603      	mov	r3, r0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	4603      	mov	r3, r0
 800371e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff feed 	bl	8003504 <__NVIC_SetPendingIRQ>
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	4603      	mov	r3, r0
 800373a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800373c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff fefd 	bl	8003540 <__NVIC_ClearPendingIRQ>
}
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e08e      	b.n	8003880 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	4b47      	ldr	r3, [pc, #284]	; (8003888 <HAL_DMA_Init+0x138>)
 800376a:	429a      	cmp	r2, r3
 800376c:	d80f      	bhi.n	800378e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	461a      	mov	r2, r3
 8003774:	4b45      	ldr	r3, [pc, #276]	; (800388c <HAL_DMA_Init+0x13c>)
 8003776:	4413      	add	r3, r2
 8003778:	4a45      	ldr	r2, [pc, #276]	; (8003890 <HAL_DMA_Init+0x140>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	091b      	lsrs	r3, r3, #4
 8003780:	009a      	lsls	r2, r3, #2
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a42      	ldr	r2, [pc, #264]	; (8003894 <HAL_DMA_Init+0x144>)
 800378a:	641a      	str	r2, [r3, #64]	; 0x40
 800378c:	e00e      	b.n	80037ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	4b40      	ldr	r3, [pc, #256]	; (8003898 <HAL_DMA_Init+0x148>)
 8003796:	4413      	add	r3, r2
 8003798:	4a3d      	ldr	r2, [pc, #244]	; (8003890 <HAL_DMA_Init+0x140>)
 800379a:	fba2 2303 	umull	r2, r3, r2, r3
 800379e:	091b      	lsrs	r3, r3, #4
 80037a0:	009a      	lsls	r2, r3, #2
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a3c      	ldr	r2, [pc, #240]	; (800389c <HAL_DMA_Init+0x14c>)
 80037aa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80037c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80037d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fa74 	bl	8003cec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800380c:	d102      	bne.n	8003814 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800381c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003820:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800382a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d010      	beq.n	8003856 <HAL_DMA_Init+0x106>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b04      	cmp	r3, #4
 800383a:	d80c      	bhi.n	8003856 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 fa93 	bl	8003d68 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003852:	605a      	str	r2, [r3, #4]
 8003854:	e008      	b.n	8003868 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40020407 	.word	0x40020407
 800388c:	bffdfff8 	.word	0xbffdfff8
 8003890:	cccccccd 	.word	0xcccccccd
 8003894:	40020000 	.word	0x40020000
 8003898:	bffdfbf8 	.word	0xbffdfbf8
 800389c:	40020400 	.word	0x40020400

080038a0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_DMA_Start_IT+0x20>
 80038bc:	2302      	movs	r3, #2
 80038be:	e066      	b.n	800398e <HAL_DMA_Start_IT+0xee>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d155      	bne.n	8003980 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0201 	bic.w	r2, r2, #1
 80038f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	68b9      	ldr	r1, [r7, #8]
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 f9b9 	bl	8003c70 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	2b00      	cmp	r3, #0
 8003904:	d008      	beq.n	8003918 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 020e 	orr.w	r2, r2, #14
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	e00f      	b.n	8003938 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0204 	bic.w	r2, r2, #4
 8003926:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 020a 	orr.w	r2, r2, #10
 8003936:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d007      	beq.n	8003956 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003950:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003954:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395a:	2b00      	cmp	r3, #0
 800395c:	d007      	beq.n	800396e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003968:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800396c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f042 0201 	orr.w	r2, r2, #1
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	e005      	b.n	800398c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003988:	2302      	movs	r3, #2
 800398a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800398c:	7dfb      	ldrb	r3, [r7, #23]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e04f      	b.n	8003a48 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d008      	beq.n	80039c6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2204      	movs	r2, #4
 80039b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e040      	b.n	8003a48 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 020e 	bic.w	r2, r2, #14
 80039d4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0201 	bic.w	r2, r2, #1
 80039f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fa:	f003 021c 	and.w	r2, r3, #28
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	2101      	movs	r1, #1
 8003a04:	fa01 f202 	lsl.w	r2, r1, r2
 8003a08:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a12:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00c      	beq.n	8003a36 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a2a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a34:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d005      	beq.n	8003a78 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2204      	movs	r2, #4
 8003a70:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
 8003a76:	e047      	b.n	8003b08 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 020e 	bic.w	r2, r2, #14
 8003a86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0201 	bic.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aa6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aac:	f003 021c 	and.w	r2, r3, #28
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ac4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00c      	beq.n	8003ae8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003adc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ae6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	4798      	blx	r3
    }
  }
  return status;
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2e:	f003 031c 	and.w	r3, r3, #28
 8003b32:	2204      	movs	r2, #4
 8003b34:	409a      	lsls	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d026      	beq.n	8003b8c <HAL_DMA_IRQHandler+0x7a>
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d021      	beq.n	8003b8c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d107      	bne.n	8003b66 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0204 	bic.w	r2, r2, #4
 8003b64:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	f003 021c 	and.w	r2, r3, #28
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	2104      	movs	r1, #4
 8003b74:	fa01 f202 	lsl.w	r2, r1, r2
 8003b78:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d071      	beq.n	8003c66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b8a:	e06c      	b.n	8003c66 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b90:	f003 031c 	and.w	r3, r3, #28
 8003b94:	2202      	movs	r2, #2
 8003b96:	409a      	lsls	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d02e      	beq.n	8003bfe <HAL_DMA_IRQHandler+0xec>
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d029      	beq.n	8003bfe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0320 	and.w	r3, r3, #32
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10b      	bne.n	8003bd0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 020a 	bic.w	r2, r2, #10
 8003bc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd4:	f003 021c 	and.w	r2, r3, #28
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	2102      	movs	r1, #2
 8003bde:	fa01 f202 	lsl.w	r2, r1, r2
 8003be2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d038      	beq.n	8003c66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003bfc:	e033      	b.n	8003c66 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c02:	f003 031c 	and.w	r3, r3, #28
 8003c06:	2208      	movs	r2, #8
 8003c08:	409a      	lsls	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d02a      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x156>
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d025      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 020e 	bic.w	r2, r2, #14
 8003c2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c30:	f003 021c 	and.w	r2, r3, #28
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	2101      	movs	r1, #1
 8003c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d004      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c66:	bf00      	nop
 8003c68:	bf00      	nop
}
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c86:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d004      	beq.n	8003c9a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c98:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	f003 021c 	and.w	r2, r3, #28
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b10      	cmp	r3, #16
 8003cbc:	d108      	bne.n	8003cd0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003cce:	e007      	b.n	8003ce0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	60da      	str	r2, [r3, #12]
}
 8003ce0:	bf00      	nop
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4b17      	ldr	r3, [pc, #92]	; (8003d58 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d80a      	bhi.n	8003d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d04:	089b      	lsrs	r3, r3, #2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d0c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6493      	str	r3, [r2, #72]	; 0x48
 8003d14:	e007      	b.n	8003d26 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1a:	089b      	lsrs	r3, r3, #2
 8003d1c:	009a      	lsls	r2, r3, #2
 8003d1e:	4b0f      	ldr	r3, [pc, #60]	; (8003d5c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003d20:	4413      	add	r3, r2
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	3b08      	subs	r3, #8
 8003d2e:	4a0c      	ldr	r2, [pc, #48]	; (8003d60 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003d30:	fba2 2303 	umull	r2, r3, r2, r3
 8003d34:	091b      	lsrs	r3, r3, #4
 8003d36:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a0a      	ldr	r2, [pc, #40]	; (8003d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003d3c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f003 031f 	and.w	r3, r3, #31
 8003d44:	2201      	movs	r2, #1
 8003d46:	409a      	lsls	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d4c:	bf00      	nop
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	40020407 	.word	0x40020407
 8003d5c:	4002081c 	.word	0x4002081c
 8003d60:	cccccccd 	.word	0xcccccccd
 8003d64:	40020880 	.word	0x40020880

08003d68 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d78:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d7e:	4413      	add	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	461a      	mov	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a09      	ldr	r2, [pc, #36]	; (8003db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003d8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	3b01      	subs	r3, #1
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	2201      	movs	r2, #1
 8003d98:	409a      	lsls	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003d9e:	bf00      	nop
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	1000823f 	.word	0x1000823f
 8003db0:	40020940 	.word	0x40020940

08003db4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dc2:	e14c      	b.n	800405e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	2101      	movs	r1, #1
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 813e 	beq.w	8004058 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f003 0303 	and.w	r3, r3, #3
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d005      	beq.n	8003df4 <HAL_GPIO_Init+0x40>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f003 0303 	and.w	r3, r3, #3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d130      	bne.n	8003e56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	2203      	movs	r2, #3
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	43db      	mvns	r3, r3
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	43db      	mvns	r3, r3
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	4013      	ands	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	091b      	lsrs	r3, r3, #4
 8003e40:	f003 0201 	and.w	r2, r3, #1
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d017      	beq.n	8003e92 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	2203      	movs	r2, #3
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	43db      	mvns	r3, r3
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4013      	ands	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d123      	bne.n	8003ee6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	08da      	lsrs	r2, r3, #3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3208      	adds	r2, #8
 8003ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	220f      	movs	r2, #15
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	43db      	mvns	r3, r3
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	08da      	lsrs	r2, r3, #3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3208      	adds	r2, #8
 8003ee0:	6939      	ldr	r1, [r7, #16]
 8003ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4013      	ands	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f003 0203 	and.w	r2, r3, #3
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 8098 	beq.w	8004058 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003f28:	4a54      	ldr	r2, [pc, #336]	; (800407c <HAL_GPIO_Init+0x2c8>)
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	089b      	lsrs	r3, r3, #2
 8003f2e:	3302      	adds	r3, #2
 8003f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	220f      	movs	r2, #15
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f52:	d019      	beq.n	8003f88 <HAL_GPIO_Init+0x1d4>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a4a      	ldr	r2, [pc, #296]	; (8004080 <HAL_GPIO_Init+0x2cc>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d013      	beq.n	8003f84 <HAL_GPIO_Init+0x1d0>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a49      	ldr	r2, [pc, #292]	; (8004084 <HAL_GPIO_Init+0x2d0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00d      	beq.n	8003f80 <HAL_GPIO_Init+0x1cc>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a48      	ldr	r2, [pc, #288]	; (8004088 <HAL_GPIO_Init+0x2d4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d007      	beq.n	8003f7c <HAL_GPIO_Init+0x1c8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a47      	ldr	r2, [pc, #284]	; (800408c <HAL_GPIO_Init+0x2d8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d101      	bne.n	8003f78 <HAL_GPIO_Init+0x1c4>
 8003f74:	2304      	movs	r3, #4
 8003f76:	e008      	b.n	8003f8a <HAL_GPIO_Init+0x1d6>
 8003f78:	2307      	movs	r3, #7
 8003f7a:	e006      	b.n	8003f8a <HAL_GPIO_Init+0x1d6>
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e004      	b.n	8003f8a <HAL_GPIO_Init+0x1d6>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e002      	b.n	8003f8a <HAL_GPIO_Init+0x1d6>
 8003f84:	2301      	movs	r3, #1
 8003f86:	e000      	b.n	8003f8a <HAL_GPIO_Init+0x1d6>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	f002 0203 	and.w	r2, r2, #3
 8003f90:	0092      	lsls	r2, r2, #2
 8003f92:	4093      	lsls	r3, r2
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f9a:	4938      	ldr	r1, [pc, #224]	; (800407c <HAL_GPIO_Init+0x2c8>)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	089b      	lsrs	r3, r3, #2
 8003fa0:	3302      	adds	r3, #2
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fa8:	4b39      	ldr	r3, [pc, #228]	; (8004090 <HAL_GPIO_Init+0x2dc>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fcc:	4a30      	ldr	r2, [pc, #192]	; (8004090 <HAL_GPIO_Init+0x2dc>)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003fd2:	4b2f      	ldr	r3, [pc, #188]	; (8004090 <HAL_GPIO_Init+0x2dc>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ff6:	4a26      	ldr	r2, [pc, #152]	; (8004090 <HAL_GPIO_Init+0x2dc>)
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003ffc:	4b24      	ldr	r3, [pc, #144]	; (8004090 <HAL_GPIO_Init+0x2dc>)
 8003ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	43db      	mvns	r3, r3
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	4013      	ands	r3, r2
 800400c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004022:	4a1b      	ldr	r2, [pc, #108]	; (8004090 <HAL_GPIO_Init+0x2dc>)
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800402a:	4b19      	ldr	r3, [pc, #100]	; (8004090 <HAL_GPIO_Init+0x2dc>)
 800402c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	43db      	mvns	r3, r3
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	4013      	ands	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4313      	orrs	r3, r2
 800404e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004050:	4a0f      	ldr	r2, [pc, #60]	; (8004090 <HAL_GPIO_Init+0x2dc>)
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	3301      	adds	r3, #1
 800405c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	fa22 f303 	lsr.w	r3, r2, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	f47f aeab 	bne.w	8003dc4 <HAL_GPIO_Init+0x10>
  }
}
 800406e:	bf00      	nop
 8004070:	bf00      	nop
 8004072:	371c      	adds	r7, #28
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	40010000 	.word	0x40010000
 8004080:	48000400 	.word	0x48000400
 8004084:	48000800 	.word	0x48000800
 8004088:	48000c00 	.word	0x48000c00
 800408c:	48001000 	.word	0x48001000
 8004090:	58000800 	.word	0x58000800

08004094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	807b      	strh	r3, [r7, #2]
 80040a0:	4613      	mov	r3, r2
 80040a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040a4:	787b      	ldrb	r3, [r7, #1]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040aa:	887a      	ldrh	r2, [r7, #2]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040b0:	e002      	b.n	80040b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040b2:	887a      	ldrh	r2, [r7, #2]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	4603      	mov	r3, r0
 80040cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80040ce:	4b08      	ldr	r3, [pc, #32]	; (80040f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	88fb      	ldrh	r3, [r7, #6]
 80040d4:	4013      	ands	r3, r2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d006      	beq.n	80040e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040da:	4a05      	ldr	r2, [pc, #20]	; (80040f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040dc:	88fb      	ldrh	r3, [r7, #6]
 80040de:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040e0:	88fb      	ldrh	r3, [r7, #6]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fd fa9c 	bl	8001620 <HAL_GPIO_EXTI_Callback>
  }
}
 80040e8:	bf00      	nop
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	58000800 	.word	0x58000800

080040f4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80040fa:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <HAL_HSEM_IRQHandler+0x30>)
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004100:	4b08      	ldr	r3, [pc, #32]	; (8004124 <HAL_HSEM_IRQHandler+0x30>)
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	43db      	mvns	r3, r3
 8004108:	4906      	ldr	r1, [pc, #24]	; (8004124 <HAL_HSEM_IRQHandler+0x30>)
 800410a:	4013      	ands	r3, r2
 800410c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800410e:	4a05      	ldr	r2, [pc, #20]	; (8004124 <HAL_HSEM_IRQHandler+0x30>)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f807 	bl	8004128 <HAL_HSEM_FreeCallback>
}
 800411a:	bf00      	nop
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	58001500 	.word	0x58001500

08004128 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a04      	ldr	r2, [pc, #16]	; (8004158 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800414a:	6013      	str	r3, [r2, #0]
}
 800414c:	bf00      	nop
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	58000400 	.word	0x58000400

0800415c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004160:	4b04      	ldr	r3, [pc, #16]	; (8004174 <HAL_PWREx_GetVoltageRange+0x18>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004168:	4618      	mov	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	58000400 	.word	0x58000400

08004178 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800417c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800418a:	d101      	bne.n	8004190 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800418c:	2301      	movs	r3, #1
 800418e:	e000      	b.n	8004192 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <LL_RCC_HSE_Enable>:
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80041a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ae:	6013      	str	r3, [r2, #0]
}
 80041b0:	bf00      	nop
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <LL_RCC_HSE_Disable>:
{
 80041ba:	b480      	push	{r7}
 80041bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80041be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041cc:	6013      	str	r3, [r2, #0]
}
 80041ce:	bf00      	nop
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <LL_RCC_HSE_IsReady>:
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80041dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041ea:	d101      	bne.n	80041f0 <LL_RCC_HSE_IsReady+0x18>
 80041ec:	2301      	movs	r3, #1
 80041ee:	e000      	b.n	80041f2 <LL_RCC_HSE_IsReady+0x1a>
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <LL_RCC_HSI_Enable>:
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800420a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800420e:	6013      	str	r3, [r2, #0]
}
 8004210:	bf00      	nop
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <LL_RCC_HSI_Disable>:
{
 800421a:	b480      	push	{r7}
 800421c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800421e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800422c:	6013      	str	r3, [r2, #0]
}
 800422e:	bf00      	nop
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <LL_RCC_HSI_IsReady>:
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800423c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800424a:	d101      	bne.n	8004250 <LL_RCC_HSI_IsReady+0x18>
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <LL_RCC_HSI_IsReady+0x1a>
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <LL_RCC_HSI_SetCalibTrimming>:
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	061b      	lsls	r3, r3, #24
 8004272:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004276:	4313      	orrs	r3, r2
 8004278:	604b      	str	r3, [r1, #4]
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <LL_RCC_HSI48_Enable>:
{
 8004286:	b480      	push	{r7}
 8004288:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800428a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800428e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004292:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800429e:	bf00      	nop
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <LL_RCC_HSI48_Disable>:
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80042ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042b8:	f023 0301 	bic.w	r3, r3, #1
 80042bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80042c0:	bf00      	nop
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <LL_RCC_HSI48_IsReady>:
{
 80042ca:	b480      	push	{r7}
 80042cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80042ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d101      	bne.n	80042e2 <LL_RCC_HSI48_IsReady+0x18>
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <LL_RCC_HSI48_IsReady+0x1a>
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <LL_RCC_LSE_Enable>:
{
 80042ee:	b480      	push	{r7}
 80042f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80042f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042fe:	f043 0301 	orr.w	r3, r3, #1
 8004302:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004306:	bf00      	nop
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <LL_RCC_LSE_Disable>:
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004320:	f023 0301 	bic.w	r3, r3, #1
 8004324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004328:	bf00      	nop
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <LL_RCC_LSE_EnableBypass>:
{
 8004332:	b480      	push	{r7}
 8004334:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800433a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004342:	f043 0304 	orr.w	r3, r3, #4
 8004346:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800434a:	bf00      	nop
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <LL_RCC_LSE_DisableBypass>:
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800435c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004360:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004364:	f023 0304 	bic.w	r3, r3, #4
 8004368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800436c:	bf00      	nop
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <LL_RCC_LSE_IsReady>:
{
 8004376:	b480      	push	{r7}
 8004378:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800437a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800437e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b02      	cmp	r3, #2
 8004388:	d101      	bne.n	800438e <LL_RCC_LSE_IsReady+0x18>
 800438a:	2301      	movs	r3, #1
 800438c:	e000      	b.n	8004390 <LL_RCC_LSE_IsReady+0x1a>
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <LL_RCC_LSI1_Enable>:
{
 800439a:	b480      	push	{r7}
 800439c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800439e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043aa:	f043 0301 	orr.w	r3, r3, #1
 80043ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80043b2:	bf00      	nop
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <LL_RCC_LSI1_Disable>:
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80043c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043cc:	f023 0301 	bic.w	r3, r3, #1
 80043d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80043d4:	bf00      	nop
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <LL_RCC_LSI1_IsReady>:
{
 80043de:	b480      	push	{r7}
 80043e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80043e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d101      	bne.n	80043f6 <LL_RCC_LSI1_IsReady+0x18>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <LL_RCC_LSI1_IsReady+0x1a>
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <LL_RCC_LSI2_Enable>:
{
 8004402:	b480      	push	{r7}
 8004404:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800440a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800440e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004412:	f043 0304 	orr.w	r3, r3, #4
 8004416:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800441a:	bf00      	nop
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <LL_RCC_LSI2_Disable>:
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800442c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004430:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004434:	f023 0304 	bic.w	r3, r3, #4
 8004438:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800443c:	bf00      	nop
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <LL_RCC_LSI2_IsReady>:
{
 8004446:	b480      	push	{r7}
 8004448:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800444a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800444e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b08      	cmp	r3, #8
 8004458:	d101      	bne.n	800445e <LL_RCC_LSI2_IsReady+0x18>
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <LL_RCC_LSI2_IsReady+0x1a>
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <LL_RCC_LSI2_SetTrimming>:
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800447a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	021b      	lsls	r3, r3, #8
 8004482:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <LL_RCC_MSI_Enable>:
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800449c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	6013      	str	r3, [r2, #0]
}
 80044ac:	bf00      	nop
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <LL_RCC_MSI_Disable>:
{
 80044b6:	b480      	push	{r7}
 80044b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80044ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044c4:	f023 0301 	bic.w	r3, r3, #1
 80044c8:	6013      	str	r3, [r2, #0]
}
 80044ca:	bf00      	nop
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <LL_RCC_MSI_IsReady>:
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80044d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d101      	bne.n	80044ea <LL_RCC_MSI_IsReady+0x16>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <LL_RCC_MSI_IsReady+0x18>
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <LL_RCC_MSI_SetRange>:
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80044fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004508:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4313      	orrs	r3, r2
 8004510:	600b      	str	r3, [r1, #0]
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <LL_RCC_MSI_GetRange>:
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800452e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2bb0      	cmp	r3, #176	; 0xb0
 8004534:	d901      	bls.n	800453a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004536:	23b0      	movs	r3, #176	; 0xb0
 8004538:	607b      	str	r3, [r7, #4]
  return msiRange;
 800453a:	687b      	ldr	r3, [r7, #4]
}
 800453c:	4618      	mov	r0, r3
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	021b      	lsls	r3, r3, #8
 800455e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004562:	4313      	orrs	r3, r2
 8004564:	604b      	str	r3, [r1, #4]
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <LL_RCC_SetSysClkSource>:
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800457a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f023 0203 	bic.w	r2, r3, #3
 8004584:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4313      	orrs	r3, r2
 800458c:	608b      	str	r3, [r1, #8]
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <LL_RCC_GetSysClkSource>:
{
 800459a:	b480      	push	{r7}
 800459c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800459e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 030c 	and.w	r3, r3, #12
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <LL_RCC_SetAHBPrescaler>:
{
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80045ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	608b      	str	r3, [r1, #8]
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <LL_C2_RCC_SetAHBPrescaler>:
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80045e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80045ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <LL_RCC_SetAHB4Prescaler>:
{
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800460e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004612:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004616:	f023 020f 	bic.w	r2, r3, #15
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	091b      	lsrs	r3, r3, #4
 800461e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <LL_RCC_SetAPB1Prescaler>:
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800463c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004646:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4313      	orrs	r3, r2
 800464e:	608b      	str	r3, [r1, #8]
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <LL_RCC_SetAPB2Prescaler>:
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800466e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4313      	orrs	r3, r2
 8004676:	608b      	str	r3, [r1, #8]
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <LL_RCC_GetAHBPrescaler>:
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004692:	4618      	mov	r0, r3
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <LL_RCC_GetAHB4Prescaler>:
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80046a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <LL_RCC_GetAPB1Prescaler>:
{
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80046bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <LL_RCC_GetAPB2Prescaler>:
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80046d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80046de:	4618      	mov	r0, r3
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <LL_RCC_PLL_Enable>:
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80046ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046fa:	6013      	str	r3, [r2, #0]
}
 80046fc:	bf00      	nop
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <LL_RCC_PLL_Disable>:
{
 8004706:	b480      	push	{r7}
 8004708:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800470a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004714:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004718:	6013      	str	r3, [r2, #0]
}
 800471a:	bf00      	nop
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <LL_RCC_PLL_IsReady>:
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004732:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004736:	d101      	bne.n	800473c <LL_RCC_PLL_IsReady+0x18>
 8004738:	2301      	movs	r3, #1
 800473a:	e000      	b.n	800473e <LL_RCC_PLL_IsReady+0x1a>
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <LL_RCC_PLL_GetN>:
{
 8004748:	b480      	push	{r7}
 800474a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800474c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	0a1b      	lsrs	r3, r3, #8
 8004754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004758:	4618      	mov	r0, r3
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <LL_RCC_PLL_GetR>:
{
 8004762:	b480      	push	{r7}
 8004764:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004770:	4618      	mov	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <LL_RCC_PLL_GetDivider>:
{
 800477a:	b480      	push	{r7}
 800477c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800477e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004788:	4618      	mov	r0, r3
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <LL_RCC_PLL_GetMainSource>:
{
 8004792:	b480      	push	{r7}
 8004794:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f003 0303 	and.w	r3, r3, #3
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <LL_RCC_IsActiveFlag_HPRE>:
{
 80047aa:	b480      	push	{r7}
 80047ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80047ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047bc:	d101      	bne.n	80047c2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80047be:	2301      	movs	r3, #1
 80047c0:	e000      	b.n	80047c4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80047ce:	b480      	push	{r7}
 80047d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80047d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80047da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047e2:	d101      	bne.n	80047e8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80047e4:	2301      	movs	r3, #1
 80047e6:	e000      	b.n	80047ea <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80047f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004808:	d101      	bne.n	800480e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800480a:	2301      	movs	r3, #1
 800480c:	e000      	b.n	8004810 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <LL_RCC_IsActiveFlag_PPRE1>:
{
 800481a:	b480      	push	{r7}
 800481c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800481e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004828:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800482c:	d101      	bne.n	8004832 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800482e:	2301      	movs	r3, #1
 8004830:	e000      	b.n	8004834 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <LL_RCC_IsActiveFlag_PPRE2>:
{
 800483e:	b480      	push	{r7}
 8004840:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800484c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004850:	d101      	bne.n	8004856 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004852:	2301      	movs	r3, #1
 8004854:	e000      	b.n	8004858 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
	...

08004864 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004864:	b590      	push	{r4, r7, lr}
 8004866:	b08d      	sub	sp, #52	; 0x34
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e363      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0320 	and.w	r3, r3, #32
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 808d 	beq.w	800499e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004884:	f7ff fe89 	bl	800459a <LL_RCC_GetSysClkSource>
 8004888:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800488a:	f7ff ff82 	bl	8004792 <LL_RCC_PLL_GetMainSource>
 800488e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004892:	2b00      	cmp	r3, #0
 8004894:	d005      	beq.n	80048a2 <HAL_RCC_OscConfig+0x3e>
 8004896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004898:	2b0c      	cmp	r3, #12
 800489a:	d147      	bne.n	800492c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800489c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d144      	bne.n	800492c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e347      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80048b2:	f7ff fe34 	bl	800451e <LL_RCC_MSI_GetRange>
 80048b6:	4603      	mov	r3, r0
 80048b8:	429c      	cmp	r4, r3
 80048ba:	d914      	bls.n	80048e6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 fd2f 	bl	8005324 <RCC_SetFlashLatencyFromMSIRange>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e336      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff fe0e 	bl	80044f6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7ff fe32 	bl	8004548 <LL_RCC_MSI_SetCalibTrimming>
 80048e4:	e013      	b.n	800490e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff fe03 	bl	80044f6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff fe27 	bl	8004548 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 fd10 	bl	8005324 <RCC_SetFlashLatencyFromMSIRange>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e317      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800490e:	f000 fcc9 	bl	80052a4 <HAL_RCC_GetHCLKFreq>
 8004912:	4603      	mov	r3, r0
 8004914:	4aa4      	ldr	r2, [pc, #656]	; (8004ba8 <HAL_RCC_OscConfig+0x344>)
 8004916:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004918:	4ba4      	ldr	r3, [pc, #656]	; (8004bac <HAL_RCC_OscConfig+0x348>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f7fe fd0b 	bl	8003338 <HAL_InitTick>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d039      	beq.n	800499c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e308      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d01e      	beq.n	8004972 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004934:	f7ff fdb0 	bl	8004498 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004938:	f7fe fd4c 	bl	80033d4 <HAL_GetTick>
 800493c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004940:	f7fe fd48 	bl	80033d4 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e2f5      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004952:	f7ff fdbf 	bl	80044d4 <LL_RCC_MSI_IsReady>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0f1      	beq.n	8004940 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff fdc8 	bl	80044f6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff fdec 	bl	8004548 <LL_RCC_MSI_SetCalibTrimming>
 8004970:	e015      	b.n	800499e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004972:	f7ff fda0 	bl	80044b6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004976:	f7fe fd2d 	bl	80033d4 <HAL_GetTick>
 800497a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800497e:	f7fe fd29 	bl	80033d4 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e2d6      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004990:	f7ff fda0 	bl	80044d4 <LL_RCC_MSI_IsReady>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f1      	bne.n	800497e <HAL_RCC_OscConfig+0x11a>
 800499a:	e000      	b.n	800499e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800499c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d047      	beq.n	8004a3a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049aa:	f7ff fdf6 	bl	800459a <LL_RCC_GetSysClkSource>
 80049ae:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049b0:	f7ff feef 	bl	8004792 <LL_RCC_PLL_GetMainSource>
 80049b4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d005      	beq.n	80049c8 <HAL_RCC_OscConfig+0x164>
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	2b0c      	cmp	r3, #12
 80049c0:	d108      	bne.n	80049d4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	2b03      	cmp	r3, #3
 80049c6:	d105      	bne.n	80049d4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d134      	bne.n	8004a3a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e2b4      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049dc:	d102      	bne.n	80049e4 <HAL_RCC_OscConfig+0x180>
 80049de:	f7ff fbdd 	bl	800419c <LL_RCC_HSE_Enable>
 80049e2:	e001      	b.n	80049e8 <HAL_RCC_OscConfig+0x184>
 80049e4:	f7ff fbe9 	bl	80041ba <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d012      	beq.n	8004a16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f0:	f7fe fcf0 	bl	80033d4 <HAL_GetTick>
 80049f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f8:	f7fe fcec 	bl	80033d4 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b64      	cmp	r3, #100	; 0x64
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e299      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004a0a:	f7ff fbe5 	bl	80041d8 <LL_RCC_HSE_IsReady>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0f1      	beq.n	80049f8 <HAL_RCC_OscConfig+0x194>
 8004a14:	e011      	b.n	8004a3a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a16:	f7fe fcdd 	bl	80033d4 <HAL_GetTick>
 8004a1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a1e:	f7fe fcd9 	bl	80033d4 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b64      	cmp	r3, #100	; 0x64
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e286      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004a30:	f7ff fbd2 	bl	80041d8 <LL_RCC_HSE_IsReady>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f1      	bne.n	8004a1e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d04c      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a46:	f7ff fda8 	bl	800459a <LL_RCC_GetSysClkSource>
 8004a4a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a4c:	f7ff fea1 	bl	8004792 <LL_RCC_PLL_GetMainSource>
 8004a50:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	d005      	beq.n	8004a64 <HAL_RCC_OscConfig+0x200>
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	2b0c      	cmp	r3, #12
 8004a5c:	d10e      	bne.n	8004a7c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d10b      	bne.n	8004a7c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e266      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7ff fbf1 	bl	800425c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004a7a:	e031      	b.n	8004ae0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d019      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a84:	f7ff fbba 	bl	80041fc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a88:	f7fe fca4 	bl	80033d4 <HAL_GetTick>
 8004a8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a90:	f7fe fca0 	bl	80033d4 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e24d      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004aa2:	f7ff fbc9 	bl	8004238 <LL_RCC_HSI_IsReady>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0f1      	beq.n	8004a90 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff fbd3 	bl	800425c <LL_RCC_HSI_SetCalibTrimming>
 8004ab6:	e013      	b.n	8004ae0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ab8:	f7ff fbaf 	bl	800421a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abc:	f7fe fc8a 	bl	80033d4 <HAL_GetTick>
 8004ac0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ac4:	f7fe fc86 	bl	80033d4 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e233      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004ad6:	f7ff fbaf 	bl	8004238 <LL_RCC_HSI_IsReady>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1f1      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d106      	bne.n	8004afa <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 80a3 	beq.w	8004c40 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d076      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0310 	and.w	r3, r3, #16
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d046      	beq.n	8004b9c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004b0e:	f7ff fc66 	bl	80043de <LL_RCC_LSI1_IsReady>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d113      	bne.n	8004b40 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004b18:	f7ff fc3f 	bl	800439a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b1c:	f7fe fc5a 	bl	80033d4 <HAL_GetTick>
 8004b20:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004b24:	f7fe fc56 	bl	80033d4 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e203      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004b36:	f7ff fc52 	bl	80043de <LL_RCC_LSI1_IsReady>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d0f1      	beq.n	8004b24 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004b40:	f7ff fc5f 	bl	8004402 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b44:	f7fe fc46 	bl	80033d4 <HAL_GetTick>
 8004b48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004b4c:	f7fe fc42 	bl	80033d4 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e1ef      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004b5e:	f7ff fc72 	bl	8004446 <LL_RCC_LSI2_IsReady>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0f1      	beq.n	8004b4c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7ff fc7c 	bl	800446a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004b72:	f7ff fc23 	bl	80043bc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b76:	f7fe fc2d 	bl	80033d4 <HAL_GetTick>
 8004b7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004b7e:	f7fe fc29 	bl	80033d4 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e1d6      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004b90:	f7ff fc25 	bl	80043de <LL_RCC_LSI1_IsReady>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1f1      	bne.n	8004b7e <HAL_RCC_OscConfig+0x31a>
 8004b9a:	e051      	b.n	8004c40 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004b9c:	f7ff fbfd 	bl	800439a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba0:	f7fe fc18 	bl	80033d4 <HAL_GetTick>
 8004ba4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004ba6:	e00c      	b.n	8004bc2 <HAL_RCC_OscConfig+0x35e>
 8004ba8:	20000004 	.word	0x20000004
 8004bac:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004bb0:	f7fe fc10 	bl	80033d4 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e1bd      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004bc2:	f7ff fc0c 	bl	80043de <LL_RCC_LSI1_IsReady>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0f1      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004bcc:	f7ff fc2a 	bl	8004424 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004bd2:	f7fe fbff 	bl	80033d4 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b03      	cmp	r3, #3
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e1ac      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004be4:	f7ff fc2f 	bl	8004446 <LL_RCC_LSI2_IsReady>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f1      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x36e>
 8004bee:	e027      	b.n	8004c40 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004bf0:	f7ff fc18 	bl	8004424 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf4:	f7fe fbee 	bl	80033d4 <HAL_GetTick>
 8004bf8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004bfc:	f7fe fbea 	bl	80033d4 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b03      	cmp	r3, #3
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e197      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004c0e:	f7ff fc1a 	bl	8004446 <LL_RCC_LSI2_IsReady>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1f1      	bne.n	8004bfc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004c18:	f7ff fbd0 	bl	80043bc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1c:	f7fe fbda 	bl	80033d4 <HAL_GetTick>
 8004c20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004c24:	f7fe fbd6 	bl	80033d4 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e183      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004c36:	f7ff fbd2 	bl	80043de <LL_RCC_LSI1_IsReady>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1f1      	bne.n	8004c24 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d05b      	beq.n	8004d04 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c4c:	4ba7      	ldr	r3, [pc, #668]	; (8004eec <HAL_RCC_OscConfig+0x688>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d114      	bne.n	8004c82 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004c58:	f7ff fa70 	bl	800413c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c5c:	f7fe fbba 	bl	80033d4 <HAL_GetTick>
 8004c60:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c64:	f7fe fbb6 	bl	80033d4 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e163      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c76:	4b9d      	ldr	r3, [pc, #628]	; (8004eec <HAL_RCC_OscConfig+0x688>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0f0      	beq.n	8004c64 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d102      	bne.n	8004c90 <HAL_RCC_OscConfig+0x42c>
 8004c8a:	f7ff fb30 	bl	80042ee <LL_RCC_LSE_Enable>
 8004c8e:	e00c      	b.n	8004caa <HAL_RCC_OscConfig+0x446>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	2b05      	cmp	r3, #5
 8004c96:	d104      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x43e>
 8004c98:	f7ff fb4b 	bl	8004332 <LL_RCC_LSE_EnableBypass>
 8004c9c:	f7ff fb27 	bl	80042ee <LL_RCC_LSE_Enable>
 8004ca0:	e003      	b.n	8004caa <HAL_RCC_OscConfig+0x446>
 8004ca2:	f7ff fb35 	bl	8004310 <LL_RCC_LSE_Disable>
 8004ca6:	f7ff fb55 	bl	8004354 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d014      	beq.n	8004cdc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb2:	f7fe fb8f 	bl	80033d4 <HAL_GetTick>
 8004cb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004cb8:	e00a      	b.n	8004cd0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cba:	f7fe fb8b 	bl	80033d4 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e136      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004cd0:	f7ff fb51 	bl	8004376 <LL_RCC_LSE_IsReady>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0ef      	beq.n	8004cba <HAL_RCC_OscConfig+0x456>
 8004cda:	e013      	b.n	8004d04 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cdc:	f7fe fb7a 	bl	80033d4 <HAL_GetTick>
 8004ce0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004ce2:	e00a      	b.n	8004cfa <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce4:	f7fe fb76 	bl	80033d4 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e121      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004cfa:	f7ff fb3c 	bl	8004376 <LL_RCC_LSE_IsReady>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1ef      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d02c      	beq.n	8004d6a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d014      	beq.n	8004d42 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d18:	f7ff fab5 	bl	8004286 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d1c:	f7fe fb5a 	bl	80033d4 <HAL_GetTick>
 8004d20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d24:	f7fe fb56 	bl	80033d4 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e103      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004d36:	f7ff fac8 	bl	80042ca <LL_RCC_HSI48_IsReady>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0f1      	beq.n	8004d24 <HAL_RCC_OscConfig+0x4c0>
 8004d40:	e013      	b.n	8004d6a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d42:	f7ff fab1 	bl	80042a8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d46:	f7fe fb45 	bl	80033d4 <HAL_GetTick>
 8004d4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d4e:	f7fe fb41 	bl	80033d4 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e0ee      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004d60:	f7ff fab3 	bl	80042ca <LL_RCC_HSI48_IsReady>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1f1      	bne.n	8004d4e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 80e4 	beq.w	8004f3c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d74:	f7ff fc11 	bl	800459a <LL_RCC_GetSysClkSource>
 8004d78:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	f040 80b4 	bne.w	8004ef4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f003 0203 	and.w	r2, r3, #3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d123      	bne.n	8004de2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d11c      	bne.n	8004de2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	0a1b      	lsrs	r3, r3, #8
 8004dac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d114      	bne.n	8004de2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d10d      	bne.n	8004de2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d106      	bne.n	8004de2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d05d      	beq.n	8004e9e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	2b0c      	cmp	r3, #12
 8004de6:	d058      	beq.n	8004e9a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e0a1      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004dfa:	f7ff fc84 	bl	8004706 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dfe:	f7fe fae9 	bl	80033d4 <HAL_GetTick>
 8004e02:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e06:	f7fe fae5 	bl	80033d4 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e092      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1ef      	bne.n	8004e06 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	4b30      	ldr	r3, [pc, #192]	; (8004ef0 <HAL_RCC_OscConfig+0x68c>)
 8004e2e:	4013      	ands	r3, r2
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e38:	4311      	orrs	r1, r2
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e3e:	0212      	lsls	r2, r2, #8
 8004e40:	4311      	orrs	r1, r2
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e46:	4311      	orrs	r1, r2
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e4c:	4311      	orrs	r1, r2
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004e52:	430a      	orrs	r2, r1
 8004e54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e5c:	f7ff fc44 	bl	80046e8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e70:	f7fe fab0 	bl	80033d4 <HAL_GetTick>
 8004e74:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e78:	f7fe faac 	bl	80033d4 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e059      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0ef      	beq.n	8004e78 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e98:	e050      	b.n	8004f3c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e04f      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d147      	bne.n	8004f3c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004eac:	f7ff fc1c 	bl	80046e8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ebe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ec0:	f7fe fa88 	bl	80033d4 <HAL_GetTick>
 8004ec4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec8:	f7fe fa84 	bl	80033d4 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e031      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0ef      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x664>
 8004ee8:	e028      	b.n	8004f3c <HAL_RCC_OscConfig+0x6d8>
 8004eea:	bf00      	nop
 8004eec:	58000400 	.word	0x58000400
 8004ef0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	2b0c      	cmp	r3, #12
 8004ef8:	d01e      	beq.n	8004f38 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004efa:	f7ff fc04 	bl	8004706 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efe:	f7fe fa69 	bl	80033d4 <HAL_GetTick>
 8004f02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f04:	e008      	b.n	8004f18 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f06:	f7fe fa65 	bl	80033d4 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e012      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1ef      	bne.n	8004f06 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f2a:	68da      	ldr	r2, [r3, #12]
 8004f2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f30:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <HAL_RCC_OscConfig+0x6e4>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	60cb      	str	r3, [r1, #12]
 8004f36:	e001      	b.n	8004f3c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e000      	b.n	8004f3e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3734      	adds	r7, #52	; 0x34
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd90      	pop	{r4, r7, pc}
 8004f46:	bf00      	nop
 8004f48:	eefefffc 	.word	0xeefefffc

08004f4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e12d      	b.n	80051bc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f60:	4b98      	ldr	r3, [pc, #608]	; (80051c4 <HAL_RCC_ClockConfig+0x278>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d91b      	bls.n	8004fa6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f6e:	4b95      	ldr	r3, [pc, #596]	; (80051c4 <HAL_RCC_ClockConfig+0x278>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f023 0207 	bic.w	r2, r3, #7
 8004f76:	4993      	ldr	r1, [pc, #588]	; (80051c4 <HAL_RCC_ClockConfig+0x278>)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f7e:	f7fe fa29 	bl	80033d4 <HAL_GetTick>
 8004f82:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f84:	e008      	b.n	8004f98 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004f86:	f7fe fa25 	bl	80033d4 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e111      	b.n	80051bc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f98:	4b8a      	ldr	r3, [pc, #552]	; (80051c4 <HAL_RCC_ClockConfig+0x278>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d1ef      	bne.n	8004f86 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d016      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff fafb 	bl	80045b2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004fbc:	f7fe fa0a 	bl	80033d4 <HAL_GetTick>
 8004fc0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004fc4:	f7fe fa06 	bl	80033d4 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e0f2      	b.n	80051bc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004fd6:	f7ff fbe8 	bl	80047aa <LL_RCC_IsActiveFlag_HPRE>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0f1      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0320 	and.w	r3, r3, #32
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d016      	beq.n	800501a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7ff faf2 	bl	80045da <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ff6:	f7fe f9ed 	bl	80033d4 <HAL_GetTick>
 8004ffa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ffe:	f7fe f9e9 	bl	80033d4 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e0d5      	b.n	80051bc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005010:	f7ff fbdd 	bl	80047ce <LL_RCC_IsActiveFlag_C2HPRE>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0f1      	beq.n	8004ffe <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005022:	2b00      	cmp	r3, #0
 8005024:	d016      	beq.n	8005054 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	4618      	mov	r0, r3
 800502c:	f7ff faeb 	bl	8004606 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005030:	f7fe f9d0 	bl	80033d4 <HAL_GetTick>
 8005034:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005036:	e008      	b.n	800504a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005038:	f7fe f9cc 	bl	80033d4 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d901      	bls.n	800504a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e0b8      	b.n	80051bc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800504a:	f7ff fbd3 	bl	80047f4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0f1      	beq.n	8005038 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d016      	beq.n	800508e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	4618      	mov	r0, r3
 8005066:	f7ff fae5 	bl	8004634 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800506a:	f7fe f9b3 	bl	80033d4 <HAL_GetTick>
 800506e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005070:	e008      	b.n	8005084 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005072:	f7fe f9af 	bl	80033d4 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d901      	bls.n	8005084 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e09b      	b.n	80051bc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005084:	f7ff fbc9 	bl	800481a <LL_RCC_IsActiveFlag_PPRE1>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0f1      	beq.n	8005072 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b00      	cmp	r3, #0
 8005098:	d017      	beq.n	80050ca <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7ff fadb 	bl	800465c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80050a6:	f7fe f995 	bl	80033d4 <HAL_GetTick>
 80050aa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80050ac:	e008      	b.n	80050c0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80050ae:	f7fe f991 	bl	80033d4 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e07d      	b.n	80051bc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80050c0:	f7ff fbbd 	bl	800483e <LL_RCC_IsActiveFlag_PPRE2>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0f1      	beq.n	80050ae <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d043      	beq.n	800515e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d106      	bne.n	80050ec <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80050de:	f7ff f87b 	bl	80041d8 <LL_RCC_HSE_IsReady>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d11e      	bne.n	8005126 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e067      	b.n	80051bc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2b03      	cmp	r3, #3
 80050f2:	d106      	bne.n	8005102 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80050f4:	f7ff fb16 	bl	8004724 <LL_RCC_PLL_IsReady>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d113      	bne.n	8005126 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e05c      	b.n	80051bc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d106      	bne.n	8005118 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800510a:	f7ff f9e3 	bl	80044d4 <LL_RCC_MSI_IsReady>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d108      	bne.n	8005126 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e051      	b.n	80051bc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005118:	f7ff f88e 	bl	8004238 <LL_RCC_HSI_IsReady>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e04a      	b.n	80051bc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	4618      	mov	r0, r3
 800512c:	f7ff fa21 	bl	8004572 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005130:	f7fe f950 	bl	80033d4 <HAL_GetTick>
 8005134:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005136:	e00a      	b.n	800514e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005138:	f7fe f94c 	bl	80033d4 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	f241 3288 	movw	r2, #5000	; 0x1388
 8005146:	4293      	cmp	r3, r2
 8005148:	d901      	bls.n	800514e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e036      	b.n	80051bc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800514e:	f7ff fa24 	bl	800459a <LL_RCC_GetSysClkSource>
 8005152:	4602      	mov	r2, r0
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	429a      	cmp	r2, r3
 800515c:	d1ec      	bne.n	8005138 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800515e:	4b19      	ldr	r3, [pc, #100]	; (80051c4 <HAL_RCC_ClockConfig+0x278>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0307 	and.w	r3, r3, #7
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	429a      	cmp	r2, r3
 800516a:	d21b      	bcs.n	80051a4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800516c:	4b15      	ldr	r3, [pc, #84]	; (80051c4 <HAL_RCC_ClockConfig+0x278>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f023 0207 	bic.w	r2, r3, #7
 8005174:	4913      	ldr	r1, [pc, #76]	; (80051c4 <HAL_RCC_ClockConfig+0x278>)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	4313      	orrs	r3, r2
 800517a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800517c:	f7fe f92a 	bl	80033d4 <HAL_GetTick>
 8005180:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005182:	e008      	b.n	8005196 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005184:	f7fe f926 	bl	80033d4 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e012      	b.n	80051bc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005196:	4b0b      	ldr	r3, [pc, #44]	; (80051c4 <HAL_RCC_ClockConfig+0x278>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0307 	and.w	r3, r3, #7
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d1ef      	bne.n	8005184 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80051a4:	f000 f87e 	bl	80052a4 <HAL_RCC_GetHCLKFreq>
 80051a8:	4603      	mov	r3, r0
 80051aa:	4a07      	ldr	r2, [pc, #28]	; (80051c8 <HAL_RCC_ClockConfig+0x27c>)
 80051ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80051ae:	f7fe f91d 	bl	80033ec <HAL_GetTickPrio>
 80051b2:	4603      	mov	r3, r0
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fe f8bf 	bl	8003338 <HAL_InitTick>
 80051ba:	4603      	mov	r3, r0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	58004000 	.word	0x58004000
 80051c8:	20000004 	.word	0x20000004

080051cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051cc:	b590      	push	{r4, r7, lr}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051d2:	f7ff f9e2 	bl	800459a <LL_RCC_GetSysClkSource>
 80051d6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10a      	bne.n	80051f4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80051de:	f7ff f99e 	bl	800451e <LL_RCC_MSI_GetRange>
 80051e2:	4603      	mov	r3, r0
 80051e4:	091b      	lsrs	r3, r3, #4
 80051e6:	f003 030f 	and.w	r3, r3, #15
 80051ea:	4a2b      	ldr	r2, [pc, #172]	; (8005298 <HAL_RCC_GetSysClockFreq+0xcc>)
 80051ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	e04b      	b.n	800528c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d102      	bne.n	8005200 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051fa:	4b28      	ldr	r3, [pc, #160]	; (800529c <HAL_RCC_GetSysClockFreq+0xd0>)
 80051fc:	60fb      	str	r3, [r7, #12]
 80051fe:	e045      	b.n	800528c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b08      	cmp	r3, #8
 8005204:	d10a      	bne.n	800521c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005206:	f7fe ffb7 	bl	8004178 <LL_RCC_HSE_IsEnabledDiv2>
 800520a:	4603      	mov	r3, r0
 800520c:	2b01      	cmp	r3, #1
 800520e:	d102      	bne.n	8005216 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005210:	4b22      	ldr	r3, [pc, #136]	; (800529c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	e03a      	b.n	800528c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005216:	4b22      	ldr	r3, [pc, #136]	; (80052a0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	e037      	b.n	800528c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800521c:	f7ff fab9 	bl	8004792 <LL_RCC_PLL_GetMainSource>
 8005220:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b02      	cmp	r3, #2
 8005226:	d003      	beq.n	8005230 <HAL_RCC_GetSysClockFreq+0x64>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b03      	cmp	r3, #3
 800522c:	d003      	beq.n	8005236 <HAL_RCC_GetSysClockFreq+0x6a>
 800522e:	e00d      	b.n	800524c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005230:	4b1a      	ldr	r3, [pc, #104]	; (800529c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005232:	60bb      	str	r3, [r7, #8]
        break;
 8005234:	e015      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005236:	f7fe ff9f 	bl	8004178 <LL_RCC_HSE_IsEnabledDiv2>
 800523a:	4603      	mov	r3, r0
 800523c:	2b01      	cmp	r3, #1
 800523e:	d102      	bne.n	8005246 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005240:	4b16      	ldr	r3, [pc, #88]	; (800529c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005242:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005244:	e00d      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005246:	4b16      	ldr	r3, [pc, #88]	; (80052a0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005248:	60bb      	str	r3, [r7, #8]
        break;
 800524a:	e00a      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800524c:	f7ff f967 	bl	800451e <LL_RCC_MSI_GetRange>
 8005250:	4603      	mov	r3, r0
 8005252:	091b      	lsrs	r3, r3, #4
 8005254:	f003 030f 	and.w	r3, r3, #15
 8005258:	4a0f      	ldr	r2, [pc, #60]	; (8005298 <HAL_RCC_GetSysClockFreq+0xcc>)
 800525a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800525e:	60bb      	str	r3, [r7, #8]
        break;
 8005260:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005262:	f7ff fa71 	bl	8004748 <LL_RCC_PLL_GetN>
 8005266:	4602      	mov	r2, r0
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	fb03 f402 	mul.w	r4, r3, r2
 800526e:	f7ff fa84 	bl	800477a <LL_RCC_PLL_GetDivider>
 8005272:	4603      	mov	r3, r0
 8005274:	091b      	lsrs	r3, r3, #4
 8005276:	3301      	adds	r3, #1
 8005278:	fbb4 f4f3 	udiv	r4, r4, r3
 800527c:	f7ff fa71 	bl	8004762 <LL_RCC_PLL_GetR>
 8005280:	4603      	mov	r3, r0
 8005282:	0f5b      	lsrs	r3, r3, #29
 8005284:	3301      	adds	r3, #1
 8005286:	fbb4 f3f3 	udiv	r3, r4, r3
 800528a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800528c:	68fb      	ldr	r3, [r7, #12]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	bd90      	pop	{r4, r7, pc}
 8005296:	bf00      	nop
 8005298:	0800fc94 	.word	0x0800fc94
 800529c:	00f42400 	.word	0x00f42400
 80052a0:	01e84800 	.word	0x01e84800

080052a4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052a4:	b598      	push	{r3, r4, r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80052a8:	f7ff ff90 	bl	80051cc <HAL_RCC_GetSysClockFreq>
 80052ac:	4604      	mov	r4, r0
 80052ae:	f7ff f9e9 	bl	8004684 <LL_RCC_GetAHBPrescaler>
 80052b2:	4603      	mov	r3, r0
 80052b4:	091b      	lsrs	r3, r3, #4
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	4a03      	ldr	r2, [pc, #12]	; (80052c8 <HAL_RCC_GetHCLKFreq+0x24>)
 80052bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	bd98      	pop	{r3, r4, r7, pc}
 80052c8:	0800fc34 	.word	0x0800fc34

080052cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052cc:	b598      	push	{r3, r4, r7, lr}
 80052ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80052d0:	f7ff ffe8 	bl	80052a4 <HAL_RCC_GetHCLKFreq>
 80052d4:	4604      	mov	r4, r0
 80052d6:	f7ff f9ef 	bl	80046b8 <LL_RCC_GetAPB1Prescaler>
 80052da:	4603      	mov	r3, r0
 80052dc:	0a1b      	lsrs	r3, r3, #8
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	4a04      	ldr	r2, [pc, #16]	; (80052f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052e8:	f003 031f 	and.w	r3, r3, #31
 80052ec:	fa24 f303 	lsr.w	r3, r4, r3
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	bd98      	pop	{r3, r4, r7, pc}
 80052f4:	0800fc74 	.word	0x0800fc74

080052f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052f8:	b598      	push	{r3, r4, r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80052fc:	f7ff ffd2 	bl	80052a4 <HAL_RCC_GetHCLKFreq>
 8005300:	4604      	mov	r4, r0
 8005302:	f7ff f9e5 	bl	80046d0 <LL_RCC_GetAPB2Prescaler>
 8005306:	4603      	mov	r3, r0
 8005308:	0adb      	lsrs	r3, r3, #11
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	4a04      	ldr	r2, [pc, #16]	; (8005320 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005314:	f003 031f 	and.w	r3, r3, #31
 8005318:	fa24 f303 	lsr.w	r3, r4, r3
}
 800531c:	4618      	mov	r0, r3
 800531e:	bd98      	pop	{r3, r4, r7, pc}
 8005320:	0800fc74 	.word	0x0800fc74

08005324 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005324:	b590      	push	{r4, r7, lr}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2bb0      	cmp	r3, #176	; 0xb0
 8005330:	d903      	bls.n	800533a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005332:	4b15      	ldr	r3, [pc, #84]	; (8005388 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	e007      	b.n	800534a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	091b      	lsrs	r3, r3, #4
 800533e:	f003 030f 	and.w	r3, r3, #15
 8005342:	4a11      	ldr	r2, [pc, #68]	; (8005388 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005348:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800534a:	f7ff f9a7 	bl	800469c <LL_RCC_GetAHB4Prescaler>
 800534e:	4603      	mov	r3, r0
 8005350:	091b      	lsrs	r3, r3, #4
 8005352:	f003 030f 	and.w	r3, r3, #15
 8005356:	4a0d      	ldr	r2, [pc, #52]	; (800538c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005362:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4a0a      	ldr	r2, [pc, #40]	; (8005390 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005368:	fba2 2303 	umull	r2, r3, r2, r3
 800536c:	0c9c      	lsrs	r4, r3, #18
 800536e:	f7fe fef5 	bl	800415c <HAL_PWREx_GetVoltageRange>
 8005372:	4603      	mov	r3, r0
 8005374:	4619      	mov	r1, r3
 8005376:	4620      	mov	r0, r4
 8005378:	f000 f80c 	bl	8005394 <RCC_SetFlashLatency>
 800537c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800537e:	4618      	mov	r0, r3
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	bd90      	pop	{r4, r7, pc}
 8005386:	bf00      	nop
 8005388:	0800fc94 	.word	0x0800fc94
 800538c:	0800fc34 	.word	0x0800fc34
 8005390:	431bde83 	.word	0x431bde83

08005394 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005394:	b590      	push	{r4, r7, lr}
 8005396:	b093      	sub	sp, #76	; 0x4c
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800539e:	4b37      	ldr	r3, [pc, #220]	; (800547c <RCC_SetFlashLatency+0xe8>)
 80053a0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80053a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80053aa:	4a35      	ldr	r2, [pc, #212]	; (8005480 <RCC_SetFlashLatency+0xec>)
 80053ac:	f107 031c 	add.w	r3, r7, #28
 80053b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80053b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80053b6:	4b33      	ldr	r3, [pc, #204]	; (8005484 <RCC_SetFlashLatency+0xf0>)
 80053b8:	f107 040c 	add.w	r4, r7, #12
 80053bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80053c2:	2300      	movs	r3, #0
 80053c4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053cc:	d11a      	bne.n	8005404 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80053ce:	2300      	movs	r3, #0
 80053d0:	643b      	str	r3, [r7, #64]	; 0x40
 80053d2:	e013      	b.n	80053fc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80053d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	3348      	adds	r3, #72	; 0x48
 80053da:	443b      	add	r3, r7
 80053dc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d807      	bhi.n	80053f6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80053e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	3348      	adds	r3, #72	; 0x48
 80053ec:	443b      	add	r3, r7
 80053ee:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80053f2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80053f4:	e020      	b.n	8005438 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80053f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053f8:	3301      	adds	r3, #1
 80053fa:	643b      	str	r3, [r7, #64]	; 0x40
 80053fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053fe:	2b03      	cmp	r3, #3
 8005400:	d9e8      	bls.n	80053d4 <RCC_SetFlashLatency+0x40>
 8005402:	e019      	b.n	8005438 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005404:	2300      	movs	r3, #0
 8005406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005408:	e013      	b.n	8005432 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800540a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	3348      	adds	r3, #72	; 0x48
 8005410:	443b      	add	r3, r7
 8005412:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	429a      	cmp	r2, r3
 800541a:	d807      	bhi.n	800542c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800541c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	3348      	adds	r3, #72	; 0x48
 8005422:	443b      	add	r3, r7
 8005424:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005428:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800542a:	e005      	b.n	8005438 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800542c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800542e:	3301      	adds	r3, #1
 8005430:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005434:	2b02      	cmp	r3, #2
 8005436:	d9e8      	bls.n	800540a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005438:	4b13      	ldr	r3, [pc, #76]	; (8005488 <RCC_SetFlashLatency+0xf4>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f023 0207 	bic.w	r2, r3, #7
 8005440:	4911      	ldr	r1, [pc, #68]	; (8005488 <RCC_SetFlashLatency+0xf4>)
 8005442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005444:	4313      	orrs	r3, r2
 8005446:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005448:	f7fd ffc4 	bl	80033d4 <HAL_GetTick>
 800544c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800544e:	e008      	b.n	8005462 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005450:	f7fd ffc0 	bl	80033d4 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d901      	bls.n	8005462 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e007      	b.n	8005472 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005462:	4b09      	ldr	r3, [pc, #36]	; (8005488 <RCC_SetFlashLatency+0xf4>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800546c:	429a      	cmp	r2, r3
 800546e:	d1ef      	bne.n	8005450 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	374c      	adds	r7, #76	; 0x4c
 8005476:	46bd      	mov	sp, r7
 8005478:	bd90      	pop	{r4, r7, pc}
 800547a:	bf00      	nop
 800547c:	0800e4fc 	.word	0x0800e4fc
 8005480:	0800e50c 	.word	0x0800e50c
 8005484:	0800e518 	.word	0x0800e518
 8005488:	58004000 	.word	0x58004000

0800548c <LL_RCC_LSE_IsEnabled>:
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b01      	cmp	r3, #1
 800549e:	d101      	bne.n	80054a4 <LL_RCC_LSE_IsEnabled+0x18>
 80054a0:	2301      	movs	r3, #1
 80054a2:	e000      	b.n	80054a6 <LL_RCC_LSE_IsEnabled+0x1a>
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <LL_RCC_LSE_IsReady>:
{
 80054b0:	b480      	push	{r7}
 80054b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80054b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d101      	bne.n	80054c8 <LL_RCC_LSE_IsReady+0x18>
 80054c4:	2301      	movs	r3, #1
 80054c6:	e000      	b.n	80054ca <LL_RCC_LSE_IsReady+0x1a>
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <LL_RCC_SetRFWKPClockSource>:
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80054dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <LL_RCC_SetSMPSClockSource>:
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	f023 0203 	bic.w	r2, r3, #3
 8005512:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4313      	orrs	r3, r2
 800551a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <LL_RCC_SetSMPSPrescaler>:
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800553a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4313      	orrs	r3, r2
 8005542:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <LL_RCC_SetUSARTClockSource>:
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800555c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005560:	f023 0203 	bic.w	r2, r3, #3
 8005564:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4313      	orrs	r3, r2
 800556c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <LL_RCC_SetLPUARTClockSource>:
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005590:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4313      	orrs	r3, r2
 8005598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <LL_RCC_SetI2CClockSource>:
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80055b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	091b      	lsrs	r3, r3, #4
 80055bc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80055c0:	43db      	mvns	r3, r3
 80055c2:	401a      	ands	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	011b      	lsls	r3, r3, #4
 80055c8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80055cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <LL_RCC_SetLPTIMClockSource>:
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80055ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	0c1b      	lsrs	r3, r3, #16
 80055f6:	041b      	lsls	r3, r3, #16
 80055f8:	43db      	mvns	r3, r3
 80055fa:	401a      	ands	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	041b      	lsls	r3, r3, #16
 8005600:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005604:	4313      	orrs	r3, r2
 8005606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <LL_RCC_SetSAIClockSource>:
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800561e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005626:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800562a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4313      	orrs	r3, r2
 8005632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <LL_RCC_SetRNGClockSource>:
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800564a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800564e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005652:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005656:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4313      	orrs	r3, r2
 800565e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005662:	bf00      	nop
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <LL_RCC_SetCLK48ClockSource>:
{
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800567a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005682:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4313      	orrs	r3, r2
 800568a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800568e:	bf00      	nop
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <LL_RCC_SetUSBClockSource>:
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b082      	sub	sp, #8
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7ff ffe3 	bl	800566e <LL_RCC_SetCLK48ClockSource>
}
 80056a8:	bf00      	nop
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <LL_RCC_SetADCClockSource>:
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80056b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80056c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <LL_RCC_SetRTCClockSource>:
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80056e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <LL_RCC_GetRTCClockSource>:
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800570c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005714:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005718:	4618      	mov	r0, r3
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <LL_RCC_ForceBackupDomainReset>:
{
 8005722:	b480      	push	{r7}
 8005724:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800572a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800573a:	bf00      	nop
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800574c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005750:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800575c:	bf00      	nop
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <LL_RCC_PLLSAI1_Enable>:
{
 8005766:	b480      	push	{r7}
 8005768:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800576a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005774:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005778:	6013      	str	r3, [r2, #0]
}
 800577a:	bf00      	nop
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <LL_RCC_PLLSAI1_Disable>:
{
 8005784:	b480      	push	{r7}
 8005786:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005792:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005796:	6013      	str	r3, [r2, #0]
}
 8005798:	bf00      	nop
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <LL_RCC_PLLSAI1_IsReady>:
{
 80057a2:	b480      	push	{r7}
 80057a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80057a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057b4:	d101      	bne.n	80057ba <LL_RCC_PLLSAI1_IsReady+0x18>
 80057b6:	2301      	movs	r3, #1
 80057b8:	e000      	b.n	80057bc <LL_RCC_PLLSAI1_IsReady+0x1a>
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b088      	sub	sp, #32
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80057ce:	2300      	movs	r3, #0
 80057d0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80057d2:	2300      	movs	r3, #0
 80057d4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d034      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057ea:	d021      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80057ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057f0:	d81b      	bhi.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x64>
 80057f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057f6:	d01d      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80057f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057fc:	d815      	bhi.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x64>
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00b      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005802:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005806:	d110      	bne.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005816:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005818:	e00d      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	3304      	adds	r3, #4
 800581e:	4618      	mov	r0, r3
 8005820:	f000 f947 	bl	8005ab2 <RCCEx_PLLSAI1_ConfigNP>
 8005824:	4603      	mov	r3, r0
 8005826:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005828:	e005      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	77fb      	strb	r3, [r7, #31]
        break;
 800582e:	e002      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005830:	bf00      	nop
 8005832:	e000      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005834:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005836:	7ffb      	ldrb	r3, [r7, #31]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d105      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005840:	4618      	mov	r0, r3
 8005842:	f7ff fee8 	bl	8005616 <LL_RCC_SetSAIClockSource>
 8005846:	e001      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005848:	7ffb      	ldrb	r3, [r7, #31]
 800584a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005854:	2b00      	cmp	r3, #0
 8005856:	d046      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005858:	f7ff ff56 	bl	8005708 <LL_RCC_GetRTCClockSource>
 800585c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	429a      	cmp	r2, r3
 8005866:	d03c      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005868:	f7fe fc68 	bl	800413c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d105      	bne.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff ff30 	bl	80056dc <LL_RCC_SetRTCClockSource>
 800587c:	e02e      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800587e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005886:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005888:	f7ff ff4b 	bl	8005722 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800588c:	f7ff ff5a 	bl	8005744 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	4313      	orrs	r3, r2
 800589c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800589e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80058a8:	f7ff fdf0 	bl	800548c <LL_RCC_LSE_IsEnabled>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d114      	bne.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058b2:	f7fd fd8f 	bl	80033d4 <HAL_GetTick>
 80058b6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80058b8:	e00b      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ba:	f7fd fd8b 	bl	80033d4 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d902      	bls.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	77fb      	strb	r3, [r7, #31]
              break;
 80058d0:	e004      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80058d2:	f7ff fded 	bl	80054b0 <LL_RCC_LSE_IsReady>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d1ee      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80058dc:	7ffb      	ldrb	r3, [r7, #31]
 80058de:	77bb      	strb	r3, [r7, #30]
 80058e0:	e001      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e2:	7ffb      	ldrb	r3, [r7, #31]
 80058e4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d004      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff fe2a 	bl	8005550 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d004      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	4618      	mov	r0, r3
 800590e:	f7ff fe35 	bl	800557c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0310 	and.w	r3, r3, #16
 800591a:	2b00      	cmp	r3, #0
 800591c:	d004      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005922:	4618      	mov	r0, r3
 8005924:	f7ff fe5d 	bl	80055e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0320 	and.w	r3, r3, #32
 8005930:	2b00      	cmp	r3, #0
 8005932:	d004      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	4618      	mov	r0, r3
 800593a:	f7ff fe52 	bl	80055e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0304 	and.w	r3, r3, #4
 8005946:	2b00      	cmp	r3, #0
 8005948:	d004      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	4618      	mov	r0, r3
 8005950:	f7ff fe2a 	bl	80055a8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0308 	and.w	r3, r3, #8
 800595c:	2b00      	cmp	r3, #0
 800595e:	d004      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	4618      	mov	r0, r3
 8005966:	f7ff fe1f 	bl	80055a8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005972:	2b00      	cmp	r3, #0
 8005974:	d022      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800597a:	4618      	mov	r0, r3
 800597c:	f7ff fe8d 	bl	800569a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005988:	d107      	bne.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800598a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005994:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005998:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800599e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059a2:	d10b      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3304      	adds	r3, #4
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 f8dd 	bl	8005b68 <RCCEx_PLLSAI1_ConfigNQ>
 80059ae:	4603      	mov	r3, r0
 80059b0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80059b2:	7ffb      	ldrb	r3, [r7, #31]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d001      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80059b8:	7ffb      	ldrb	r3, [r7, #31]
 80059ba:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d02b      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d0:	d008      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059da:	d003      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d105      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7ff fe2a 	bl	8005642 <LL_RCC_SetRNGClockSource>
 80059ee:	e00a      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	2000      	movs	r0, #0
 80059fc:	f7ff fe21 	bl	8005642 <LL_RCC_SetRNGClockSource>
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f7ff fe34 	bl	800566e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005a0e:	d107      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a1e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d022      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7ff fe3d 	bl	80056b0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a3e:	d107      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a4e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a58:	d10b      	bne.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 f8dd 	bl	8005c1e <RCCEx_PLLSAI1_ConfigNR>
 8005a64:	4603      	mov	r3, r0
 8005a66:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005a68:	7ffb      	ldrb	r3, [r7, #31]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005a6e:	7ffb      	ldrb	r3, [r7, #31]
 8005a70:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d004      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7ff fd26 	bl	80054d4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d009      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7ff fd45 	bl	8005528 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7ff fd2c 	bl	8005500 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005aa8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3720      	adds	r7, #32
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b084      	sub	sp, #16
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005abe:	f7ff fe61 	bl	8005784 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ac2:	f7fd fc87 	bl	80033d4 <HAL_GetTick>
 8005ac6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ac8:	e009      	b.n	8005ade <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005aca:	f7fd fc83 	bl	80033d4 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d902      	bls.n	8005ade <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	73fb      	strb	r3, [r7, #15]
      break;
 8005adc:	e004      	b.n	8005ae8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ade:	f7ff fe60 	bl	80057a2 <LL_RCC_PLLSAI1_IsReady>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1f0      	bne.n	8005aca <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d137      	bne.n	8005b5e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	021b      	lsls	r3, r3, #8
 8005afe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b02:	4313      	orrs	r3, r2
 8005b04:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005b1c:	f7ff fe23 	bl	8005766 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b20:	f7fd fc58 	bl	80033d4 <HAL_GetTick>
 8005b24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b26:	e009      	b.n	8005b3c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b28:	f7fd fc54 	bl	80033d4 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d902      	bls.n	8005b3c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	73fb      	strb	r3, [r7, #15]
        break;
 8005b3a:	e004      	b.n	8005b46 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b3c:	f7ff fe31 	bl	80057a2 <LL_RCC_PLLSAI1_IsReady>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d1f0      	bne.n	8005b28 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005b46:	7bfb      	ldrb	r3, [r7, #15]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d108      	bne.n	8005b5e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b50:	691a      	ldr	r2, [r3, #16]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b70:	2300      	movs	r3, #0
 8005b72:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005b74:	f7ff fe06 	bl	8005784 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b78:	f7fd fc2c 	bl	80033d4 <HAL_GetTick>
 8005b7c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005b7e:	e009      	b.n	8005b94 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b80:	f7fd fc28 	bl	80033d4 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d902      	bls.n	8005b94 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	73fb      	strb	r3, [r7, #15]
      break;
 8005b92:	e004      	b.n	8005b9e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005b94:	f7ff fe05 	bl	80057a2 <LL_RCC_PLLSAI1_IsReady>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1f0      	bne.n	8005b80 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d137      	bne.n	8005c14 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	021b      	lsls	r3, r3, #8
 8005bb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005bd2:	f7ff fdc8 	bl	8005766 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bd6:	f7fd fbfd 	bl	80033d4 <HAL_GetTick>
 8005bda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005bdc:	e009      	b.n	8005bf2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bde:	f7fd fbf9 	bl	80033d4 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d902      	bls.n	8005bf2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	73fb      	strb	r3, [r7, #15]
        break;
 8005bf0:	e004      	b.n	8005bfc <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005bf2:	f7ff fdd6 	bl	80057a2 <LL_RCC_PLLSAI1_IsReady>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d1f0      	bne.n	8005bde <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005bfc:	7bfb      	ldrb	r3, [r7, #15]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d108      	bne.n	8005c14 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c06:	691a      	ldr	r2, [r3, #16]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c10:	4313      	orrs	r3, r2
 8005c12:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b084      	sub	sp, #16
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005c2a:	f7ff fdab 	bl	8005784 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c2e:	f7fd fbd1 	bl	80033d4 <HAL_GetTick>
 8005c32:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005c34:	e009      	b.n	8005c4a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c36:	f7fd fbcd 	bl	80033d4 <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d902      	bls.n	8005c4a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	73fb      	strb	r3, [r7, #15]
      break;
 8005c48:	e004      	b.n	8005c54 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005c4a:	f7ff fdaa 	bl	80057a2 <LL_RCC_PLLSAI1_IsReady>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1f0      	bne.n	8005c36 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d137      	bne.n	8005cca <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	021b      	lsls	r3, r3, #8
 8005c6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c84:	4313      	orrs	r3, r2
 8005c86:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005c88:	f7ff fd6d 	bl	8005766 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c8c:	f7fd fba2 	bl	80033d4 <HAL_GetTick>
 8005c90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005c92:	e009      	b.n	8005ca8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c94:	f7fd fb9e 	bl	80033d4 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d902      	bls.n	8005ca8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	73fb      	strb	r3, [r7, #15]
        break;
 8005ca6:	e004      	b.n	8005cb2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ca8:	f7ff fd7b 	bl	80057a2 <LL_RCC_PLLSAI1_IsReady>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d1f0      	bne.n	8005c94 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d108      	bne.n	8005cca <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cbc:	691a      	ldr	r2, [r3, #16]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e090      	b.n	8005e08 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d106      	bne.n	8005d00 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7fc ff9e 	bl	8002c3c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	22ca      	movs	r2, #202	; 0xca
 8005d0e:	625a      	str	r2, [r3, #36]	; 0x24
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2253      	movs	r2, #83	; 0x53
 8005d16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f89f 	bl	8005e5c <RTC_EnterInitMode>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d009      	beq.n	8005d38 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	22ff      	movs	r2, #255	; 0xff
 8005d2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2204      	movs	r2, #4
 8005d30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e067      	b.n	8005e08 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	6812      	ldr	r2, [r2, #0]
 8005d42:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005d46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d4a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6899      	ldr	r1, [r3, #8]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	431a      	orrs	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	68d2      	ldr	r2, [r2, #12]
 8005d72:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6919      	ldr	r1, [r3, #16]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	041a      	lsls	r2, r3, #16
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d96:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0203 	bic.w	r2, r2, #3
 8005da6:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	69da      	ldr	r2, [r3, #28]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f003 0320 	and.w	r3, r3, #32
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d113      	bne.n	8005df6 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f81e 	bl	8005e10 <HAL_RTC_WaitForSynchro>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00d      	beq.n	8005df6 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	22ff      	movs	r2, #255	; 0xff
 8005de0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2204      	movs	r2, #4
 8005de6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e008      	b.n	8005e08 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	22ff      	movs	r2, #255	; 0xff
 8005dfc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8005e06:	2300      	movs	r3, #0
  }
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e26:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005e28:	f7fd fad4 	bl	80033d4 <HAL_GetTick>
 8005e2c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e2e:	e009      	b.n	8005e44 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e30:	f7fd fad0 	bl	80033d4 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e3e:	d901      	bls.n	8005e44 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e007      	b.n	8005e54 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f003 0320 	and.w	r3, r3, #32
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d0ee      	beq.n	8005e30 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d119      	bne.n	8005ea6 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f04f 32ff 	mov.w	r2, #4294967295
 8005e7a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005e7c:	f7fd faaa 	bl	80033d4 <HAL_GetTick>
 8005e80:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005e82:	e009      	b.n	8005e98 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005e84:	f7fd faa6 	bl	80033d4 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e92:	d901      	bls.n	8005e98 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e007      	b.n	8005ea8 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0ee      	beq.n	8005e84 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <LL_RCC_GetUSARTClockSource>:
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ebc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4013      	ands	r3, r2
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <LL_RCC_GetLPUARTClockSource>:
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005edc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4013      	ands	r3, r2
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e042      	b.n	8005f88 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d106      	bne.n	8005f1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f7fd f925 	bl	8003164 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2224      	movs	r2, #36	; 0x24
 8005f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 0201 	bic.w	r2, r2, #1
 8005f30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fc8c 	bl	8006850 <UART_SetConfig>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d101      	bne.n	8005f42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e022      	b.n	8005f88 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fea6 	bl	8006c9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f042 0201 	orr.w	r2, r2, #1
 8005f7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 ff2d 	bl	8006de0 <UART_CheckIdleState>
 8005f86:	4603      	mov	r3, r0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3708      	adds	r7, #8
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b08a      	sub	sp, #40	; 0x28
 8005f94:	af02      	add	r7, sp, #8
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	603b      	str	r3, [r7, #0]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fa6:	2b20      	cmp	r3, #32
 8005fa8:	f040 8083 	bne.w	80060b2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <HAL_UART_Transmit+0x28>
 8005fb2:	88fb      	ldrh	r3, [r7, #6]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e07b      	b.n	80060b4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d101      	bne.n	8005fca <HAL_UART_Transmit+0x3a>
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	e074      	b.n	80060b4 <HAL_UART_Transmit+0x124>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2221      	movs	r2, #33	; 0x21
 8005fde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fe2:	f7fd f9f7 	bl	80033d4 <HAL_GetTick>
 8005fe6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	88fa      	ldrh	r2, [r7, #6]
 8005fec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	88fa      	ldrh	r2, [r7, #6]
 8005ff4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006000:	d108      	bne.n	8006014 <HAL_UART_Transmit+0x84>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d104      	bne.n	8006014 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800600a:	2300      	movs	r3, #0
 800600c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	61bb      	str	r3, [r7, #24]
 8006012:	e003      	b.n	800601c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006018:	2300      	movs	r3, #0
 800601a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006024:	e02c      	b.n	8006080 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2200      	movs	r2, #0
 800602e:	2180      	movs	r1, #128	; 0x80
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 ff20 	bl	8006e76 <UART_WaitOnFlagUntilTimeout>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e039      	b.n	80060b4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10b      	bne.n	800605e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006054:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	3302      	adds	r3, #2
 800605a:	61bb      	str	r3, [r7, #24]
 800605c:	e007      	b.n	800606e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	781a      	ldrb	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	3301      	adds	r3, #1
 800606c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006074:	b29b      	uxth	r3, r3
 8006076:	3b01      	subs	r3, #1
 8006078:	b29a      	uxth	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006086:	b29b      	uxth	r3, r3
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1cc      	bne.n	8006026 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	2200      	movs	r2, #0
 8006094:	2140      	movs	r1, #64	; 0x40
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f000 feed 	bl	8006e76 <UART_WaitOnFlagUntilTimeout>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e006      	b.n	80060b4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	e000      	b.n	80060b4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80060b2:	2302      	movs	r3, #2
  }
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3720      	adds	r7, #32
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b08a      	sub	sp, #40	; 0x28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	4613      	mov	r3, r2
 80060c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060d0:	2b20      	cmp	r3, #32
 80060d2:	d17a      	bne.n	80061ca <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d002      	beq.n	80060e0 <HAL_UART_Transmit_DMA+0x24>
 80060da:	88fb      	ldrh	r3, [r7, #6]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d101      	bne.n	80060e4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e073      	b.n	80061cc <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d101      	bne.n	80060f2 <HAL_UART_Transmit_DMA+0x36>
 80060ee:	2302      	movs	r3, #2
 80060f0:	e06c      	b.n	80061cc <HAL_UART_Transmit_DMA+0x110>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	88fa      	ldrh	r2, [r7, #6]
 8006104:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	88fa      	ldrh	r2, [r7, #6]
 800610c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2221      	movs	r2, #33	; 0x21
 800611c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006124:	2b00      	cmp	r3, #0
 8006126:	d02c      	beq.n	8006182 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800612c:	4a29      	ldr	r2, [pc, #164]	; (80061d4 <HAL_UART_Transmit_DMA+0x118>)
 800612e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006134:	4a28      	ldr	r2, [pc, #160]	; (80061d8 <HAL_UART_Transmit_DMA+0x11c>)
 8006136:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800613c:	4a27      	ldr	r2, [pc, #156]	; (80061dc <HAL_UART_Transmit_DMA+0x120>)
 800613e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006144:	2200      	movs	r2, #0
 8006146:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006150:	4619      	mov	r1, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3328      	adds	r3, #40	; 0x28
 8006158:	461a      	mov	r2, r3
 800615a:	88fb      	ldrh	r3, [r7, #6]
 800615c:	f7fd fba0 	bl	80038a0 <HAL_DMA_Start_IT>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00d      	beq.n	8006182 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2210      	movs	r2, #16
 800616a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2220      	movs	r2, #32
 800617a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e024      	b.n	80061cc <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2240      	movs	r2, #64	; 0x40
 8006188:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3308      	adds	r3, #8
 8006198:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	e853 3f00 	ldrex	r3, [r3]
 80061a0:	613b      	str	r3, [r7, #16]
   return(result);
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a8:	627b      	str	r3, [r7, #36]	; 0x24
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3308      	adds	r3, #8
 80061b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061b2:	623a      	str	r2, [r7, #32]
 80061b4:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b6:	69f9      	ldr	r1, [r7, #28]
 80061b8:	6a3a      	ldr	r2, [r7, #32]
 80061ba:	e841 2300 	strex	r3, r2, [r1]
 80061be:	61bb      	str	r3, [r7, #24]
   return(result);
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1e5      	bne.n	8006192 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	e000      	b.n	80061cc <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80061ca:	2302      	movs	r3, #2
  }
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3728      	adds	r7, #40	; 0x28
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	08007155 	.word	0x08007155
 80061d8:	080071ef 	.word	0x080071ef
 80061dc:	0800720b 	.word	0x0800720b

080061e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b0ba      	sub	sp, #232	; 0xe8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006206:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800620a:	f640 030f 	movw	r3, #2063	; 0x80f
 800620e:	4013      	ands	r3, r2
 8006210:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006214:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006218:	2b00      	cmp	r3, #0
 800621a:	d11b      	bne.n	8006254 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800621c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006220:	f003 0320 	and.w	r3, r3, #32
 8006224:	2b00      	cmp	r3, #0
 8006226:	d015      	beq.n	8006254 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800622c:	f003 0320 	and.w	r3, r3, #32
 8006230:	2b00      	cmp	r3, #0
 8006232:	d105      	bne.n	8006240 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006234:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d009      	beq.n	8006254 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 82d6 	beq.w	80067f6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	4798      	blx	r3
      }
      return;
 8006252:	e2d0      	b.n	80067f6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006254:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 811f 	beq.w	800649c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800625e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006262:	4b8b      	ldr	r3, [pc, #556]	; (8006490 <HAL_UART_IRQHandler+0x2b0>)
 8006264:	4013      	ands	r3, r2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d106      	bne.n	8006278 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800626a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800626e:	4b89      	ldr	r3, [pc, #548]	; (8006494 <HAL_UART_IRQHandler+0x2b4>)
 8006270:	4013      	ands	r3, r2
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 8112 	beq.w	800649c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	d011      	beq.n	80062a8 <HAL_UART_IRQHandler+0xc8>
 8006284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00b      	beq.n	80062a8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2201      	movs	r2, #1
 8006296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800629e:	f043 0201 	orr.w	r2, r3, #1
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ac:	f003 0302 	and.w	r3, r3, #2
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d011      	beq.n	80062d8 <HAL_UART_IRQHandler+0xf8>
 80062b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00b      	beq.n	80062d8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2202      	movs	r2, #2
 80062c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062ce:	f043 0204 	orr.w	r2, r3, #4
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d011      	beq.n	8006308 <HAL_UART_IRQHandler+0x128>
 80062e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00b      	beq.n	8006308 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2204      	movs	r2, #4
 80062f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062fe:	f043 0202 	orr.w	r2, r3, #2
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800630c:	f003 0308 	and.w	r3, r3, #8
 8006310:	2b00      	cmp	r3, #0
 8006312:	d017      	beq.n	8006344 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006318:	f003 0320 	and.w	r3, r3, #32
 800631c:	2b00      	cmp	r3, #0
 800631e:	d105      	bne.n	800632c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006320:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006324:	4b5a      	ldr	r3, [pc, #360]	; (8006490 <HAL_UART_IRQHandler+0x2b0>)
 8006326:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00b      	beq.n	8006344 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2208      	movs	r2, #8
 8006332:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800633a:	f043 0208 	orr.w	r2, r3, #8
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800634c:	2b00      	cmp	r3, #0
 800634e:	d012      	beq.n	8006376 <HAL_UART_IRQHandler+0x196>
 8006350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006354:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00c      	beq.n	8006376 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006364:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800636c:	f043 0220 	orr.w	r2, r3, #32
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 823c 	beq.w	80067fa <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006386:	f003 0320 	and.w	r3, r3, #32
 800638a:	2b00      	cmp	r3, #0
 800638c:	d013      	beq.n	80063b6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800638e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006392:	f003 0320 	and.w	r3, r3, #32
 8006396:	2b00      	cmp	r3, #0
 8006398:	d105      	bne.n	80063a6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800639a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800639e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d007      	beq.n	80063b6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ca:	2b40      	cmp	r3, #64	; 0x40
 80063cc:	d005      	beq.n	80063da <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80063ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d04f      	beq.n	800647a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fe54 	bl	8007088 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ea:	2b40      	cmp	r3, #64	; 0x40
 80063ec:	d141      	bne.n	8006472 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	3308      	adds	r3, #8
 80063f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063fc:	e853 3f00 	ldrex	r3, [r3]
 8006400:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006404:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800640c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3308      	adds	r3, #8
 8006416:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800641a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800641e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006422:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006426:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800642a:	e841 2300 	strex	r3, r2, [r1]
 800642e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006432:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1d9      	bne.n	80063ee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800643e:	2b00      	cmp	r3, #0
 8006440:	d013      	beq.n	800646a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006446:	4a14      	ldr	r2, [pc, #80]	; (8006498 <HAL_UART_IRQHandler+0x2b8>)
 8006448:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800644e:	4618      	mov	r0, r3
 8006450:	f7fd fb00 	bl	8003a54 <HAL_DMA_Abort_IT>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d017      	beq.n	800648a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800645e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006464:	4610      	mov	r0, r2
 8006466:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006468:	e00f      	b.n	800648a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f9da 	bl	8006824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006470:	e00b      	b.n	800648a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f9d6 	bl	8006824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006478:	e007      	b.n	800648a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f9d2 	bl	8006824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006488:	e1b7      	b.n	80067fa <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800648a:	bf00      	nop
    return;
 800648c:	e1b5      	b.n	80067fa <HAL_UART_IRQHandler+0x61a>
 800648e:	bf00      	nop
 8006490:	10000001 	.word	0x10000001
 8006494:	04000120 	.word	0x04000120
 8006498:	0800728b 	.word	0x0800728b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	f040 814a 	bne.w	800673a <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80064a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064aa:	f003 0310 	and.w	r3, r3, #16
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 8143 	beq.w	800673a <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80064b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064b8:	f003 0310 	and.w	r3, r3, #16
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 813c 	beq.w	800673a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2210      	movs	r2, #16
 80064c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d4:	2b40      	cmp	r3, #64	; 0x40
 80064d6:	f040 80b5 	bne.w	8006644 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80064e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 8187 	beq.w	80067fe <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80064f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064fa:	429a      	cmp	r2, r3
 80064fc:	f080 817f 	bcs.w	80067fe <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006506:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0320 	and.w	r3, r3, #32
 8006516:	2b00      	cmp	r3, #0
 8006518:	f040 8086 	bne.w	8006628 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006524:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006528:	e853 3f00 	ldrex	r3, [r3]
 800652c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006530:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006538:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	461a      	mov	r2, r3
 8006542:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006546:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800654a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006552:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006556:	e841 2300 	strex	r3, r2, [r1]
 800655a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800655e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1da      	bne.n	800651c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	3308      	adds	r3, #8
 800656c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006570:	e853 3f00 	ldrex	r3, [r3]
 8006574:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006576:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006578:	f023 0301 	bic.w	r3, r3, #1
 800657c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	3308      	adds	r3, #8
 8006586:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800658a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800658e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006590:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006592:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006596:	e841 2300 	strex	r3, r2, [r1]
 800659a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800659c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1e1      	bne.n	8006566 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3308      	adds	r3, #8
 80065a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065ac:	e853 3f00 	ldrex	r3, [r3]
 80065b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80065b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3308      	adds	r3, #8
 80065c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80065c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80065cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065ce:	e841 2300 	strex	r3, r2, [r1]
 80065d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80065d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1e3      	bne.n	80065a2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2220      	movs	r2, #32
 80065de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065f0:	e853 3f00 	ldrex	r3, [r3]
 80065f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065f8:	f023 0310 	bic.w	r3, r3, #16
 80065fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	461a      	mov	r2, r3
 8006606:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800660a:	65bb      	str	r3, [r7, #88]	; 0x58
 800660c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006610:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e4      	bne.n	80065e8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006622:	4618      	mov	r0, r3
 8006624:	f7fd f9b7 	bl	8003996 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006634:	b29b      	uxth	r3, r3
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	b29b      	uxth	r3, r3
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f8fb 	bl	8006838 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006642:	e0dc      	b.n	80067fe <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006650:	b29b      	uxth	r3, r3
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800665e:	b29b      	uxth	r3, r3
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 80ce 	beq.w	8006802 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8006666:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 80c9 	beq.w	8006802 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	e853 3f00 	ldrex	r3, [r3]
 800667c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800667e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006680:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006684:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	461a      	mov	r2, r3
 800668e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006692:	647b      	str	r3, [r7, #68]	; 0x44
 8006694:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006696:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006698:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800669a:	e841 2300 	strex	r3, r2, [r1]
 800669e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1e4      	bne.n	8006670 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3308      	adds	r3, #8
 80066ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	e853 3f00 	ldrex	r3, [r3]
 80066b4:	623b      	str	r3, [r7, #32]
   return(result);
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066bc:	f023 0301 	bic.w	r3, r3, #1
 80066c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	3308      	adds	r3, #8
 80066ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80066ce:	633a      	str	r2, [r7, #48]	; 0x30
 80066d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e1      	bne.n	80066a6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2220      	movs	r2, #32
 80066e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	e853 3f00 	ldrex	r3, [r3]
 8006702:	60fb      	str	r3, [r7, #12]
   return(result);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f023 0310 	bic.w	r3, r3, #16
 800670a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	461a      	mov	r2, r3
 8006714:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006718:	61fb      	str	r3, [r7, #28]
 800671a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671c:	69b9      	ldr	r1, [r7, #24]
 800671e:	69fa      	ldr	r2, [r7, #28]
 8006720:	e841 2300 	strex	r3, r2, [r1]
 8006724:	617b      	str	r3, [r7, #20]
   return(result);
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1e4      	bne.n	80066f6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800672c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006730:	4619      	mov	r1, r3
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f880 	bl	8006838 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006738:	e063      	b.n	8006802 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800673a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800673e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00e      	beq.n	8006764 <HAL_UART_IRQHandler+0x584>
 8006746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800674a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d008      	beq.n	8006764 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800675a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fdd5 	bl	800730c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006762:	e051      	b.n	8006808 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800676c:	2b00      	cmp	r3, #0
 800676e:	d014      	beq.n	800679a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006778:	2b00      	cmp	r3, #0
 800677a:	d105      	bne.n	8006788 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800677c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006780:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d008      	beq.n	800679a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800678c:	2b00      	cmp	r3, #0
 800678e:	d03a      	beq.n	8006806 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	4798      	blx	r3
    }
    return;
 8006798:	e035      	b.n	8006806 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800679a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800679e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d009      	beq.n	80067ba <HAL_UART_IRQHandler+0x5da>
 80067a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fd7f 	bl	80072b6 <UART_EndTransmit_IT>
    return;
 80067b8:	e026      	b.n	8006808 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80067ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d009      	beq.n	80067da <HAL_UART_IRQHandler+0x5fa>
 80067c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fdae 	bl	8007334 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067d8:	e016      	b.n	8006808 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80067da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d010      	beq.n	8006808 <HAL_UART_IRQHandler+0x628>
 80067e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	da0c      	bge.n	8006808 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fd96 	bl	8007320 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067f4:	e008      	b.n	8006808 <HAL_UART_IRQHandler+0x628>
      return;
 80067f6:	bf00      	nop
 80067f8:	e006      	b.n	8006808 <HAL_UART_IRQHandler+0x628>
    return;
 80067fa:	bf00      	nop
 80067fc:	e004      	b.n	8006808 <HAL_UART_IRQHandler+0x628>
      return;
 80067fe:	bf00      	nop
 8006800:	e002      	b.n	8006808 <HAL_UART_IRQHandler+0x628>
      return;
 8006802:	bf00      	nop
 8006804:	e000      	b.n	8006808 <HAL_UART_IRQHandler+0x628>
    return;
 8006806:	bf00      	nop
  }
}
 8006808:	37e8      	adds	r7, #232	; 0xe8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop

08006810 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006854:	b08c      	sub	sp, #48	; 0x30
 8006856:	af00      	add	r7, sp, #0
 8006858:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	689a      	ldr	r2, [r3, #8]
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	431a      	orrs	r2, r3
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	431a      	orrs	r2, r3
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	4313      	orrs	r3, r2
 8006876:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	4baf      	ldr	r3, [pc, #700]	; (8006b3c <UART_SetConfig+0x2ec>)
 8006880:	4013      	ands	r3, r2
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	6812      	ldr	r2, [r2, #0]
 8006886:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006888:	430b      	orrs	r3, r1
 800688a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	68da      	ldr	r2, [r3, #12]
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4aa4      	ldr	r2, [pc, #656]	; (8006b40 <UART_SetConfig+0x2f0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d004      	beq.n	80068bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068b8:	4313      	orrs	r3, r2
 80068ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80068c6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	6812      	ldr	r2, [r2, #0]
 80068ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068d0:	430b      	orrs	r3, r1
 80068d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068da:	f023 010f 	bic.w	r1, r3, #15
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a95      	ldr	r2, [pc, #596]	; (8006b44 <UART_SetConfig+0x2f4>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d125      	bne.n	8006940 <UART_SetConfig+0xf0>
 80068f4:	2003      	movs	r0, #3
 80068f6:	f7ff fadb 	bl	8005eb0 <LL_RCC_GetUSARTClockSource>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b03      	cmp	r3, #3
 80068fe:	d81b      	bhi.n	8006938 <UART_SetConfig+0xe8>
 8006900:	a201      	add	r2, pc, #4	; (adr r2, 8006908 <UART_SetConfig+0xb8>)
 8006902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006906:	bf00      	nop
 8006908:	08006919 	.word	0x08006919
 800690c:	08006929 	.word	0x08006929
 8006910:	08006921 	.word	0x08006921
 8006914:	08006931 	.word	0x08006931
 8006918:	2301      	movs	r3, #1
 800691a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800691e:	e042      	b.n	80069a6 <UART_SetConfig+0x156>
 8006920:	2302      	movs	r3, #2
 8006922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006926:	e03e      	b.n	80069a6 <UART_SetConfig+0x156>
 8006928:	2304      	movs	r3, #4
 800692a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800692e:	e03a      	b.n	80069a6 <UART_SetConfig+0x156>
 8006930:	2308      	movs	r3, #8
 8006932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006936:	e036      	b.n	80069a6 <UART_SetConfig+0x156>
 8006938:	2310      	movs	r3, #16
 800693a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800693e:	e032      	b.n	80069a6 <UART_SetConfig+0x156>
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a7e      	ldr	r2, [pc, #504]	; (8006b40 <UART_SetConfig+0x2f0>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d12a      	bne.n	80069a0 <UART_SetConfig+0x150>
 800694a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800694e:	f7ff fabf 	bl	8005ed0 <LL_RCC_GetLPUARTClockSource>
 8006952:	4603      	mov	r3, r0
 8006954:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006958:	d01a      	beq.n	8006990 <UART_SetConfig+0x140>
 800695a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800695e:	d81b      	bhi.n	8006998 <UART_SetConfig+0x148>
 8006960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006964:	d00c      	beq.n	8006980 <UART_SetConfig+0x130>
 8006966:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800696a:	d815      	bhi.n	8006998 <UART_SetConfig+0x148>
 800696c:	2b00      	cmp	r3, #0
 800696e:	d003      	beq.n	8006978 <UART_SetConfig+0x128>
 8006970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006974:	d008      	beq.n	8006988 <UART_SetConfig+0x138>
 8006976:	e00f      	b.n	8006998 <UART_SetConfig+0x148>
 8006978:	2300      	movs	r3, #0
 800697a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800697e:	e012      	b.n	80069a6 <UART_SetConfig+0x156>
 8006980:	2302      	movs	r3, #2
 8006982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006986:	e00e      	b.n	80069a6 <UART_SetConfig+0x156>
 8006988:	2304      	movs	r3, #4
 800698a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800698e:	e00a      	b.n	80069a6 <UART_SetConfig+0x156>
 8006990:	2308      	movs	r3, #8
 8006992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006996:	e006      	b.n	80069a6 <UART_SetConfig+0x156>
 8006998:	2310      	movs	r3, #16
 800699a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800699e:	e002      	b.n	80069a6 <UART_SetConfig+0x156>
 80069a0:	2310      	movs	r3, #16
 80069a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a65      	ldr	r2, [pc, #404]	; (8006b40 <UART_SetConfig+0x2f0>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	f040 8097 	bne.w	8006ae0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80069b6:	2b08      	cmp	r3, #8
 80069b8:	d823      	bhi.n	8006a02 <UART_SetConfig+0x1b2>
 80069ba:	a201      	add	r2, pc, #4	; (adr r2, 80069c0 <UART_SetConfig+0x170>)
 80069bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c0:	080069e5 	.word	0x080069e5
 80069c4:	08006a03 	.word	0x08006a03
 80069c8:	080069ed 	.word	0x080069ed
 80069cc:	08006a03 	.word	0x08006a03
 80069d0:	080069f3 	.word	0x080069f3
 80069d4:	08006a03 	.word	0x08006a03
 80069d8:	08006a03 	.word	0x08006a03
 80069dc:	08006a03 	.word	0x08006a03
 80069e0:	080069fb 	.word	0x080069fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069e4:	f7fe fc72 	bl	80052cc <HAL_RCC_GetPCLK1Freq>
 80069e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069ea:	e010      	b.n	8006a0e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069ec:	4b56      	ldr	r3, [pc, #344]	; (8006b48 <UART_SetConfig+0x2f8>)
 80069ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80069f0:	e00d      	b.n	8006a0e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069f2:	f7fe fbeb 	bl	80051cc <HAL_RCC_GetSysClockFreq>
 80069f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069f8:	e009      	b.n	8006a0e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a00:	e005      	b.n	8006a0e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8006a02:	2300      	movs	r3, #0
 8006a04:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006a0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 812a 	beq.w	8006c6a <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1a:	4a4c      	ldr	r2, [pc, #304]	; (8006b4c <UART_SetConfig+0x2fc>)
 8006a1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a20:	461a      	mov	r2, r3
 8006a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a24:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a28:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	4413      	add	r3, r2
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d305      	bcc.n	8006a46 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a40:	69ba      	ldr	r2, [r7, #24]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d903      	bls.n	8006a4e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006a4c:	e10d      	b.n	8006c6a <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a50:	2200      	movs	r2, #0
 8006a52:	60bb      	str	r3, [r7, #8]
 8006a54:	60fa      	str	r2, [r7, #12]
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5a:	4a3c      	ldr	r2, [pc, #240]	; (8006b4c <UART_SetConfig+0x2fc>)
 8006a5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	2200      	movs	r2, #0
 8006a64:	603b      	str	r3, [r7, #0]
 8006a66:	607a      	str	r2, [r7, #4]
 8006a68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a70:	f7f9 fec4 	bl	80007fc <__aeabi_uldivmod>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	4610      	mov	r0, r2
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	f04f 0200 	mov.w	r2, #0
 8006a80:	f04f 0300 	mov.w	r3, #0
 8006a84:	020b      	lsls	r3, r1, #8
 8006a86:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a8a:	0202      	lsls	r2, r0, #8
 8006a8c:	6979      	ldr	r1, [r7, #20]
 8006a8e:	6849      	ldr	r1, [r1, #4]
 8006a90:	0849      	lsrs	r1, r1, #1
 8006a92:	2000      	movs	r0, #0
 8006a94:	460c      	mov	r4, r1
 8006a96:	4605      	mov	r5, r0
 8006a98:	eb12 0804 	adds.w	r8, r2, r4
 8006a9c:	eb43 0905 	adc.w	r9, r3, r5
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	469a      	mov	sl, r3
 8006aa8:	4693      	mov	fp, r2
 8006aaa:	4652      	mov	r2, sl
 8006aac:	465b      	mov	r3, fp
 8006aae:	4640      	mov	r0, r8
 8006ab0:	4649      	mov	r1, r9
 8006ab2:	f7f9 fea3 	bl	80007fc <__aeabi_uldivmod>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	4613      	mov	r3, r2
 8006abc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ac4:	d308      	bcc.n	8006ad8 <UART_SetConfig+0x288>
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006acc:	d204      	bcs.n	8006ad8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6a3a      	ldr	r2, [r7, #32]
 8006ad4:	60da      	str	r2, [r3, #12]
 8006ad6:	e0c8      	b.n	8006c6a <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006ade:	e0c4      	b.n	8006c6a <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ae8:	d16d      	bne.n	8006bc6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006aea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006aee:	3b01      	subs	r3, #1
 8006af0:	2b07      	cmp	r3, #7
 8006af2:	d82d      	bhi.n	8006b50 <UART_SetConfig+0x300>
 8006af4:	a201      	add	r2, pc, #4	; (adr r2, 8006afc <UART_SetConfig+0x2ac>)
 8006af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afa:	bf00      	nop
 8006afc:	08006b1d 	.word	0x08006b1d
 8006b00:	08006b25 	.word	0x08006b25
 8006b04:	08006b51 	.word	0x08006b51
 8006b08:	08006b2b 	.word	0x08006b2b
 8006b0c:	08006b51 	.word	0x08006b51
 8006b10:	08006b51 	.word	0x08006b51
 8006b14:	08006b51 	.word	0x08006b51
 8006b18:	08006b33 	.word	0x08006b33
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b1c:	f7fe fbec 	bl	80052f8 <HAL_RCC_GetPCLK2Freq>
 8006b20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b22:	e01b      	b.n	8006b5c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b24:	4b08      	ldr	r3, [pc, #32]	; (8006b48 <UART_SetConfig+0x2f8>)
 8006b26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b28:	e018      	b.n	8006b5c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b2a:	f7fe fb4f 	bl	80051cc <HAL_RCC_GetSysClockFreq>
 8006b2e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b30:	e014      	b.n	8006b5c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b38:	e010      	b.n	8006b5c <UART_SetConfig+0x30c>
 8006b3a:	bf00      	nop
 8006b3c:	cfff69f3 	.word	0xcfff69f3
 8006b40:	40008000 	.word	0x40008000
 8006b44:	40013800 	.word	0x40013800
 8006b48:	00f42400 	.word	0x00f42400
 8006b4c:	0800fcd4 	.word	0x0800fcd4
      default:
        pclk = 0U;
 8006b50:	2300      	movs	r3, #0
 8006b52:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006b5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f000 8083 	beq.w	8006c6a <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b68:	4a4a      	ldr	r2, [pc, #296]	; (8006c94 <UART_SetConfig+0x444>)
 8006b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b76:	005a      	lsls	r2, r3, #1
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	085b      	lsrs	r3, r3, #1
 8006b7e:	441a      	add	r2, r3
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b88:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	2b0f      	cmp	r3, #15
 8006b8e:	d916      	bls.n	8006bbe <UART_SetConfig+0x36e>
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b96:	d212      	bcs.n	8006bbe <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b98:	6a3b      	ldr	r3, [r7, #32]
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	f023 030f 	bic.w	r3, r3, #15
 8006ba0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	085b      	lsrs	r3, r3, #1
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	f003 0307 	and.w	r3, r3, #7
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	8bfb      	ldrh	r3, [r7, #30]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	8bfa      	ldrh	r2, [r7, #30]
 8006bba:	60da      	str	r2, [r3, #12]
 8006bbc:	e055      	b.n	8006c6a <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006bc4:	e051      	b.n	8006c6a <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	2b07      	cmp	r3, #7
 8006bce:	d822      	bhi.n	8006c16 <UART_SetConfig+0x3c6>
 8006bd0:	a201      	add	r2, pc, #4	; (adr r2, 8006bd8 <UART_SetConfig+0x388>)
 8006bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd6:	bf00      	nop
 8006bd8:	08006bf9 	.word	0x08006bf9
 8006bdc:	08006c01 	.word	0x08006c01
 8006be0:	08006c17 	.word	0x08006c17
 8006be4:	08006c07 	.word	0x08006c07
 8006be8:	08006c17 	.word	0x08006c17
 8006bec:	08006c17 	.word	0x08006c17
 8006bf0:	08006c17 	.word	0x08006c17
 8006bf4:	08006c0f 	.word	0x08006c0f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bf8:	f7fe fb7e 	bl	80052f8 <HAL_RCC_GetPCLK2Freq>
 8006bfc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006bfe:	e010      	b.n	8006c22 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c00:	4b25      	ldr	r3, [pc, #148]	; (8006c98 <UART_SetConfig+0x448>)
 8006c02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c04:	e00d      	b.n	8006c22 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c06:	f7fe fae1 	bl	80051cc <HAL_RCC_GetSysClockFreq>
 8006c0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c0c:	e009      	b.n	8006c22 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c14:	e005      	b.n	8006c22 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006c20:	bf00      	nop
    }

    if (pclk != 0U)
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d020      	beq.n	8006c6a <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	4a19      	ldr	r2, [pc, #100]	; (8006c94 <UART_SetConfig+0x444>)
 8006c2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c32:	461a      	mov	r2, r3
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	085b      	lsrs	r3, r3, #1
 8006c40:	441a      	add	r2, r3
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	2b0f      	cmp	r3, #15
 8006c50:	d908      	bls.n	8006c64 <UART_SetConfig+0x414>
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c58:	d204      	bcs.n	8006c64 <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	6a3a      	ldr	r2, [r7, #32]
 8006c60:	60da      	str	r2, [r3, #12]
 8006c62:	e002      	b.n	8006c6a <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	2200      	movs	r2, #0
 8006c84:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006c86:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3730      	adds	r7, #48	; 0x30
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c94:	0800fcd4 	.word	0x0800fcd4
 8006c98:	00f42400 	.word	0x00f42400

08006c9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca8:	f003 0301 	and.w	r3, r3, #1
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00a      	beq.n	8006cc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00a      	beq.n	8006ce8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cec:	f003 0304 	and.w	r3, r3, #4
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00a      	beq.n	8006d0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0e:	f003 0308 	and.w	r3, r3, #8
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00a      	beq.n	8006d2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d30:	f003 0310 	and.w	r3, r3, #16
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00a      	beq.n	8006d4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d52:	f003 0320 	and.w	r3, r3, #32
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00a      	beq.n	8006d70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	430a      	orrs	r2, r1
 8006d6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d01a      	beq.n	8006db2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d9a:	d10a      	bne.n	8006db2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	430a      	orrs	r2, r1
 8006db0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00a      	beq.n	8006dd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	605a      	str	r2, [r3, #4]
  }
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af02      	add	r7, sp, #8
 8006de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006df0:	f7fc faf0 	bl	80033d4 <HAL_GetTick>
 8006df4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0308 	and.w	r3, r3, #8
 8006e00:	2b08      	cmp	r3, #8
 8006e02:	d10e      	bne.n	8006e22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f82f 	bl	8006e76 <UART_WaitOnFlagUntilTimeout>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d001      	beq.n	8006e22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e025      	b.n	8006e6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0304 	and.w	r3, r3, #4
 8006e2c:	2b04      	cmp	r3, #4
 8006e2e:	d10e      	bne.n	8006e4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f819 	bl	8006e76 <UART_WaitOnFlagUntilTimeout>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e00f      	b.n	8006e6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2220      	movs	r2, #32
 8006e52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b09c      	sub	sp, #112	; 0x70
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	60f8      	str	r0, [r7, #12]
 8006e7e:	60b9      	str	r1, [r7, #8]
 8006e80:	603b      	str	r3, [r7, #0]
 8006e82:	4613      	mov	r3, r2
 8006e84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e86:	e0a9      	b.n	8006fdc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e8e:	f000 80a5 	beq.w	8006fdc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e92:	f7fc fa9f 	bl	80033d4 <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d302      	bcc.n	8006ea8 <UART_WaitOnFlagUntilTimeout+0x32>
 8006ea2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d140      	bne.n	8006f2a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eb0:	e853 3f00 	ldrex	r3, [r3]
 8006eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ebc:	667b      	str	r3, [r7, #100]	; 0x64
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ec8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ecc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ece:	e841 2300 	strex	r3, r2, [r1]
 8006ed2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1e6      	bne.n	8006ea8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3308      	adds	r3, #8
 8006ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ee4:	e853 3f00 	ldrex	r3, [r3]
 8006ee8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eec:	f023 0301 	bic.w	r3, r3, #1
 8006ef0:	663b      	str	r3, [r7, #96]	; 0x60
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3308      	adds	r3, #8
 8006ef8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006efa:	64ba      	str	r2, [r7, #72]	; 0x48
 8006efc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f02:	e841 2300 	strex	r3, r2, [r1]
 8006f06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1e5      	bne.n	8006eda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2220      	movs	r2, #32
 8006f12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2220      	movs	r2, #32
 8006f1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e069      	b.n	8006ffe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0304 	and.w	r3, r3, #4
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d051      	beq.n	8006fdc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f46:	d149      	bne.n	8006fdc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f50:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5a:	e853 3f00 	ldrex	r3, [r3]
 8006f5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f70:	637b      	str	r3, [r7, #52]	; 0x34
 8006f72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f78:	e841 2300 	strex	r3, r2, [r1]
 8006f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1e6      	bne.n	8006f52 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3308      	adds	r3, #8
 8006f8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	e853 3f00 	ldrex	r3, [r3]
 8006f92:	613b      	str	r3, [r7, #16]
   return(result);
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	f023 0301 	bic.w	r3, r3, #1
 8006f9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3308      	adds	r3, #8
 8006fa2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006fa4:	623a      	str	r2, [r7, #32]
 8006fa6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa8:	69f9      	ldr	r1, [r7, #28]
 8006faa:	6a3a      	ldr	r2, [r7, #32]
 8006fac:	e841 2300 	strex	r3, r2, [r1]
 8006fb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1e5      	bne.n	8006f84 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2220      	movs	r2, #32
 8006fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2220      	movs	r2, #32
 8006fcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e010      	b.n	8006ffe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	69da      	ldr	r2, [r3, #28]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	bf0c      	ite	eq
 8006fec:	2301      	moveq	r3, #1
 8006fee:	2300      	movne	r3, #0
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	79fb      	ldrb	r3, [r7, #7]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	f43f af46 	beq.w	8006e88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3770      	adds	r7, #112	; 0x70
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007006:	b480      	push	{r7}
 8007008:	b08f      	sub	sp, #60	; 0x3c
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007014:	6a3b      	ldr	r3, [r7, #32]
 8007016:	e853 3f00 	ldrex	r3, [r3]
 800701a:	61fb      	str	r3, [r7, #28]
   return(result);
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007022:	637b      	str	r3, [r7, #52]	; 0x34
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	461a      	mov	r2, r3
 800702a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800702c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800702e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007034:	e841 2300 	strex	r3, r2, [r1]
 8007038:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800703a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1e6      	bne.n	800700e <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3308      	adds	r3, #8
 8007046:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	e853 3f00 	ldrex	r3, [r3]
 800704e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007056:	633b      	str	r3, [r7, #48]	; 0x30
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3308      	adds	r3, #8
 800705e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007060:	61ba      	str	r2, [r7, #24]
 8007062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007064:	6979      	ldr	r1, [r7, #20]
 8007066:	69ba      	ldr	r2, [r7, #24]
 8007068:	e841 2300 	strex	r3, r2, [r1]
 800706c:	613b      	str	r3, [r7, #16]
   return(result);
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1e5      	bne.n	8007040 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2220      	movs	r2, #32
 8007078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800707c:	bf00      	nop
 800707e:	373c      	adds	r7, #60	; 0x3c
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007088:	b480      	push	{r7}
 800708a:	b095      	sub	sp, #84	; 0x54
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007098:	e853 3f00 	ldrex	r3, [r3]
 800709c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800709e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	461a      	mov	r2, r3
 80070ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ae:	643b      	str	r3, [r7, #64]	; 0x40
 80070b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070b6:	e841 2300 	strex	r3, r2, [r1]
 80070ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1e6      	bne.n	8007090 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3308      	adds	r3, #8
 80070c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ca:	6a3b      	ldr	r3, [r7, #32]
 80070cc:	e853 3f00 	ldrex	r3, [r3]
 80070d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070d8:	f023 0301 	bic.w	r3, r3, #1
 80070dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	3308      	adds	r3, #8
 80070e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070ee:	e841 2300 	strex	r3, r2, [r1]
 80070f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1e3      	bne.n	80070c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d118      	bne.n	8007134 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	e853 3f00 	ldrex	r3, [r3]
 800710e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	f023 0310 	bic.w	r3, r3, #16
 8007116:	647b      	str	r3, [r7, #68]	; 0x44
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	461a      	mov	r2, r3
 800711e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007120:	61bb      	str	r3, [r7, #24]
 8007122:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007124:	6979      	ldr	r1, [r7, #20]
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	e841 2300 	strex	r3, r2, [r1]
 800712c:	613b      	str	r3, [r7, #16]
   return(result);
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1e6      	bne.n	8007102 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2220      	movs	r2, #32
 8007138:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007148:	bf00      	nop
 800714a:	3754      	adds	r7, #84	; 0x54
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b090      	sub	sp, #64	; 0x40
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007160:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0320 	and.w	r3, r3, #32
 800716c:	2b00      	cmp	r3, #0
 800716e:	d137      	bne.n	80071e0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007172:	2200      	movs	r2, #0
 8007174:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3308      	adds	r3, #8
 800717e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	e853 3f00 	ldrex	r3, [r3]
 8007186:	623b      	str	r3, [r7, #32]
   return(result);
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800718e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	3308      	adds	r3, #8
 8007196:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007198:	633a      	str	r2, [r7, #48]	; 0x30
 800719a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800719e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071a0:	e841 2300 	strex	r3, r2, [r1]
 80071a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1e5      	bne.n	8007178 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	e853 3f00 	ldrex	r3, [r3]
 80071b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071c0:	637b      	str	r3, [r7, #52]	; 0x34
 80071c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	461a      	mov	r2, r3
 80071c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ca:	61fb      	str	r3, [r7, #28]
 80071cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ce:	69b9      	ldr	r1, [r7, #24]
 80071d0:	69fa      	ldr	r2, [r7, #28]
 80071d2:	e841 2300 	strex	r3, r2, [r1]
 80071d6:	617b      	str	r3, [r7, #20]
   return(result);
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1e6      	bne.n	80071ac <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071de:	e002      	b.n	80071e6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80071e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80071e2:	f7fb f93d 	bl	8002460 <HAL_UART_TxCpltCallback>
}
 80071e6:	bf00      	nop
 80071e8:	3740      	adds	r7, #64	; 0x40
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b084      	sub	sp, #16
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f7ff fb07 	bl	8006810 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007202:	bf00      	nop
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b086      	sub	sp, #24
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007216:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800721e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007226:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007232:	2b80      	cmp	r3, #128	; 0x80
 8007234:	d109      	bne.n	800724a <UART_DMAError+0x40>
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	2b21      	cmp	r3, #33	; 0x21
 800723a:	d106      	bne.n	800724a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	2200      	movs	r2, #0
 8007240:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007244:	6978      	ldr	r0, [r7, #20]
 8007246:	f7ff fede 	bl	8007006 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007254:	2b40      	cmp	r3, #64	; 0x40
 8007256:	d109      	bne.n	800726c <UART_DMAError+0x62>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2b22      	cmp	r3, #34	; 0x22
 800725c:	d106      	bne.n	800726c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2200      	movs	r2, #0
 8007262:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007266:	6978      	ldr	r0, [r7, #20]
 8007268:	f7ff ff0e 	bl	8007088 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007272:	f043 0210 	orr.w	r2, r3, #16
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800727c:	6978      	ldr	r0, [r7, #20]
 800727e:	f7ff fad1 	bl	8006824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007282:	bf00      	nop
 8007284:	3718      	adds	r7, #24
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007296:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f7ff fabb 	bl	8006824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072ae:	bf00      	nop
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b088      	sub	sp, #32
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	e853 3f00 	ldrex	r3, [r3]
 80072ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072d2:	61fb      	str	r3, [r7, #28]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	461a      	mov	r2, r3
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	61bb      	str	r3, [r7, #24]
 80072de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e0:	6979      	ldr	r1, [r7, #20]
 80072e2:	69ba      	ldr	r2, [r7, #24]
 80072e4:	e841 2300 	strex	r3, r2, [r1]
 80072e8:	613b      	str	r3, [r7, #16]
   return(result);
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1e6      	bne.n	80072be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2220      	movs	r2, #32
 80072f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7fb f8ae 	bl	8002460 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007304:	bf00      	nop
 8007306:	3720      	adds	r7, #32
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800733c:	bf00      	nop
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007356:	2b01      	cmp	r3, #1
 8007358:	d101      	bne.n	800735e <HAL_UARTEx_DisableFifoMode+0x16>
 800735a:	2302      	movs	r3, #2
 800735c:	e027      	b.n	80073ae <HAL_UARTEx_DisableFifoMode+0x66>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2224      	movs	r2, #36	; 0x24
 800736a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f022 0201 	bic.w	r2, r2, #1
 8007384:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800738c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2220      	movs	r2, #32
 80073a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b084      	sub	sp, #16
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d101      	bne.n	80073d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80073ce:	2302      	movs	r3, #2
 80073d0:	e02d      	b.n	800742e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2224      	movs	r2, #36	; 0x24
 80073de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f022 0201 	bic.w	r2, r2, #1
 80073f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	683a      	ldr	r2, [r7, #0]
 800740a:	430a      	orrs	r2, r1
 800740c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f850 	bl	80074b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2220      	movs	r2, #32
 8007420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b084      	sub	sp, #16
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
 800743e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007446:	2b01      	cmp	r3, #1
 8007448:	d101      	bne.n	800744e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800744a:	2302      	movs	r3, #2
 800744c:	e02d      	b.n	80074aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2224      	movs	r2, #36	; 0x24
 800745a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f022 0201 	bic.w	r2, r2, #1
 8007474:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	683a      	ldr	r2, [r7, #0]
 8007486:	430a      	orrs	r2, r1
 8007488:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 f812 	bl	80074b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2220      	movs	r2, #32
 800749c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
	...

080074b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d108      	bne.n	80074d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80074d4:	e031      	b.n	800753a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80074d6:	2308      	movs	r3, #8
 80074d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80074da:	2308      	movs	r3, #8
 80074dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	0e5b      	lsrs	r3, r3, #25
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	f003 0307 	and.w	r3, r3, #7
 80074ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	0f5b      	lsrs	r3, r3, #29
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	f003 0307 	and.w	r3, r3, #7
 80074fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074fe:	7bbb      	ldrb	r3, [r7, #14]
 8007500:	7b3a      	ldrb	r2, [r7, #12]
 8007502:	4911      	ldr	r1, [pc, #68]	; (8007548 <UARTEx_SetNbDataToProcess+0x94>)
 8007504:	5c8a      	ldrb	r2, [r1, r2]
 8007506:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800750a:	7b3a      	ldrb	r2, [r7, #12]
 800750c:	490f      	ldr	r1, [pc, #60]	; (800754c <UARTEx_SetNbDataToProcess+0x98>)
 800750e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007510:	fb93 f3f2 	sdiv	r3, r3, r2
 8007514:	b29a      	uxth	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800751c:	7bfb      	ldrb	r3, [r7, #15]
 800751e:	7b7a      	ldrb	r2, [r7, #13]
 8007520:	4909      	ldr	r1, [pc, #36]	; (8007548 <UARTEx_SetNbDataToProcess+0x94>)
 8007522:	5c8a      	ldrb	r2, [r1, r2]
 8007524:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007528:	7b7a      	ldrb	r2, [r7, #13]
 800752a:	4908      	ldr	r1, [pc, #32]	; (800754c <UARTEx_SetNbDataToProcess+0x98>)
 800752c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800752e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007532:	b29a      	uxth	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800753a:	bf00      	nop
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	0800fcec 	.word	0x0800fcec
 800754c:	0800fcf4 	.word	0x0800fcf4

08007550 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b088      	sub	sp, #32
 8007554:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007556:	2300      	movs	r3, #0
 8007558:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800755a:	f107 0308 	add.w	r3, r7, #8
 800755e:	2218      	movs	r2, #24
 8007560:	2100      	movs	r1, #0
 8007562:	4618      	mov	r0, r3
 8007564:	f001 f8d8 	bl	8008718 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007568:	233f      	movs	r3, #63	; 0x3f
 800756a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800756c:	2381      	movs	r3, #129	; 0x81
 800756e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007570:	1dfb      	adds	r3, r7, #7
 8007572:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007574:	2301      	movs	r3, #1
 8007576:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007578:	f107 0308 	add.w	r3, r7, #8
 800757c:	2100      	movs	r1, #0
 800757e:	4618      	mov	r0, r3
 8007580:	f001 fb54 	bl	8008c2c <hci_send_req>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	da01      	bge.n	800758e <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800758a:	23ff      	movs	r3, #255	; 0xff
 800758c:	e000      	b.n	8007590 <aci_gap_set_non_discoverable+0x40>
  return status;
 800758e:	79fb      	ldrb	r3, [r7, #7]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3720      	adds	r7, #32
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8007598:	b5b0      	push	{r4, r5, r7, lr}
 800759a:	b0ce      	sub	sp, #312	; 0x138
 800759c:	af00      	add	r7, sp, #0
 800759e:	4605      	mov	r5, r0
 80075a0:	460c      	mov	r4, r1
 80075a2:	4610      	mov	r0, r2
 80075a4:	4619      	mov	r1, r3
 80075a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80075aa:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80075ae:	462a      	mov	r2, r5
 80075b0:	701a      	strb	r2, [r3, #0]
 80075b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80075b6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80075ba:	4622      	mov	r2, r4
 80075bc:	801a      	strh	r2, [r3, #0]
 80075be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80075c2:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80075c6:	4602      	mov	r2, r0
 80075c8:	801a      	strh	r2, [r3, #0]
 80075ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80075ce:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80075d2:	460a      	mov	r2, r1
 80075d4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80075d6:	f107 0310 	add.w	r3, r7, #16
 80075da:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80075de:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80075e2:	3308      	adds	r3, #8
 80075e4:	f107 0210 	add.w	r2, r7, #16
 80075e8:	4413      	add	r3, r2
 80075ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80075ee:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80075f2:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80075f6:	4413      	add	r3, r2
 80075f8:	3309      	adds	r3, #9
 80075fa:	f107 0210 	add.w	r2, r7, #16
 80075fe:	4413      	add	r3, r2
 8007600:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007604:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007608:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800760c:	2200      	movs	r2, #0
 800760e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007610:	2300      	movs	r3, #0
 8007612:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8007616:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800761a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800761e:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8007622:	7812      	ldrb	r2, [r2, #0]
 8007624:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007626:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800762a:	3301      	adds	r3, #1
 800762c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8007630:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007634:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007638:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800763c:	8812      	ldrh	r2, [r2, #0]
 800763e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8007642:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007646:	3302      	adds	r3, #2
 8007648:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800764c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007650:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007654:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8007658:	8812      	ldrh	r2, [r2, #0]
 800765a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800765e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007662:	3302      	adds	r3, #2
 8007664:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8007668:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800766c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007670:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007674:	7812      	ldrb	r2, [r2, #0]
 8007676:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007678:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800767c:	3301      	adds	r3, #1
 800767e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8007682:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007686:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800768a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800768c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007690:	3301      	adds	r3, #1
 8007692:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8007696:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800769a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800769e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80076a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076a4:	3301      	adds	r3, #1
 80076a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80076aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80076ae:	3308      	adds	r3, #8
 80076b0:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80076b4:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80076b8:	4618      	mov	r0, r3
 80076ba:	f001 f81d 	bl	80086f8 <Osal_MemCpy>
    index_input += Local_Name_Length;
 80076be:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80076c2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80076c6:	4413      	add	r3, r2
 80076c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80076cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80076d0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80076d4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80076d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076da:	3301      	adds	r3, #1
 80076dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80076e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80076e4:	3301      	adds	r3, #1
 80076e6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80076ea:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80076ee:	4618      	mov	r0, r3
 80076f0:	f001 f802 	bl	80086f8 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80076f4:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80076f8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80076fc:	4413      	add	r3, r2
 80076fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8007702:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007706:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800770a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800770c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007710:	3302      	adds	r3, #2
 8007712:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8007716:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800771a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800771e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007720:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007724:	3302      	adds	r3, #2
 8007726:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800772a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800772e:	2218      	movs	r2, #24
 8007730:	2100      	movs	r1, #0
 8007732:	4618      	mov	r0, r3
 8007734:	f000 fff0 	bl	8008718 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007738:	233f      	movs	r3, #63	; 0x3f
 800773a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800773e:	2383      	movs	r3, #131	; 0x83
 8007740:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007744:	f107 0310 	add.w	r3, r7, #16
 8007748:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800774c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007750:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007754:	f107 030f 	add.w	r3, r7, #15
 8007758:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800775c:	2301      	movs	r3, #1
 800775e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007762:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007766:	2100      	movs	r1, #0
 8007768:	4618      	mov	r0, r3
 800776a:	f001 fa5f 	bl	8008c2c <hci_send_req>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	da01      	bge.n	8007778 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8007774:	23ff      	movs	r3, #255	; 0xff
 8007776:	e004      	b.n	8007782 <aci_gap_set_discoverable+0x1ea>
  return status;
 8007778:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800777c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007780:	781b      	ldrb	r3, [r3, #0]
}
 8007782:	4618      	mov	r0, r3
 8007784:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007788:	46bd      	mov	sp, r7
 800778a:	bdb0      	pop	{r4, r5, r7, pc}

0800778c <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b0cc      	sub	sp, #304	; 0x130
 8007790:	af00      	add	r7, sp, #0
 8007792:	4602      	mov	r2, r0
 8007794:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007798:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800779c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800779e:	f107 0310 	add.w	r3, r7, #16
 80077a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80077a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077aa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80077ae:	2200      	movs	r2, #0
 80077b0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80077b2:	2300      	movs	r3, #0
 80077b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80077b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80077c0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80077c4:	7812      	ldrb	r2, [r2, #0]
 80077c6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80077c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077cc:	3301      	adds	r3, #1
 80077ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80077d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077d6:	2218      	movs	r2, #24
 80077d8:	2100      	movs	r1, #0
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 ff9c 	bl	8008718 <Osal_MemSet>
  rq.ogf = 0x3f;
 80077e0:	233f      	movs	r3, #63	; 0x3f
 80077e2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80077e6:	2385      	movs	r3, #133	; 0x85
 80077e8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80077ec:	f107 0310 	add.w	r3, r7, #16
 80077f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80077f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80077fc:	f107 030f 	add.w	r3, r7, #15
 8007800:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007804:	2301      	movs	r3, #1
 8007806:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800780a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800780e:	2100      	movs	r1, #0
 8007810:	4618      	mov	r0, r3
 8007812:	f001 fa0b 	bl	8008c2c <hci_send_req>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	da01      	bge.n	8007820 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800781c:	23ff      	movs	r3, #255	; 0xff
 800781e:	e004      	b.n	800782a <aci_gap_set_io_capability+0x9e>
  return status;
 8007820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007824:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007828:	781b      	ldrb	r3, [r3, #0]
}
 800782a:	4618      	mov	r0, r3
 800782c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8007834:	b5b0      	push	{r4, r5, r7, lr}
 8007836:	b0cc      	sub	sp, #304	; 0x130
 8007838:	af00      	add	r7, sp, #0
 800783a:	4605      	mov	r5, r0
 800783c:	460c      	mov	r4, r1
 800783e:	4610      	mov	r0, r2
 8007840:	4619      	mov	r1, r3
 8007842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007846:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800784a:	462a      	mov	r2, r5
 800784c:	701a      	strb	r2, [r3, #0]
 800784e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007852:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007856:	4622      	mov	r2, r4
 8007858:	701a      	strb	r2, [r3, #0]
 800785a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800785e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007862:	4602      	mov	r2, r0
 8007864:	701a      	strb	r2, [r3, #0]
 8007866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800786a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800786e:	460a      	mov	r2, r1
 8007870:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007872:	f107 0310 	add.w	r3, r7, #16
 8007876:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800787a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800787e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007882:	2200      	movs	r2, #0
 8007884:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007886:	2300      	movs	r3, #0
 8007888:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800788c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007890:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007894:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007898:	7812      	ldrb	r2, [r2, #0]
 800789a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800789c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078a0:	3301      	adds	r3, #1
 80078a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80078a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80078ae:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80078b2:	7812      	ldrb	r2, [r2, #0]
 80078b4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80078b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078ba:	3301      	adds	r3, #1
 80078bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80078c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80078c8:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80078cc:	7812      	ldrb	r2, [r2, #0]
 80078ce:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80078d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078d4:	3301      	adds	r3, #1
 80078d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80078da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80078e2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80078e6:	7812      	ldrb	r2, [r2, #0]
 80078e8:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80078ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078ee:	3301      	adds	r3, #1
 80078f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80078f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078f8:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80078fc:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80078fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007902:	3301      	adds	r3, #1
 8007904:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8007908:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800790c:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007910:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007912:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007916:	3301      	adds	r3, #1
 8007918:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800791c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007920:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007924:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007926:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800792a:	3301      	adds	r3, #1
 800792c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8007930:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007934:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8007938:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800793c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007940:	3304      	adds	r3, #4
 8007942:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8007946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800794a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800794e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007950:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007954:	3301      	adds	r3, #1
 8007956:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800795a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800795e:	2218      	movs	r2, #24
 8007960:	2100      	movs	r1, #0
 8007962:	4618      	mov	r0, r3
 8007964:	f000 fed8 	bl	8008718 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007968:	233f      	movs	r3, #63	; 0x3f
 800796a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800796e:	2386      	movs	r3, #134	; 0x86
 8007970:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007974:	f107 0310 	add.w	r3, r7, #16
 8007978:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800797c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007980:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007984:	f107 030f 	add.w	r3, r7, #15
 8007988:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800798c:	2301      	movs	r3, #1
 800798e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007992:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007996:	2100      	movs	r1, #0
 8007998:	4618      	mov	r0, r3
 800799a:	f001 f947 	bl	8008c2c <hci_send_req>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	da01      	bge.n	80079a8 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80079a4:	23ff      	movs	r3, #255	; 0xff
 80079a6:	e004      	b.n	80079b2 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80079a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ac:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80079b0:	781b      	ldrb	r3, [r3, #0]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bdb0      	pop	{r4, r5, r7, pc}

080079bc <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b0cc      	sub	sp, #304	; 0x130
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	4602      	mov	r2, r0
 80079c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079cc:	6019      	str	r1, [r3, #0]
 80079ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80079d6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80079d8:	f107 0310 	add.w	r3, r7, #16
 80079dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80079e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80079e8:	2200      	movs	r2, #0
 80079ea:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80079ec:	2300      	movs	r3, #0
 80079ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80079f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80079fa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80079fe:	8812      	ldrh	r2, [r2, #0]
 8007a00:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007a02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a06:	3302      	adds	r3, #2
 8007a08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8007a0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a10:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007a14:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8007a18:	6812      	ldr	r2, [r2, #0]
 8007a1a:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8007a1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a22:	3304      	adds	r3, #4
 8007a24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a2c:	2218      	movs	r2, #24
 8007a2e:	2100      	movs	r1, #0
 8007a30:	4618      	mov	r0, r3
 8007a32:	f000 fe71 	bl	8008718 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007a36:	233f      	movs	r3, #63	; 0x3f
 8007a38:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8007a3c:	2388      	movs	r3, #136	; 0x88
 8007a3e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007a42:	f107 0310 	add.w	r3, r7, #16
 8007a46:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007a4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a4e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007a52:	f107 030f 	add.w	r3, r7, #15
 8007a56:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a64:	2100      	movs	r1, #0
 8007a66:	4618      	mov	r0, r3
 8007a68:	f001 f8e0 	bl	8008c2c <hci_send_req>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	da01      	bge.n	8007a76 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8007a72:	23ff      	movs	r3, #255	; 0xff
 8007a74:	e004      	b.n	8007a80 <aci_gap_pass_key_resp+0xc4>
  return status;
 8007a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a7a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007a7e:	781b      	ldrb	r3, [r3, #0]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8007a8a:	b590      	push	{r4, r7, lr}
 8007a8c:	b0cd      	sub	sp, #308	; 0x134
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	4604      	mov	r4, r0
 8007a92:	4608      	mov	r0, r1
 8007a94:	4611      	mov	r1, r2
 8007a96:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007a9a:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8007a9e:	6013      	str	r3, [r2, #0]
 8007aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aa4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007aa8:	4622      	mov	r2, r4
 8007aaa:	701a      	strb	r2, [r3, #0]
 8007aac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ab0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	701a      	strb	r2, [r3, #0]
 8007ab8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007abc:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007ac0:	460a      	mov	r2, r1
 8007ac2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8007ac4:	f107 0310 	add.w	r3, r7, #16
 8007ac8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007acc:	f107 0308 	add.w	r3, r7, #8
 8007ad0:	2207      	movs	r2, #7
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f000 fe1f 	bl	8008718 <Osal_MemSet>
  int index_input = 0;
 8007ada:	2300      	movs	r3, #0
 8007adc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8007ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ae4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ae8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007aec:	7812      	ldrb	r2, [r2, #0]
 8007aee:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007af0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007af4:	3301      	adds	r3, #1
 8007af6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8007afa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007afe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b02:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007b06:	7812      	ldrb	r2, [r2, #0]
 8007b08:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007b0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b0e:	3301      	adds	r3, #1
 8007b10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8007b14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b18:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b1c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007b20:	7812      	ldrb	r2, [r2, #0]
 8007b22:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007b24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b28:	3301      	adds	r3, #1
 8007b2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b32:	2218      	movs	r2, #24
 8007b34:	2100      	movs	r1, #0
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 fdee 	bl	8008718 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007b3c:	233f      	movs	r3, #63	; 0x3f
 8007b3e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8007b42:	238a      	movs	r3, #138	; 0x8a
 8007b44:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007b48:	f107 0310 	add.w	r3, r7, #16
 8007b4c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007b50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b54:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007b58:	f107 0308 	add.w	r3, r7, #8
 8007b5c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007b60:	2307      	movs	r3, #7
 8007b62:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007b66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f001 f85d 	bl	8008c2c <hci_send_req>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	da01      	bge.n	8007b7c <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8007b78:	23ff      	movs	r3, #255	; 0xff
 8007b7a:	e02e      	b.n	8007bda <aci_gap_init+0x150>
  if ( resp.Status )
 8007b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b80:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d005      	beq.n	8007b96 <aci_gap_init+0x10c>
    return resp.Status;
 8007b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b8e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	e021      	b.n	8007bda <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8007b96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b9a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007b9e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8007bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007bb8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007bc2:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8007bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007bcc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007bd6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd90      	pop	{r4, r7, pc}

08007be4 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b0cc      	sub	sp, #304	; 0x130
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	4602      	mov	r2, r0
 8007bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bf4:	6019      	str	r1, [r3, #0]
 8007bf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bfa:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007bfe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8007c00:	f107 0310 	add.w	r3, r7, #16
 8007c04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c0c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007c10:	2200      	movs	r2, #0
 8007c12:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007c14:	2300      	movs	r3, #0
 8007c16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8007c1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c1e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c22:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007c26:	7812      	ldrb	r2, [r2, #0]
 8007c28:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007c2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c2e:	3301      	adds	r3, #1
 8007c30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8007c34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c38:	1c58      	adds	r0, r3, #1
 8007c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c3e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007c42:	781a      	ldrb	r2, [r3, #0]
 8007c44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c4c:	6819      	ldr	r1, [r3, #0]
 8007c4e:	f000 fd53 	bl	80086f8 <Osal_MemCpy>
  index_input += AdvDataLen;
 8007c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c56:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007c60:	4413      	add	r3, r2
 8007c62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c6a:	2218      	movs	r2, #24
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f000 fd52 	bl	8008718 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007c74:	233f      	movs	r3, #63	; 0x3f
 8007c76:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8007c7a:	238e      	movs	r3, #142	; 0x8e
 8007c7c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007c80:	f107 0310 	add.w	r3, r7, #16
 8007c84:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007c88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c8c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007c90:	f107 030f 	add.w	r3, r7, #15
 8007c94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007c9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f000 ffc1 	bl	8008c2c <hci_send_req>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	da01      	bge.n	8007cb4 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8007cb0:	23ff      	movs	r3, #255	; 0xff
 8007cb2:	e004      	b.n	8007cbe <aci_gap_update_adv_data+0xda>
  return status;
 8007cb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007cbc:	781b      	ldrb	r3, [r3, #0]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b088      	sub	sp, #32
 8007ccc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007cd2:	f107 0308 	add.w	r3, r7, #8
 8007cd6:	2218      	movs	r2, #24
 8007cd8:	2100      	movs	r1, #0
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f000 fd1c 	bl	8008718 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007ce0:	233f      	movs	r3, #63	; 0x3f
 8007ce2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8007ce4:	2392      	movs	r3, #146	; 0x92
 8007ce6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007ce8:	1dfb      	adds	r3, r7, #7
 8007cea:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007cec:	2301      	movs	r3, #1
 8007cee:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007cf0:	f107 0308 	add.w	r3, r7, #8
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 ff98 	bl	8008c2c <hci_send_req>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	da01      	bge.n	8007d06 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007d02:	23ff      	movs	r3, #255	; 0xff
 8007d04:	e000      	b.n	8007d08 <aci_gap_configure_whitelist+0x40>
  return status;
 8007d06:	79fb      	ldrb	r3, [r7, #7]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3720      	adds	r7, #32
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b0cc      	sub	sp, #304	; 0x130
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	4602      	mov	r2, r0
 8007d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d1c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007d20:	801a      	strh	r2, [r3, #0]
 8007d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d26:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007d2a:	460a      	mov	r2, r1
 8007d2c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8007d2e:	f107 0310 	add.w	r3, r7, #16
 8007d32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d3a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007d3e:	2200      	movs	r2, #0
 8007d40:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007d42:	2300      	movs	r3, #0
 8007d44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007d48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d4c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d50:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007d54:	8812      	ldrh	r2, [r2, #0]
 8007d56:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007d58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d5c:	3302      	adds	r3, #2
 8007d5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8007d62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d66:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d6a:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007d6e:	7812      	ldrb	r2, [r2, #0]
 8007d70:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007d72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d76:	3301      	adds	r3, #1
 8007d78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d7c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d80:	2218      	movs	r2, #24
 8007d82:	2100      	movs	r1, #0
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 fcc7 	bl	8008718 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007d8a:	233f      	movs	r3, #63	; 0x3f
 8007d8c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8007d90:	23a5      	movs	r3, #165	; 0xa5
 8007d92:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007d96:	f107 0310 	add.w	r3, r7, #16
 8007d9a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007d9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007da2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007da6:	f107 030f 	add.w	r3, r7, #15
 8007daa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007dae:	2301      	movs	r3, #1
 8007db0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007db4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007db8:	2100      	movs	r1, #0
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f000 ff36 	bl	8008c2c <hci_send_req>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	da01      	bge.n	8007dca <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8007dc6:	23ff      	movs	r3, #255	; 0xff
 8007dc8:	e004      	b.n	8007dd4 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8007dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dce:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007dd2:	781b      	ldrb	r3, [r3, #0]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b088      	sub	sp, #32
 8007de2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007de4:	2300      	movs	r3, #0
 8007de6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007de8:	f107 0308 	add.w	r3, r7, #8
 8007dec:	2218      	movs	r2, #24
 8007dee:	2100      	movs	r1, #0
 8007df0:	4618      	mov	r0, r3
 8007df2:	f000 fc91 	bl	8008718 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007df6:	233f      	movs	r3, #63	; 0x3f
 8007df8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8007dfa:	f240 1301 	movw	r3, #257	; 0x101
 8007dfe:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007e00:	1dfb      	adds	r3, r7, #7
 8007e02:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007e04:	2301      	movs	r3, #1
 8007e06:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e08:	f107 0308 	add.w	r3, r7, #8
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f000 ff0c 	bl	8008c2c <hci_send_req>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	da01      	bge.n	8007e1e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8007e1a:	23ff      	movs	r3, #255	; 0xff
 8007e1c:	e000      	b.n	8007e20 <aci_gatt_init+0x42>
  return status;
 8007e1e:	79fb      	ldrb	r3, [r7, #7]
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3720      	adds	r7, #32
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8007e28:	b590      	push	{r4, r7, lr}
 8007e2a:	b0cf      	sub	sp, #316	; 0x13c
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	4604      	mov	r4, r0
 8007e30:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8007e34:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8007e38:	6001      	str	r1, [r0, #0]
 8007e3a:	4610      	mov	r0, r2
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007e42:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007e46:	4622      	mov	r2, r4
 8007e48:	701a      	strb	r2, [r3, #0]
 8007e4a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007e4e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007e52:	4602      	mov	r2, r0
 8007e54:	701a      	strb	r2, [r3, #0]
 8007e56:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007e5a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007e5e:	460a      	mov	r2, r1
 8007e60:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8007e62:	f107 0310 	add.w	r3, r7, #16
 8007e66:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8007e6a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007e6e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d00a      	beq.n	8007e8e <aci_gatt_add_service+0x66>
 8007e78:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007e7c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d101      	bne.n	8007e8a <aci_gatt_add_service+0x62>
 8007e86:	2311      	movs	r3, #17
 8007e88:	e002      	b.n	8007e90 <aci_gatt_add_service+0x68>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e000      	b.n	8007e90 <aci_gatt_add_service+0x68>
 8007e8e:	2303      	movs	r3, #3
 8007e90:	f107 0210 	add.w	r2, r7, #16
 8007e94:	4413      	add	r3, r2
 8007e96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007e9a:	f107 030c 	add.w	r3, r7, #12
 8007e9e:	2203      	movs	r2, #3
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 fc38 	bl	8008718 <Osal_MemSet>
  int index_input = 0;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8007eae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007eb2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007eb6:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8007eba:	7812      	ldrb	r2, [r2, #0]
 8007ebc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007ebe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8007ec8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007ecc:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d002      	beq.n	8007edc <aci_gatt_add_service+0xb4>
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d004      	beq.n	8007ee4 <aci_gatt_add_service+0xbc>
 8007eda:	e007      	b.n	8007eec <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8007edc:	2302      	movs	r3, #2
 8007ede:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007ee2:	e005      	b.n	8007ef0 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8007ee4:	2310      	movs	r3, #16
 8007ee6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007eea:	e001      	b.n	8007ef0 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8007eec:	2397      	movs	r3, #151	; 0x97
 8007eee:	e06c      	b.n	8007fca <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8007ef0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007ef4:	1c58      	adds	r0, r3, #1
 8007ef6:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8007efa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007efe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007f02:	6819      	ldr	r1, [r3, #0]
 8007f04:	f000 fbf8 	bl	80086f8 <Osal_MemCpy>
    index_input += size;
 8007f08:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8007f0c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007f10:	4413      	add	r3, r2
 8007f12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8007f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f1a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007f1e:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007f22:	7812      	ldrb	r2, [r2, #0]
 8007f24:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007f26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8007f30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f34:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007f38:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8007f3c:	7812      	ldrb	r2, [r2, #0]
 8007f3e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8007f40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f44:	3301      	adds	r3, #1
 8007f46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f4e:	2218      	movs	r2, #24
 8007f50:	2100      	movs	r1, #0
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 fbe0 	bl	8008718 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007f58:	233f      	movs	r3, #63	; 0x3f
 8007f5a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8007f5e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007f62:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007f66:	f107 0310 	add.w	r3, r7, #16
 8007f6a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007f6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f72:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007f76:	f107 030c 	add.w	r3, r7, #12
 8007f7a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007f7e:	2303      	movs	r3, #3
 8007f80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f88:	2100      	movs	r1, #0
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 fe4e 	bl	8008c2c <hci_send_req>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	da01      	bge.n	8007f9a <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8007f96:	23ff      	movs	r3, #255	; 0xff
 8007f98:	e017      	b.n	8007fca <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8007f9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007f9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d005      	beq.n	8007fb4 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8007fa8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007fac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	e00a      	b.n	8007fca <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8007fb4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007fb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fbc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007fc6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd90      	pop	{r4, r7, pc}

08007fd4 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8007fd4:	b590      	push	{r4, r7, lr}
 8007fd6:	b0d1      	sub	sp, #324	; 0x144
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	4604      	mov	r4, r0
 8007fdc:	4608      	mov	r0, r1
 8007fde:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8007fe2:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8007fe6:	600a      	str	r2, [r1, #0]
 8007fe8:	4619      	mov	r1, r3
 8007fea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007fee:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007ff2:	4622      	mov	r2, r4
 8007ff4:	801a      	strh	r2, [r3, #0]
 8007ff6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007ffa:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007ffe:	4602      	mov	r2, r0
 8008000:	701a      	strb	r2, [r3, #0]
 8008002:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008006:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800800a:	460a      	mov	r2, r1
 800800c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800800e:	f107 0318 	add.w	r3, r7, #24
 8008012:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8008016:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800801a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d00a      	beq.n	800803a <aci_gatt_add_char+0x66>
 8008024:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008028:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	2b02      	cmp	r3, #2
 8008030:	d101      	bne.n	8008036 <aci_gatt_add_char+0x62>
 8008032:	2313      	movs	r3, #19
 8008034:	e002      	b.n	800803c <aci_gatt_add_char+0x68>
 8008036:	2303      	movs	r3, #3
 8008038:	e000      	b.n	800803c <aci_gatt_add_char+0x68>
 800803a:	2305      	movs	r3, #5
 800803c:	f107 0218 	add.w	r2, r7, #24
 8008040:	4413      	add	r3, r2
 8008042:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008046:	f107 0314 	add.w	r3, r7, #20
 800804a:	2203      	movs	r2, #3
 800804c:	2100      	movs	r1, #0
 800804e:	4618      	mov	r0, r3
 8008050:	f000 fb62 	bl	8008718 <Osal_MemSet>
  int index_input = 0;
 8008054:	2300      	movs	r3, #0
 8008056:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800805a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800805e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008062:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008066:	8812      	ldrh	r2, [r2, #0]
 8008068:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800806a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800806e:	3302      	adds	r3, #2
 8008070:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8008074:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008078:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800807c:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8008080:	7812      	ldrb	r2, [r2, #0]
 8008082:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008084:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008088:	3301      	adds	r3, #1
 800808a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800808e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008092:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d002      	beq.n	80080a2 <aci_gatt_add_char+0xce>
 800809c:	2b02      	cmp	r3, #2
 800809e:	d004      	beq.n	80080aa <aci_gatt_add_char+0xd6>
 80080a0:	e007      	b.n	80080b2 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80080a2:	2302      	movs	r3, #2
 80080a4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80080a8:	e005      	b.n	80080b6 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80080aa:	2310      	movs	r3, #16
 80080ac:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80080b0:	e001      	b.n	80080b6 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80080b2:	2397      	movs	r3, #151	; 0x97
 80080b4:	e091      	b.n	80081da <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80080b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80080ba:	1cd8      	adds	r0, r3, #3
 80080bc:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80080c0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80080c4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80080c8:	6819      	ldr	r1, [r3, #0]
 80080ca:	f000 fb15 	bl	80086f8 <Osal_MemCpy>
    index_input += size;
 80080ce:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80080d2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80080d6:	4413      	add	r3, r2
 80080d8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80080dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80080e0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80080e4:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 80080e8:	8812      	ldrh	r2, [r2, #0]
 80080ea:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80080ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80080f0:	3302      	adds	r3, #2
 80080f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80080f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80080fa:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80080fe:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8008100:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008104:	3301      	adds	r3, #1
 8008106:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800810a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800810e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008112:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8008114:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008118:	3301      	adds	r3, #1
 800811a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800811e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008122:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8008126:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8008128:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800812c:	3301      	adds	r3, #1
 800812e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8008132:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008136:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800813a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800813c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008140:	3301      	adds	r3, #1
 8008142:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8008146:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800814a:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800814e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8008150:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008154:	3301      	adds	r3, #1
 8008156:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800815a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800815e:	2218      	movs	r2, #24
 8008160:	2100      	movs	r1, #0
 8008162:	4618      	mov	r0, r3
 8008164:	f000 fad8 	bl	8008718 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008168:	233f      	movs	r3, #63	; 0x3f
 800816a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800816e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008172:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8008176:	f107 0318 	add.w	r3, r7, #24
 800817a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800817e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008182:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8008186:	f107 0314 	add.w	r3, r7, #20
 800818a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800818e:	2303      	movs	r3, #3
 8008190:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008194:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008198:	2100      	movs	r1, #0
 800819a:	4618      	mov	r0, r3
 800819c:	f000 fd46 	bl	8008c2c <hci_send_req>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	da01      	bge.n	80081aa <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80081a6:	23ff      	movs	r3, #255	; 0xff
 80081a8:	e017      	b.n	80081da <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80081aa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80081ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d005      	beq.n	80081c4 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80081b8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80081bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	e00a      	b.n	80081da <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80081c4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80081c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081cc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80081d6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd90      	pop	{r4, r7, pc}

080081e4 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80081e4:	b5b0      	push	{r4, r5, r7, lr}
 80081e6:	b0cc      	sub	sp, #304	; 0x130
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	4605      	mov	r5, r0
 80081ec:	460c      	mov	r4, r1
 80081ee:	4610      	mov	r0, r2
 80081f0:	4619      	mov	r1, r3
 80081f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081f6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80081fa:	462a      	mov	r2, r5
 80081fc:	801a      	strh	r2, [r3, #0]
 80081fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008202:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008206:	4622      	mov	r2, r4
 8008208:	801a      	strh	r2, [r3, #0]
 800820a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800820e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008212:	4602      	mov	r2, r0
 8008214:	701a      	strb	r2, [r3, #0]
 8008216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800821a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800821e:	460a      	mov	r2, r1
 8008220:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8008222:	f107 0310 	add.w	r3, r7, #16
 8008226:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800822a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800822e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008232:	2200      	movs	r2, #0
 8008234:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008236:	2300      	movs	r3, #0
 8008238:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800823c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008240:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008244:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008248:	8812      	ldrh	r2, [r2, #0]
 800824a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800824c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008250:	3302      	adds	r3, #2
 8008252:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8008256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800825a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800825e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008262:	8812      	ldrh	r2, [r2, #0]
 8008264:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008266:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800826a:	3302      	adds	r3, #2
 800826c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8008270:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008274:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008278:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800827c:	7812      	ldrb	r2, [r2, #0]
 800827e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008280:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008284:	3301      	adds	r3, #1
 8008286:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800828a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800828e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008292:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8008296:	7812      	ldrb	r2, [r2, #0]
 8008298:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800829a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800829e:	3301      	adds	r3, #1
 80082a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80082a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082a8:	1d98      	adds	r0, r3, #6
 80082aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ae:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	461a      	mov	r2, r3
 80082b6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80082ba:	f000 fa1d 	bl	80086f8 <Osal_MemCpy>
  index_input += Char_Value_Length;
 80082be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082c2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80082cc:	4413      	add	r3, r2
 80082ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80082d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80082d6:	2218      	movs	r2, #24
 80082d8:	2100      	movs	r1, #0
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 fa1c 	bl	8008718 <Osal_MemSet>
  rq.ogf = 0x3f;
 80082e0:	233f      	movs	r3, #63	; 0x3f
 80082e2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80082e6:	f44f 7383 	mov.w	r3, #262	; 0x106
 80082ea:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80082ee:	f107 0310 	add.w	r3, r7, #16
 80082f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80082f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80082fe:	f107 030f 	add.w	r3, r7, #15
 8008302:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008306:	2301      	movs	r3, #1
 8008308:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800830c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008310:	2100      	movs	r1, #0
 8008312:	4618      	mov	r0, r3
 8008314:	f000 fc8a 	bl	8008c2c <hci_send_req>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	da01      	bge.n	8008322 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800831e:	23ff      	movs	r3, #255	; 0xff
 8008320:	e004      	b.n	800832c <aci_gatt_update_char_value+0x148>
  return status;
 8008322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008326:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800832a:	781b      	ldrb	r3, [r3, #0]
}
 800832c:	4618      	mov	r0, r3
 800832e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008332:	46bd      	mov	sp, r7
 8008334:	bdb0      	pop	{r4, r5, r7, pc}

08008336 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b0cc      	sub	sp, #304	; 0x130
 800833a:	af00      	add	r7, sp, #0
 800833c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008340:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008344:	601a      	str	r2, [r3, #0]
 8008346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800834a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800834e:	4602      	mov	r2, r0
 8008350:	701a      	strb	r2, [r3, #0]
 8008352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008356:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800835a:	460a      	mov	r2, r1
 800835c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800835e:	f107 0310 	add.w	r3, r7, #16
 8008362:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800836a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800836e:	2200      	movs	r2, #0
 8008370:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008372:	2300      	movs	r3, #0
 8008374:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8008378:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800837c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008380:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008384:	7812      	ldrb	r2, [r2, #0]
 8008386:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008388:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800838c:	3301      	adds	r3, #1
 800838e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8008392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008396:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800839a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800839e:	7812      	ldrb	r2, [r2, #0]
 80083a0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80083a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083a6:	3301      	adds	r3, #1
 80083a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80083ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083b0:	1c98      	adds	r0, r3, #2
 80083b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083b6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80083ba:	781a      	ldrb	r2, [r3, #0]
 80083bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083c4:	6819      	ldr	r1, [r3, #0]
 80083c6:	f000 f997 	bl	80086f8 <Osal_MemCpy>
  index_input += Length;
 80083ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ce:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80083d8:	4413      	add	r3, r2
 80083da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80083de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80083e2:	2218      	movs	r2, #24
 80083e4:	2100      	movs	r1, #0
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 f996 	bl	8008718 <Osal_MemSet>
  rq.ogf = 0x3f;
 80083ec:	233f      	movs	r3, #63	; 0x3f
 80083ee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80083f2:	230c      	movs	r3, #12
 80083f4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80083f8:	f107 0310 	add.w	r3, r7, #16
 80083fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008400:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008404:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008408:	f107 030f 	add.w	r3, r7, #15
 800840c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008410:	2301      	movs	r3, #1
 8008412:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008416:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800841a:	2100      	movs	r1, #0
 800841c:	4618      	mov	r0, r3
 800841e:	f000 fc05 	bl	8008c2c <hci_send_req>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	da01      	bge.n	800842c <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8008428:	23ff      	movs	r3, #255	; 0xff
 800842a:	e004      	b.n	8008436 <aci_hal_write_config_data+0x100>
  return status;
 800842c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008430:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008434:	781b      	ldrb	r3, [r3, #0]
}
 8008436:	4618      	mov	r0, r3
 8008438:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b0cc      	sub	sp, #304	; 0x130
 8008444:	af00      	add	r7, sp, #0
 8008446:	4602      	mov	r2, r0
 8008448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800844c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008450:	701a      	strb	r2, [r3, #0]
 8008452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008456:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800845a:	460a      	mov	r2, r1
 800845c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800845e:	f107 0310 	add.w	r3, r7, #16
 8008462:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800846a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800846e:	2200      	movs	r2, #0
 8008470:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008472:	2300      	movs	r3, #0
 8008474:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8008478:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800847c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008480:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008484:	7812      	ldrb	r2, [r2, #0]
 8008486:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008488:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800848c:	3301      	adds	r3, #1
 800848e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8008492:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008496:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800849a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800849e:	7812      	ldrb	r2, [r2, #0]
 80084a0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80084a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084a6:	3301      	adds	r3, #1
 80084a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80084ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80084b0:	2218      	movs	r2, #24
 80084b2:	2100      	movs	r1, #0
 80084b4:	4618      	mov	r0, r3
 80084b6:	f000 f92f 	bl	8008718 <Osal_MemSet>
  rq.ogf = 0x3f;
 80084ba:	233f      	movs	r3, #63	; 0x3f
 80084bc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80084c0:	230f      	movs	r3, #15
 80084c2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80084c6:	f107 0310 	add.w	r3, r7, #16
 80084ca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80084ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80084d6:	f107 030f 	add.w	r3, r7, #15
 80084da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80084de:	2301      	movs	r3, #1
 80084e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80084e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80084e8:	2100      	movs	r1, #0
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 fb9e 	bl	8008c2c <hci_send_req>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	da01      	bge.n	80084fa <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80084f6:	23ff      	movs	r3, #255	; 0xff
 80084f8:	e004      	b.n	8008504 <aci_hal_set_tx_power_level+0xc4>
  return status;
 80084fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084fe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008502:	781b      	ldrb	r3, [r3, #0]
}
 8008504:	4618      	mov	r0, r3
 8008506:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b0cc      	sub	sp, #304	; 0x130
 8008512:	af00      	add	r7, sp, #0
 8008514:	4602      	mov	r2, r0
 8008516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800851a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800851e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8008520:	f107 0310 	add.w	r3, r7, #16
 8008524:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800852c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008530:	2200      	movs	r2, #0
 8008532:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008534:	2300      	movs	r3, #0
 8008536:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800853a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800853e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008542:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008546:	8812      	ldrh	r2, [r2, #0]
 8008548:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800854a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800854e:	3302      	adds	r3, #2
 8008550:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008554:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008558:	2218      	movs	r2, #24
 800855a:	2100      	movs	r1, #0
 800855c:	4618      	mov	r0, r3
 800855e:	f000 f8db 	bl	8008718 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008562:	233f      	movs	r3, #63	; 0x3f
 8008564:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8008568:	2318      	movs	r3, #24
 800856a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800856e:	f107 0310 	add.w	r3, r7, #16
 8008572:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008576:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800857a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800857e:	f107 030f 	add.w	r3, r7, #15
 8008582:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008586:	2301      	movs	r3, #1
 8008588:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800858c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008590:	2100      	movs	r1, #0
 8008592:	4618      	mov	r0, r3
 8008594:	f000 fb4a 	bl	8008c2c <hci_send_req>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	da01      	bge.n	80085a2 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800859e:	23ff      	movs	r3, #255	; 0xff
 80085a0:	e004      	b.n	80085ac <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80085a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085a6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80085aa:	781b      	ldrb	r3, [r3, #0]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b088      	sub	sp, #32
 80085ba:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80085bc:	2300      	movs	r3, #0
 80085be:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80085c0:	f107 0308 	add.w	r3, r7, #8
 80085c4:	2218      	movs	r2, #24
 80085c6:	2100      	movs	r1, #0
 80085c8:	4618      	mov	r0, r3
 80085ca:	f000 f8a5 	bl	8008718 <Osal_MemSet>
  rq.ogf = 0x03;
 80085ce:	2303      	movs	r3, #3
 80085d0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80085d2:	2303      	movs	r3, #3
 80085d4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80085d6:	1dfb      	adds	r3, r7, #7
 80085d8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80085da:	2301      	movs	r3, #1
 80085dc:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80085de:	f107 0308 	add.w	r3, r7, #8
 80085e2:	2100      	movs	r1, #0
 80085e4:	4618      	mov	r0, r3
 80085e6:	f000 fb21 	bl	8008c2c <hci_send_req>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	da01      	bge.n	80085f4 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80085f0:	23ff      	movs	r3, #255	; 0xff
 80085f2:	e000      	b.n	80085f6 <hci_reset+0x40>
  return status;
 80085f4:	79fb      	ldrb	r3, [r7, #7]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3720      	adds	r7, #32
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80085fe:	b590      	push	{r4, r7, lr}
 8008600:	b0cd      	sub	sp, #308	; 0x134
 8008602:	af00      	add	r7, sp, #0
 8008604:	4604      	mov	r4, r0
 8008606:	4608      	mov	r0, r1
 8008608:	4611      	mov	r1, r2
 800860a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800860e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008612:	4622      	mov	r2, r4
 8008614:	701a      	strb	r2, [r3, #0]
 8008616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800861a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800861e:	4602      	mov	r2, r0
 8008620:	701a      	strb	r2, [r3, #0]
 8008622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008626:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800862a:	460a      	mov	r2, r1
 800862c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800862e:	f107 0310 	add.w	r3, r7, #16
 8008632:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800863a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800863e:	2200      	movs	r2, #0
 8008640:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008642:	2300      	movs	r3, #0
 8008644:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8008648:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800864c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008650:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008654:	7812      	ldrb	r2, [r2, #0]
 8008656:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008658:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800865c:	3301      	adds	r3, #1
 800865e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8008662:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008666:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800866a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800866e:	7812      	ldrb	r2, [r2, #0]
 8008670:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008672:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008676:	3301      	adds	r3, #1
 8008678:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800867c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008680:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008684:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008688:	7812      	ldrb	r2, [r2, #0]
 800868a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800868c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008690:	3301      	adds	r3, #1
 8008692:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008696:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800869a:	2218      	movs	r2, #24
 800869c:	2100      	movs	r1, #0
 800869e:	4618      	mov	r0, r3
 80086a0:	f000 f83a 	bl	8008718 <Osal_MemSet>
  rq.ogf = 0x08;
 80086a4:	2308      	movs	r3, #8
 80086a6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 80086aa:	2331      	movs	r3, #49	; 0x31
 80086ac:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80086b0:	f107 0310 	add.w	r3, r7, #16
 80086b4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80086b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80086c0:	f107 030f 	add.w	r3, r7, #15
 80086c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80086c8:	2301      	movs	r3, #1
 80086ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80086ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80086d2:	2100      	movs	r1, #0
 80086d4:	4618      	mov	r0, r3
 80086d6:	f000 faa9 	bl	8008c2c <hci_send_req>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	da01      	bge.n	80086e4 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80086e0:	23ff      	movs	r3, #255	; 0xff
 80086e2:	e004      	b.n	80086ee <hci_le_set_default_phy+0xf0>
  return status;
 80086e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086e8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80086ec:	781b      	ldrb	r3, [r3, #0]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd90      	pop	{r4, r7, pc}

080086f8 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	68b9      	ldr	r1, [r7, #8]
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f004 f95b 	bl	800c9c4 <memcpy>
 800870e:	4603      	mov	r3, r0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	68b9      	ldr	r1, [r7, #8]
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f004 f959 	bl	800c9e0 <memset>
 800872e:	4603      	mov	r3, r0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8008738:	b480      	push	{r7}
 800873a:	af00      	add	r7, sp, #0
  return;
 800873c:	bf00      	nop
}
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr

08008746 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8008746:	b480      	push	{r7}
 8008748:	af00      	add	r7, sp, #0
  return;
 800874a:	bf00      	nop
}
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8008754:	b480      	push	{r7}
 8008756:	af00      	add	r7, sp, #0
  return;
 8008758:	bf00      	nop
}
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8008762:	b480      	push	{r7}
 8008764:	af00      	add	r7, sp, #0
  return;
 8008766:	bf00      	nop
}
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8008770:	b480      	push	{r7}
 8008772:	af00      	add	r7, sp, #0
  return;
 8008774:	bf00      	nop
}
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800877e:	b480      	push	{r7}
 8008780:	af00      	add	r7, sp, #0
  return;
 8008782:	bf00      	nop
}
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800878c:	b480      	push	{r7}
 800878e:	af00      	add	r7, sp, #0
  return;
 8008790:	bf00      	nop
}
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800879a:	b480      	push	{r7}
 800879c:	af00      	add	r7, sp, #0
  return;
 800879e:	bf00      	nop
}
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80087a8:	b480      	push	{r7}
 80087aa:	af00      	add	r7, sp, #0
  return;
 80087ac:	bf00      	nop
}
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80087b6:	b480      	push	{r7}
 80087b8:	af00      	add	r7, sp, #0
  return;
 80087ba:	bf00      	nop
}
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80087c4:	b480      	push	{r7}
 80087c6:	af00      	add	r7, sp, #0
  return;
 80087c8:	bf00      	nop
}
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr

080087d2 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80087d2:	b480      	push	{r7}
 80087d4:	af00      	add	r7, sp, #0
  return;
 80087d6:	bf00      	nop
}
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 80087e0:	b480      	push	{r7}
 80087e2:	af00      	add	r7, sp, #0
  return;
 80087e4:	bf00      	nop
}
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr

080087ee <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 80087ee:	b480      	push	{r7}
 80087f0:	af00      	add	r7, sp, #0
  return;
 80087f2:	bf00      	nop
}
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80087fc:	b480      	push	{r7}
 80087fe:	af00      	add	r7, sp, #0
  return;
 8008800:	bf00      	nop
}
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr

0800880a <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800880a:	b480      	push	{r7}
 800880c:	af00      	add	r7, sp, #0
  return;
 800880e:	bf00      	nop
}
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8008818:	b480      	push	{r7}
 800881a:	af00      	add	r7, sp, #0
  return;
 800881c:	bf00      	nop
}
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr
	...

08008828 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800882c:	4b04      	ldr	r3, [pc, #16]	; (8008840 <SVCCTL_Init+0x18>)
 800882e:	2200      	movs	r2, #0
 8008830:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8008832:	4b04      	ldr	r3, [pc, #16]	; (8008844 <SVCCTL_Init+0x1c>)
 8008834:	2200      	movs	r2, #0
 8008836:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8008838:	f000 f806 	bl	8008848 <SVCCTL_SvcInit>

  return;
 800883c:	bf00      	nop
}
 800883e:	bd80      	pop	{r7, pc}
 8008840:	20000134 	.word	0x20000134
 8008844:	20000154 	.word	0x20000154

08008848 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	af00      	add	r7, sp, #0
  BAS_Init();
 800884c:	f7ff ff74 	bl	8008738 <BAS_Init>

  BLS_Init();
 8008850:	f7ff ff79 	bl	8008746 <BLS_Init>

  CRS_STM_Init();
 8008854:	f7ff ff7e 	bl	8008754 <CRS_STM_Init>

  DIS_Init();
 8008858:	f7ff ff83 	bl	8008762 <DIS_Init>

  EDS_STM_Init();
 800885c:	f7ff ff88 	bl	8008770 <EDS_STM_Init>

  HIDS_Init();
 8008860:	f7ff ff8d 	bl	800877e <HIDS_Init>

  HRS_Init();
 8008864:	f7ff ff92 	bl	800878c <HRS_Init>

  HTS_Init();
 8008868:	f7ff ff97 	bl	800879a <HTS_Init>

  IAS_Init();
 800886c:	f7ff ff9c 	bl	80087a8 <IAS_Init>

  LLS_Init();
 8008870:	f7ff ffa1 	bl	80087b6 <LLS_Init>

  TPS_Init();
 8008874:	f7ff ffa6 	bl	80087c4 <TPS_Init>

  MOTENV_STM_Init();
 8008878:	f7ff ffab 	bl	80087d2 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800887c:	f7ff ffb0 	bl	80087e0 <P2PS_STM_Init>

  ZDD_STM_Init();
 8008880:	f7ff ffb5 	bl	80087ee <ZDD_STM_Init>

  OTAS_STM_Init();
 8008884:	f7ff ffba 	bl	80087fc <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8008888:	f7ff ffc6 	bl	8008818 <BVOPUS_STM_Init>

  MESH_Init();
 800888c:	f7ff ffbd 	bl	800880a <MESH_Init>

  SVCCTL_InitCustomSvc();
 8008890:	f002 fe48 	bl	800b524 <SVCCTL_InitCustomSvc>
  
  return;
 8008894:	bf00      	nop
}
 8008896:	bd80      	pop	{r7, pc}

08008898 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80088a0:	4b09      	ldr	r3, [pc, #36]	; (80088c8 <SVCCTL_RegisterSvcHandler+0x30>)
 80088a2:	7f1b      	ldrb	r3, [r3, #28]
 80088a4:	4619      	mov	r1, r3
 80088a6:	4a08      	ldr	r2, [pc, #32]	; (80088c8 <SVCCTL_RegisterSvcHandler+0x30>)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80088ae:	4b06      	ldr	r3, [pc, #24]	; (80088c8 <SVCCTL_RegisterSvcHandler+0x30>)
 80088b0:	7f1b      	ldrb	r3, [r3, #28]
 80088b2:	3301      	adds	r3, #1
 80088b4:	b2da      	uxtb	r2, r3
 80088b6:	4b04      	ldr	r3, [pc, #16]	; (80088c8 <SVCCTL_RegisterSvcHandler+0x30>)
 80088b8:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80088ba:	bf00      	nop
}
 80088bc:	370c      	adds	r7, #12
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	20000134 	.word	0x20000134

080088cc <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b086      	sub	sp, #24
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	3301      	adds	r3, #1
 80088d8:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80088da:	2300      	movs	r3, #0
 80088dc:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	2bff      	cmp	r3, #255	; 0xff
 80088e4:	d125      	bne.n	8008932 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	3302      	adds	r3, #2
 80088ea:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	881b      	ldrh	r3, [r3, #0]
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80088f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80088fa:	d118      	bne.n	800892e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80088fc:	2300      	movs	r3, #0
 80088fe:	757b      	strb	r3, [r7, #21]
 8008900:	e00d      	b.n	800891e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8008902:	7d7b      	ldrb	r3, [r7, #21]
 8008904:	4a1a      	ldr	r2, [pc, #104]	; (8008970 <SVCCTL_UserEvtRx+0xa4>)
 8008906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	4798      	blx	r3
 800890e:	4603      	mov	r3, r0
 8008910:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8008912:	7dfb      	ldrb	r3, [r7, #23]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d108      	bne.n	800892a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008918:	7d7b      	ldrb	r3, [r7, #21]
 800891a:	3301      	adds	r3, #1
 800891c:	757b      	strb	r3, [r7, #21]
 800891e:	4b14      	ldr	r3, [pc, #80]	; (8008970 <SVCCTL_UserEvtRx+0xa4>)
 8008920:	7f1b      	ldrb	r3, [r3, #28]
 8008922:	7d7a      	ldrb	r2, [r7, #21]
 8008924:	429a      	cmp	r2, r3
 8008926:	d3ec      	bcc.n	8008902 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8008928:	e002      	b.n	8008930 <SVCCTL_UserEvtRx+0x64>
              break;
 800892a:	bf00      	nop
          break;
 800892c:	e000      	b.n	8008930 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800892e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8008930:	e000      	b.n	8008934 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8008932:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8008934:	7dfb      	ldrb	r3, [r7, #23]
 8008936:	2b02      	cmp	r3, #2
 8008938:	d00f      	beq.n	800895a <SVCCTL_UserEvtRx+0x8e>
 800893a:	2b02      	cmp	r3, #2
 800893c:	dc10      	bgt.n	8008960 <SVCCTL_UserEvtRx+0x94>
 800893e:	2b00      	cmp	r3, #0
 8008940:	d002      	beq.n	8008948 <SVCCTL_UserEvtRx+0x7c>
 8008942:	2b01      	cmp	r3, #1
 8008944:	d006      	beq.n	8008954 <SVCCTL_UserEvtRx+0x88>
 8008946:	e00b      	b.n	8008960 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f001 fca9 	bl	800a2a0 <SVCCTL_App_Notification>
 800894e:	4603      	mov	r3, r0
 8008950:	75bb      	strb	r3, [r7, #22]
      break;
 8008952:	e008      	b.n	8008966 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008954:	2301      	movs	r3, #1
 8008956:	75bb      	strb	r3, [r7, #22]
      break;
 8008958:	e005      	b.n	8008966 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800895a:	2300      	movs	r3, #0
 800895c:	75bb      	strb	r3, [r7, #22]
      break;
 800895e:	e002      	b.n	8008966 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008960:	2301      	movs	r3, #1
 8008962:	75bb      	strb	r3, [r7, #22]
      break;
 8008964:	bf00      	nop
  }

  return (return_status);
 8008966:	7dbb      	ldrb	r3, [r7, #22]
}
 8008968:	4618      	mov	r0, r3
 800896a:	3718      	adds	r7, #24
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	20000134 	.word	0x20000134

08008974 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b088      	sub	sp, #32
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800897c:	f107 030c 	add.w	r3, r7, #12
 8008980:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	212c      	movs	r1, #44	; 0x2c
 800898c:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8008990:	f000 fae2 	bl	8008f58 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	330b      	adds	r3, #11
 8008998:	78db      	ldrb	r3, [r3, #3]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3720      	adds	r7, #32
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b088      	sub	sp, #32
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80089aa:	f107 030c 	add.w	r3, r7, #12
 80089ae:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	210f      	movs	r1, #15
 80089ba:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80089be:	f000 facb 	bl	8008f58 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	330b      	adds	r3, #11
 80089c6:	78db      	ldrb	r3, [r3, #3]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3720      	adds	r7, #32
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b088      	sub	sp, #32
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80089d8:	f107 030c 	add.w	r3, r7, #12
 80089dc:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	210e      	movs	r1, #14
 80089e4:	f64f 4075 	movw	r0, #64629	; 0xfc75
 80089e8:	f000 fab6 	bl	8008f58 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	330b      	adds	r3, #11
 80089f0:	78db      	ldrb	r3, [r3, #3]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3720      	adds	r7, #32
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
	...

080089fc <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80089fc:	b480      	push	{r7}
 80089fe:	b08b      	sub	sp, #44	; 0x2c
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8008a04:	2300      	movs	r3, #0
 8008a06:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8008a10:	2300      	movs	r3, #0
 8008a12:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8008a14:	2300      	movs	r3, #0
 8008a16:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8008a20:	2300      	movs	r3, #0
 8008a22:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8008a24:	4b4a      	ldr	r3, [pc, #296]	; (8008b50 <SHCI_GetWirelessFwInfo+0x154>)
 8008a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a28:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008a2c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008a36:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a44      	ldr	r2, [pc, #272]	; (8008b54 <SHCI_GetWirelessFwInfo+0x158>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d10f      	bne.n	8008a68 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	695b      	ldr	r3, [r3, #20]
 8008a4c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	69db      	ldr	r3, [r3, #28]
 8008a58:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	617b      	str	r3, [r7, #20]
 8008a66:	e01a      	b.n	8008a9e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008a70:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8008a74:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	695b      	ldr	r3, [r3, #20]
 8008a84:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa0:	0e1b      	lsrs	r3, r3, #24
 8008aa2:	b2da      	uxtb	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aaa:	0c1b      	lsrs	r3, r3, #16
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab4:	0a1b      	lsrs	r3, r3, #8
 8008ab6:	b2da      	uxtb	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	091b      	lsrs	r3, r3, #4
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	f003 030f 	and.w	r3, r3, #15
 8008ac6:	b2da      	uxtb	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8008acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	f003 030f 	and.w	r3, r3, #15
 8008ad4:	b2da      	uxtb	r2, r3
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8008ada:	6a3b      	ldr	r3, [r7, #32]
 8008adc:	0e1b      	lsrs	r3, r3, #24
 8008ade:	b2da      	uxtb	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008ae4:	6a3b      	ldr	r3, [r7, #32]
 8008ae6:	0c1b      	lsrs	r3, r3, #16
 8008ae8:	b2da      	uxtb	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8008aee:	6a3b      	ldr	r3, [r7, #32]
 8008af0:	0a1b      	lsrs	r3, r3, #8
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008af8:	6a3b      	ldr	r3, [r7, #32]
 8008afa:	b2da      	uxtb	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	b2da      	uxtb	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	0e1b      	lsrs	r3, r3, #24
 8008b0c:	b2da      	uxtb	r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	0c1b      	lsrs	r3, r3, #16
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	0a1b      	lsrs	r3, r3, #8
 8008b20:	b2da      	uxtb	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	0e1b      	lsrs	r3, r3, #24
 8008b2a:	b2da      	uxtb	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	0c1b      	lsrs	r3, r3, #16
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	b2da      	uxtb	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	372c      	adds	r7, #44	; 0x2c
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr
 8008b50:	58004000 	.word	0x58004000
 8008b54:	a94656b9 	.word	0xa94656b9

08008b58 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	4a08      	ldr	r2, [pc, #32]	; (8008b88 <hci_init+0x30>)
 8008b68:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8008b6a:	4a08      	ldr	r2, [pc, #32]	; (8008b8c <hci_init+0x34>)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008b70:	4806      	ldr	r0, [pc, #24]	; (8008b8c <hci_init+0x34>)
 8008b72:	f000 f973 	bl	8008e5c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 f8d4 	bl	8008d28 <TlInit>

  return;
 8008b80:	bf00      	nop
}
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	200004c8 	.word	0x200004c8
 8008b8c:	200004a0 	.word	0x200004a0

08008b90 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008b96:	4822      	ldr	r0, [pc, #136]	; (8008c20 <hci_user_evt_proc+0x90>)
 8008b98:	f000 fe06 	bl	80097a8 <LST_is_empty>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d12b      	bne.n	8008bfa <hci_user_evt_proc+0x6a>
 8008ba2:	4b20      	ldr	r3, [pc, #128]	; (8008c24 <hci_user_evt_proc+0x94>)
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d027      	beq.n	8008bfa <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008baa:	f107 030c 	add.w	r3, r7, #12
 8008bae:	4619      	mov	r1, r3
 8008bb0:	481b      	ldr	r0, [pc, #108]	; (8008c20 <hci_user_evt_proc+0x90>)
 8008bb2:	f000 fe88 	bl	80098c6 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8008bb6:	4b1c      	ldr	r3, [pc, #112]	; (8008c28 <hci_user_evt_proc+0x98>)
 8008bb8:	69db      	ldr	r3, [r3, #28]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00c      	beq.n	8008bd8 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008bc6:	4b18      	ldr	r3, [pc, #96]	; (8008c28 <hci_user_evt_proc+0x98>)
 8008bc8:	69db      	ldr	r3, [r3, #28]
 8008bca:	1d3a      	adds	r2, r7, #4
 8008bcc:	4610      	mov	r0, r2
 8008bce:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008bd0:	793a      	ldrb	r2, [r7, #4]
 8008bd2:	4b14      	ldr	r3, [pc, #80]	; (8008c24 <hci_user_evt_proc+0x94>)
 8008bd4:	701a      	strb	r2, [r3, #0]
 8008bd6:	e002      	b.n	8008bde <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008bd8:	4b12      	ldr	r3, [pc, #72]	; (8008c24 <hci_user_evt_proc+0x94>)
 8008bda:	2201      	movs	r2, #1
 8008bdc:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8008bde:	4b11      	ldr	r3, [pc, #68]	; (8008c24 <hci_user_evt_proc+0x94>)
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d004      	beq.n	8008bf0 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	4618      	mov	r0, r3
 8008bea:	f000 fc03 	bl	80093f4 <TL_MM_EvtDone>
 8008bee:	e004      	b.n	8008bfa <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	480a      	ldr	r0, [pc, #40]	; (8008c20 <hci_user_evt_proc+0x90>)
 8008bf6:	f000 fdf9 	bl	80097ec <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008bfa:	4809      	ldr	r0, [pc, #36]	; (8008c20 <hci_user_evt_proc+0x90>)
 8008bfc:	f000 fdd4 	bl	80097a8 <LST_is_empty>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d107      	bne.n	8008c16 <hci_user_evt_proc+0x86>
 8008c06:	4b07      	ldr	r3, [pc, #28]	; (8008c24 <hci_user_evt_proc+0x94>)
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d003      	beq.n	8008c16 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8008c0e:	4804      	ldr	r0, [pc, #16]	; (8008c20 <hci_user_evt_proc+0x90>)
 8008c10:	f002 f9ac 	bl	800af6c <hci_notify_asynch_evt>
  }


  return;
 8008c14:	bf00      	nop
 8008c16:	bf00      	nop
}
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	2000015c 	.word	0x2000015c
 8008c24:	20000168 	.word	0x20000168
 8008c28:	200004a0 	.word	0x200004a0

08008c2c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b088      	sub	sp, #32
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	460b      	mov	r3, r1
 8008c36:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8008c38:	2000      	movs	r0, #0
 8008c3a:	f000 f8cb 	bl	8008dd4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	885b      	ldrh	r3, [r3, #2]
 8008c46:	b21b      	sxth	r3, r3
 8008c48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c4c:	b21a      	sxth	r2, r3
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	881b      	ldrh	r3, [r3, #0]
 8008c52:	029b      	lsls	r3, r3, #10
 8008c54:	b21b      	sxth	r3, r3
 8008c56:	4313      	orrs	r3, r2
 8008c58:	b21b      	sxth	r3, r3
 8008c5a:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	b2d9      	uxtb	r1, r3
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	689a      	ldr	r2, [r3, #8]
 8008c66:	8bbb      	ldrh	r3, [r7, #28]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f000 f88d 	bl	8008d88 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8008c6e:	e04e      	b.n	8008d0e <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8008c70:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008c74:	f002 f991 	bl	800af9a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008c78:	e043      	b.n	8008d02 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8008c7a:	f107 030c 	add.w	r3, r7, #12
 8008c7e:	4619      	mov	r1, r3
 8008c80:	4828      	ldr	r0, [pc, #160]	; (8008d24 <hci_send_req+0xf8>)
 8008c82:	f000 fe20 	bl	80098c6 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	7a5b      	ldrb	r3, [r3, #9]
 8008c8a:	2b0f      	cmp	r3, #15
 8008c8c:	d114      	bne.n	8008cb8 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	330b      	adds	r3, #11
 8008c92:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	885b      	ldrh	r3, [r3, #2]
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	8bba      	ldrh	r2, [r7, #28]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d104      	bne.n	8008caa <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	7812      	ldrb	r2, [r2, #0]
 8008ca8:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	785b      	ldrb	r3, [r3, #1]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d027      	beq.n	8008d02 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	77fb      	strb	r3, [r7, #31]
 8008cb6:	e024      	b.n	8008d02 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	330b      	adds	r3, #11
 8008cbc:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	8bba      	ldrh	r2, [r7, #28]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d114      	bne.n	8008cf6 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	7a9b      	ldrb	r3, [r3, #10]
 8008cd0:	3b03      	subs	r3, #3
 8008cd2:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	695a      	ldr	r2, [r3, #20]
 8008cd8:	7dfb      	ldrb	r3, [r7, #23]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	bfa8      	it	ge
 8008cde:	461a      	movge	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6918      	ldr	r0, [r3, #16]
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	1cd9      	adds	r1, r3, #3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	695b      	ldr	r3, [r3, #20]
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	f003 fe67 	bl	800c9c4 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d001      	beq.n	8008d02 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008d02:	4808      	ldr	r0, [pc, #32]	; (8008d24 <hci_send_req+0xf8>)
 8008d04:	f000 fd50 	bl	80097a8 <LST_is_empty>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d0b5      	beq.n	8008c7a <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8008d0e:	7ffb      	ldrb	r3, [r7, #31]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d0ad      	beq.n	8008c70 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8008d14:	2001      	movs	r0, #1
 8008d16:	f000 f85d 	bl	8008dd4 <NotifyCmdStatus>

  return 0;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3720      	adds	r7, #32
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	200004c0 	.word	0x200004c0

08008d28 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b086      	sub	sp, #24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8008d30:	480f      	ldr	r0, [pc, #60]	; (8008d70 <TlInit+0x48>)
 8008d32:	f000 fd29 	bl	8009788 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8008d36:	4a0f      	ldr	r2, [pc, #60]	; (8008d74 <TlInit+0x4c>)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8008d3c:	480e      	ldr	r0, [pc, #56]	; (8008d78 <TlInit+0x50>)
 8008d3e:	f000 fd23 	bl	8009788 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008d42:	4b0e      	ldr	r3, [pc, #56]	; (8008d7c <TlInit+0x54>)
 8008d44:	2201      	movs	r2, #1
 8008d46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8008d48:	4b0d      	ldr	r3, [pc, #52]	; (8008d80 <TlInit+0x58>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00a      	beq.n	8008d66 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008d54:	4b0b      	ldr	r3, [pc, #44]	; (8008d84 <TlInit+0x5c>)
 8008d56:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8008d58:	4b09      	ldr	r3, [pc, #36]	; (8008d80 <TlInit+0x58>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f107 0208 	add.w	r2, r7, #8
 8008d60:	4610      	mov	r0, r2
 8008d62:	4798      	blx	r3
  }

  return;
 8008d64:	bf00      	nop
 8008d66:	bf00      	nop
}
 8008d68:	3718      	adds	r7, #24
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	200004c0 	.word	0x200004c0
 8008d74:	20000164 	.word	0x20000164
 8008d78:	2000015c 	.word	0x2000015c
 8008d7c:	20000168 	.word	0x20000168
 8008d80:	200004a0 	.word	0x200004a0
 8008d84:	08008e15 	.word	0x08008e15

08008d88 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	4603      	mov	r3, r0
 8008d90:	603a      	str	r2, [r7, #0]
 8008d92:	80fb      	strh	r3, [r7, #6]
 8008d94:	460b      	mov	r3, r1
 8008d96:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8008d98:	4b0c      	ldr	r3, [pc, #48]	; (8008dcc <SendCmd+0x44>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	88fa      	ldrh	r2, [r7, #6]
 8008d9e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8008da2:	4b0a      	ldr	r3, [pc, #40]	; (8008dcc <SendCmd+0x44>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	797a      	ldrb	r2, [r7, #5]
 8008da8:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8008daa:	4b08      	ldr	r3, [pc, #32]	; (8008dcc <SendCmd+0x44>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	330c      	adds	r3, #12
 8008db0:	797a      	ldrb	r2, [r7, #5]
 8008db2:	6839      	ldr	r1, [r7, #0]
 8008db4:	4618      	mov	r0, r3
 8008db6:	f003 fe05 	bl	800c9c4 <memcpy>

  hciContext.io.Send(0,0);
 8008dba:	4b05      	ldr	r3, [pc, #20]	; (8008dd0 <SendCmd+0x48>)
 8008dbc:	691b      	ldr	r3, [r3, #16]
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	4798      	blx	r3

  return;
 8008dc4:	bf00      	nop
}
 8008dc6:	3708      	adds	r7, #8
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	20000164 	.word	0x20000164
 8008dd0:	200004a0 	.word	0x200004a0

08008dd4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	4603      	mov	r3, r0
 8008ddc:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8008dde:	79fb      	ldrb	r3, [r7, #7]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d108      	bne.n	8008df6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008de4:	4b0a      	ldr	r3, [pc, #40]	; (8008e10 <NotifyCmdStatus+0x3c>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00d      	beq.n	8008e08 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8008dec:	4b08      	ldr	r3, [pc, #32]	; (8008e10 <NotifyCmdStatus+0x3c>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2000      	movs	r0, #0
 8008df2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8008df4:	e008      	b.n	8008e08 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8008df6:	4b06      	ldr	r3, [pc, #24]	; (8008e10 <NotifyCmdStatus+0x3c>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d004      	beq.n	8008e08 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8008dfe:	4b04      	ldr	r3, [pc, #16]	; (8008e10 <NotifyCmdStatus+0x3c>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2001      	movs	r0, #1
 8008e04:	4798      	blx	r3
  return;
 8008e06:	bf00      	nop
 8008e08:	bf00      	nop
}
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	200004c8 	.word	0x200004c8

08008e14 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	7a5b      	ldrb	r3, [r3, #9]
 8008e20:	2b0f      	cmp	r3, #15
 8008e22:	d003      	beq.n	8008e2c <TlEvtReceived+0x18>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	7a5b      	ldrb	r3, [r3, #9]
 8008e28:	2b0e      	cmp	r3, #14
 8008e2a:	d107      	bne.n	8008e3c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8008e2c:	6879      	ldr	r1, [r7, #4]
 8008e2e:	4809      	ldr	r0, [pc, #36]	; (8008e54 <TlEvtReceived+0x40>)
 8008e30:	f000 fd02 	bl	8009838 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8008e34:	2000      	movs	r0, #0
 8008e36:	f002 f8a5 	bl	800af84 <hci_cmd_resp_release>
 8008e3a:	e006      	b.n	8008e4a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8008e3c:	6879      	ldr	r1, [r7, #4]
 8008e3e:	4806      	ldr	r0, [pc, #24]	; (8008e58 <TlEvtReceived+0x44>)
 8008e40:	f000 fcfa 	bl	8009838 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008e44:	4804      	ldr	r0, [pc, #16]	; (8008e58 <TlEvtReceived+0x44>)
 8008e46:	f002 f891 	bl	800af6c <hci_notify_asynch_evt>
  }

  return;
 8008e4a:	bf00      	nop
}
 8008e4c:	3708      	adds	r7, #8
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	200004c0 	.word	0x200004c0
 8008e58:	2000015c 	.word	0x2000015c

08008e5c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a05      	ldr	r2, [pc, #20]	; (8008e7c <hci_register_io_bus+0x20>)
 8008e68:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a04      	ldr	r2, [pc, #16]	; (8008e80 <hci_register_io_bus+0x24>)
 8008e6e:	611a      	str	r2, [r3, #16]

  return;
 8008e70:	bf00      	nop
}
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr
 8008e7c:	0800916d 	.word	0x0800916d
 8008e80:	080091d5 	.word	0x080091d5

08008e84 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	4a08      	ldr	r2, [pc, #32]	; (8008eb4 <shci_init+0x30>)
 8008e94:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8008e96:	4a08      	ldr	r2, [pc, #32]	; (8008eb8 <shci_init+0x34>)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8008e9c:	4806      	ldr	r0, [pc, #24]	; (8008eb8 <shci_init+0x34>)
 8008e9e:	f000 f911 	bl	80090c4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 f894 	bl	8008fd4 <TlInit>

  return;
 8008eac:	bf00      	nop
}
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	200004ec 	.word	0x200004ec
 8008eb8:	200004cc 	.word	0x200004cc

08008ebc <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008ec2:	4822      	ldr	r0, [pc, #136]	; (8008f4c <shci_user_evt_proc+0x90>)
 8008ec4:	f000 fc70 	bl	80097a8 <LST_is_empty>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d12b      	bne.n	8008f26 <shci_user_evt_proc+0x6a>
 8008ece:	4b20      	ldr	r3, [pc, #128]	; (8008f50 <shci_user_evt_proc+0x94>)
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d027      	beq.n	8008f26 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008ed6:	f107 030c 	add.w	r3, r7, #12
 8008eda:	4619      	mov	r1, r3
 8008edc:	481b      	ldr	r0, [pc, #108]	; (8008f4c <shci_user_evt_proc+0x90>)
 8008ede:	f000 fcf2 	bl	80098c6 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8008ee2:	4b1c      	ldr	r3, [pc, #112]	; (8008f54 <shci_user_evt_proc+0x98>)
 8008ee4:	69db      	ldr	r3, [r3, #28]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00c      	beq.n	8008f04 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008ef2:	4b18      	ldr	r3, [pc, #96]	; (8008f54 <shci_user_evt_proc+0x98>)
 8008ef4:	69db      	ldr	r3, [r3, #28]
 8008ef6:	1d3a      	adds	r2, r7, #4
 8008ef8:	4610      	mov	r0, r2
 8008efa:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8008efc:	793a      	ldrb	r2, [r7, #4]
 8008efe:	4b14      	ldr	r3, [pc, #80]	; (8008f50 <shci_user_evt_proc+0x94>)
 8008f00:	701a      	strb	r2, [r3, #0]
 8008f02:	e002      	b.n	8008f0a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008f04:	4b12      	ldr	r3, [pc, #72]	; (8008f50 <shci_user_evt_proc+0x94>)
 8008f06:	2201      	movs	r2, #1
 8008f08:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8008f0a:	4b11      	ldr	r3, [pc, #68]	; (8008f50 <shci_user_evt_proc+0x94>)
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d004      	beq.n	8008f1c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f000 fa6d 	bl	80093f4 <TL_MM_EvtDone>
 8008f1a:	e004      	b.n	8008f26 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	4619      	mov	r1, r3
 8008f20:	480a      	ldr	r0, [pc, #40]	; (8008f4c <shci_user_evt_proc+0x90>)
 8008f22:	f000 fc63 	bl	80097ec <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008f26:	4809      	ldr	r0, [pc, #36]	; (8008f4c <shci_user_evt_proc+0x90>)
 8008f28:	f000 fc3e 	bl	80097a8 <LST_is_empty>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d107      	bne.n	8008f42 <shci_user_evt_proc+0x86>
 8008f32:	4b07      	ldr	r3, [pc, #28]	; (8008f50 <shci_user_evt_proc+0x94>)
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d003      	beq.n	8008f42 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8008f3a:	4804      	ldr	r0, [pc, #16]	; (8008f4c <shci_user_evt_proc+0x90>)
 8008f3c:	f7f8 fb4e 	bl	80015dc <shci_notify_asynch_evt>
  }


  return;
 8008f40:	bf00      	nop
 8008f42:	bf00      	nop
}
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	20000184 	.word	0x20000184
 8008f50:	20000194 	.word	0x20000194
 8008f54:	200004cc 	.word	0x200004cc

08008f58 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60ba      	str	r2, [r7, #8]
 8008f60:	607b      	str	r3, [r7, #4]
 8008f62:	4603      	mov	r3, r0
 8008f64:	81fb      	strh	r3, [r7, #14]
 8008f66:	460b      	mov	r3, r1
 8008f68:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8008f6a:	2000      	movs	r0, #0
 8008f6c:	f000 f864 	bl	8009038 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8008f70:	4b16      	ldr	r3, [pc, #88]	; (8008fcc <shci_send+0x74>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	89fa      	ldrh	r2, [r7, #14]
 8008f76:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8008f7a:	4b14      	ldr	r3, [pc, #80]	; (8008fcc <shci_send+0x74>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	7b7a      	ldrb	r2, [r7, #13]
 8008f80:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8008f82:	4b12      	ldr	r3, [pc, #72]	; (8008fcc <shci_send+0x74>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	330c      	adds	r3, #12
 8008f88:	7b7a      	ldrb	r2, [r7, #13]
 8008f8a:	68b9      	ldr	r1, [r7, #8]
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f003 fd19 	bl	800c9c4 <memcpy>

  shciContext.io.Send(0,0);
 8008f92:	4b0f      	ldr	r3, [pc, #60]	; (8008fd0 <shci_send+0x78>)
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	2100      	movs	r1, #0
 8008f98:	2000      	movs	r0, #0
 8008f9a:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8008f9c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008fa0:	f7f8 fb33 	bl	800160a <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f103 0008 	add.w	r0, r3, #8
 8008faa:	4b08      	ldr	r3, [pc, #32]	; (8008fcc <shci_send+0x74>)
 8008fac:	6819      	ldr	r1, [r3, #0]
 8008fae:	4b07      	ldr	r3, [pc, #28]	; (8008fcc <shci_send+0x74>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	789b      	ldrb	r3, [r3, #2]
 8008fb4:	3303      	adds	r3, #3
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	f003 fd04 	bl	800c9c4 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008fbc:	2001      	movs	r0, #1
 8008fbe:	f000 f83b 	bl	8009038 <Cmd_SetStatus>

  return;
 8008fc2:	bf00      	nop
}
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	20000190 	.word	0x20000190
 8008fd0:	200004cc 	.word	0x200004cc

08008fd4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b086      	sub	sp, #24
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8008fdc:	4a10      	ldr	r2, [pc, #64]	; (8009020 <TlInit+0x4c>)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8008fe2:	4810      	ldr	r0, [pc, #64]	; (8009024 <TlInit+0x50>)
 8008fe4:	f000 fbd0 	bl	8009788 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008fe8:	2001      	movs	r0, #1
 8008fea:	f000 f825 	bl	8009038 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008fee:	4b0e      	ldr	r3, [pc, #56]	; (8009028 <TlInit+0x54>)
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8008ff4:	4b0d      	ldr	r3, [pc, #52]	; (800902c <TlInit+0x58>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d00c      	beq.n	8009016 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8009000:	4b0b      	ldr	r3, [pc, #44]	; (8009030 <TlInit+0x5c>)
 8009002:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009004:	4b0b      	ldr	r3, [pc, #44]	; (8009034 <TlInit+0x60>)
 8009006:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009008:	4b08      	ldr	r3, [pc, #32]	; (800902c <TlInit+0x58>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f107 020c 	add.w	r2, r7, #12
 8009010:	4610      	mov	r0, r2
 8009012:	4798      	blx	r3
  }

  return;
 8009014:	bf00      	nop
 8009016:	bf00      	nop
}
 8009018:	3718      	adds	r7, #24
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	20000190 	.word	0x20000190
 8009024:	20000184 	.word	0x20000184
 8009028:	20000194 	.word	0x20000194
 800902c:	200004cc 	.word	0x200004cc
 8009030:	08009089 	.word	0x08009089
 8009034:	080090a1 	.word	0x080090a1

08009038 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	4603      	mov	r3, r0
 8009040:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8009042:	79fb      	ldrb	r3, [r7, #7]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10b      	bne.n	8009060 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009048:	4b0d      	ldr	r3, [pc, #52]	; (8009080 <Cmd_SetStatus+0x48>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d003      	beq.n	8009058 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8009050:	4b0b      	ldr	r3, [pc, #44]	; (8009080 <Cmd_SetStatus+0x48>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2000      	movs	r0, #0
 8009056:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009058:	4b0a      	ldr	r3, [pc, #40]	; (8009084 <Cmd_SetStatus+0x4c>)
 800905a:	2200      	movs	r2, #0
 800905c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800905e:	e00b      	b.n	8009078 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009060:	4b08      	ldr	r3, [pc, #32]	; (8009084 <Cmd_SetStatus+0x4c>)
 8009062:	2201      	movs	r2, #1
 8009064:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8009066:	4b06      	ldr	r3, [pc, #24]	; (8009080 <Cmd_SetStatus+0x48>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d004      	beq.n	8009078 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800906e:	4b04      	ldr	r3, [pc, #16]	; (8009080 <Cmd_SetStatus+0x48>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2001      	movs	r0, #1
 8009074:	4798      	blx	r3
  return;
 8009076:	bf00      	nop
 8009078:	bf00      	nop
}
 800907a:	3708      	adds	r7, #8
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	200004ec 	.word	0x200004ec
 8009084:	2000018c 	.word	0x2000018c

08009088 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009090:	2000      	movs	r0, #0
 8009092:	f7f8 faaf 	bl	80015f4 <shci_cmd_resp_release>

  return;
 8009096:	bf00      	nop
}
 8009098:	3708      	adds	r7, #8
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
	...

080090a0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80090a8:	6879      	ldr	r1, [r7, #4]
 80090aa:	4805      	ldr	r0, [pc, #20]	; (80090c0 <TlUserEvtReceived+0x20>)
 80090ac:	f000 fbc4 	bl	8009838 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80090b0:	4803      	ldr	r0, [pc, #12]	; (80090c0 <TlUserEvtReceived+0x20>)
 80090b2:	f7f8 fa93 	bl	80015dc <shci_notify_asynch_evt>

  return;
 80090b6:	bf00      	nop
}
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	20000184 	.word	0x20000184

080090c4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a05      	ldr	r2, [pc, #20]	; (80090e4 <shci_register_io_bus+0x20>)
 80090d0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4a04      	ldr	r2, [pc, #16]	; (80090e8 <shci_register_io_bus+0x24>)
 80090d6:	611a      	str	r2, [r3, #16]

  return;
 80090d8:	bf00      	nop
}
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr
 80090e4:	08009281 	.word	0x08009281
 80090e8:	080092d5 	.word	0x080092d5

080090ec <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80090f0:	f003 f8ec 	bl	800c2cc <HW_IPCC_Enable>

  return;
 80090f4:	bf00      	nop
}
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <TL_Init>:


void TL_Init( void )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80090fc:	4b10      	ldr	r3, [pc, #64]	; (8009140 <TL_Init+0x48>)
 80090fe:	4a11      	ldr	r2, [pc, #68]	; (8009144 <TL_Init+0x4c>)
 8009100:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8009102:	4b0f      	ldr	r3, [pc, #60]	; (8009140 <TL_Init+0x48>)
 8009104:	4a10      	ldr	r2, [pc, #64]	; (8009148 <TL_Init+0x50>)
 8009106:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8009108:	4b0d      	ldr	r3, [pc, #52]	; (8009140 <TL_Init+0x48>)
 800910a:	4a10      	ldr	r2, [pc, #64]	; (800914c <TL_Init+0x54>)
 800910c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800910e:	4b0c      	ldr	r3, [pc, #48]	; (8009140 <TL_Init+0x48>)
 8009110:	4a0f      	ldr	r2, [pc, #60]	; (8009150 <TL_Init+0x58>)
 8009112:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8009114:	4b0a      	ldr	r3, [pc, #40]	; (8009140 <TL_Init+0x48>)
 8009116:	4a0f      	ldr	r2, [pc, #60]	; (8009154 <TL_Init+0x5c>)
 8009118:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800911a:	4b09      	ldr	r3, [pc, #36]	; (8009140 <TL_Init+0x48>)
 800911c:	4a0e      	ldr	r2, [pc, #56]	; (8009158 <TL_Init+0x60>)
 800911e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8009120:	4b07      	ldr	r3, [pc, #28]	; (8009140 <TL_Init+0x48>)
 8009122:	4a0e      	ldr	r2, [pc, #56]	; (800915c <TL_Init+0x64>)
 8009124:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8009126:	4b06      	ldr	r3, [pc, #24]	; (8009140 <TL_Init+0x48>)
 8009128:	4a0d      	ldr	r2, [pc, #52]	; (8009160 <TL_Init+0x68>)
 800912a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800912c:	4b04      	ldr	r3, [pc, #16]	; (8009140 <TL_Init+0x48>)
 800912e:	4a0d      	ldr	r2, [pc, #52]	; (8009164 <TL_Init+0x6c>)
 8009130:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8009132:	4b03      	ldr	r3, [pc, #12]	; (8009140 <TL_Init+0x48>)
 8009134:	4a0c      	ldr	r2, [pc, #48]	; (8009168 <TL_Init+0x70>)
 8009136:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8009138:	f003 f8dc 	bl	800c2f4 <HW_IPCC_Init>

  return;
 800913c:	bf00      	nop
}
 800913e:	bd80      	pop	{r7, pc}
 8009140:	20030000 	.word	0x20030000
 8009144:	20030028 	.word	0x20030028
 8009148:	20030048 	.word	0x20030048
 800914c:	20030058 	.word	0x20030058
 8009150:	20030068 	.word	0x20030068
 8009154:	20030070 	.word	0x20030070
 8009158:	20030078 	.word	0x20030078
 800915c:	20030080 	.word	0x20030080
 8009160:	2003009c 	.word	0x2003009c
 8009164:	200300a0 	.word	0x200300a0
 8009168:	200300ac 	.word	0x200300ac

0800916c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8009178:	4811      	ldr	r0, [pc, #68]	; (80091c0 <TL_BLE_Init+0x54>)
 800917a:	f000 fb05 	bl	8009788 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800917e:	4b11      	ldr	r3, [pc, #68]	; (80091c4 <TL_BLE_Init+0x58>)
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	689a      	ldr	r2, [r3, #8]
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	68da      	ldr	r2, [r3, #12]
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	4a0c      	ldr	r2, [pc, #48]	; (80091c8 <TL_BLE_Init+0x5c>)
 8009198:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	4a08      	ldr	r2, [pc, #32]	; (80091c0 <TL_BLE_Init+0x54>)
 800919e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80091a0:	f003 f8be 	bl	800c320 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a08      	ldr	r2, [pc, #32]	; (80091cc <TL_BLE_Init+0x60>)
 80091aa:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	4a07      	ldr	r2, [pc, #28]	; (80091d0 <TL_BLE_Init+0x64>)
 80091b2:	6013      	str	r3, [r2, #0]

  return 0;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	200300c8 	.word	0x200300c8
 80091c4:	20030000 	.word	0x20030000
 80091c8:	20030a58 	.word	0x20030a58
 80091cc:	200004f8 	.word	0x200004f8
 80091d0:	200004fc 	.word	0x200004fc

080091d4 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	460b      	mov	r3, r1
 80091de:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80091e0:	4b09      	ldr	r3, [pc, #36]	; (8009208 <TL_BLE_SendCmd+0x34>)
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2201      	movs	r2, #1
 80091e8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80091ea:	4b07      	ldr	r3, [pc, #28]	; (8009208 <TL_BLE_SendCmd+0x34>)
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4619      	mov	r1, r3
 80091f2:	2001      	movs	r0, #1
 80091f4:	f000 f96c 	bl	80094d0 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80091f8:	f003 f89c 	bl	800c334 <HW_IPCC_BLE_SendCmd>

  return 0;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	20030000 	.word	0x20030000

0800920c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8009212:	e01c      	b.n	800924e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009214:	1d3b      	adds	r3, r7, #4
 8009216:	4619      	mov	r1, r3
 8009218:	4812      	ldr	r0, [pc, #72]	; (8009264 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800921a:	f000 fb54 	bl	80098c6 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	7a5b      	ldrb	r3, [r3, #9]
 8009222:	2b0f      	cmp	r3, #15
 8009224:	d003      	beq.n	800922e <HW_IPCC_BLE_RxEvtNot+0x22>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	7a5b      	ldrb	r3, [r3, #9]
 800922a:	2b0e      	cmp	r3, #14
 800922c:	d105      	bne.n	800923a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4619      	mov	r1, r3
 8009232:	2002      	movs	r0, #2
 8009234:	f000 f94c 	bl	80094d0 <OutputDbgTrace>
 8009238:	e004      	b.n	8009244 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4619      	mov	r1, r3
 800923e:	2003      	movs	r0, #3
 8009240:	f000 f946 	bl	80094d0 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8009244:	4b08      	ldr	r3, [pc, #32]	; (8009268 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	4610      	mov	r0, r2
 800924c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800924e:	4805      	ldr	r0, [pc, #20]	; (8009264 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009250:	f000 faaa 	bl	80097a8 <LST_is_empty>
 8009254:	4603      	mov	r3, r0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d0dc      	beq.n	8009214 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800925a:	bf00      	nop
}
 800925c:	3708      	adds	r7, #8
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	200300c8 	.word	0x200300c8
 8009268:	200004f8 	.word	0x200004f8

0800926c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8009270:	4b02      	ldr	r3, [pc, #8]	; (800927c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4798      	blx	r3

  return;
 8009276:	bf00      	nop
}
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	200004fc 	.word	0x200004fc

08009280 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800928c:	480d      	ldr	r0, [pc, #52]	; (80092c4 <TL_SYS_Init+0x44>)
 800928e:	f000 fa7b 	bl	8009788 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8009292:	4b0d      	ldr	r3, [pc, #52]	; (80092c8 <TL_SYS_Init+0x48>)
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	689a      	ldr	r2, [r3, #8]
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	4a08      	ldr	r2, [pc, #32]	; (80092c4 <TL_SYS_Init+0x44>)
 80092a4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80092a6:	f003 f867 	bl	800c378 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a07      	ldr	r2, [pc, #28]	; (80092cc <TL_SYS_Init+0x4c>)
 80092b0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	4a06      	ldr	r2, [pc, #24]	; (80092d0 <TL_SYS_Init+0x50>)
 80092b8:	6013      	str	r3, [r2, #0]

  return 0;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3710      	adds	r7, #16
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	200300d0 	.word	0x200300d0
 80092c8:	20030000 	.word	0x20030000
 80092cc:	20000500 	.word	0x20000500
 80092d0:	20000504 	.word	0x20000504

080092d4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	460b      	mov	r3, r1
 80092de:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80092e0:	4b09      	ldr	r3, [pc, #36]	; (8009308 <TL_SYS_SendCmd+0x34>)
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2210      	movs	r2, #16
 80092e8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80092ea:	4b07      	ldr	r3, [pc, #28]	; (8009308 <TL_SYS_SendCmd+0x34>)
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4619      	mov	r1, r3
 80092f2:	2004      	movs	r0, #4
 80092f4:	f000 f8ec 	bl	80094d0 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80092f8:	f003 f848 	bl	800c38c <HW_IPCC_SYS_SendCmd>

  return 0;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3708      	adds	r7, #8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	20030000 	.word	0x20030000

0800930c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009310:	4b07      	ldr	r3, [pc, #28]	; (8009330 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4619      	mov	r1, r3
 8009318:	2005      	movs	r0, #5
 800931a:	f000 f8d9 	bl	80094d0 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800931e:	4b05      	ldr	r3, [pc, #20]	; (8009334 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a03      	ldr	r2, [pc, #12]	; (8009330 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009324:	68d2      	ldr	r2, [r2, #12]
 8009326:	6812      	ldr	r2, [r2, #0]
 8009328:	4610      	mov	r0, r2
 800932a:	4798      	blx	r3

  return;
 800932c:	bf00      	nop
}
 800932e:	bd80      	pop	{r7, pc}
 8009330:	20030000 	.word	0x20030000
 8009334:	20000500 	.word	0x20000500

08009338 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800933e:	e00e      	b.n	800935e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8009340:	1d3b      	adds	r3, r7, #4
 8009342:	4619      	mov	r1, r3
 8009344:	480b      	ldr	r0, [pc, #44]	; (8009374 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009346:	f000 fabe 	bl	80098c6 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4619      	mov	r1, r3
 800934e:	2006      	movs	r0, #6
 8009350:	f000 f8be 	bl	80094d0 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8009354:	4b08      	ldr	r3, [pc, #32]	; (8009378 <HW_IPCC_SYS_EvtNot+0x40>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	4610      	mov	r0, r2
 800935c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800935e:	4805      	ldr	r0, [pc, #20]	; (8009374 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009360:	f000 fa22 	bl	80097a8 <LST_is_empty>
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	d0ea      	beq.n	8009340 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800936a:	bf00      	nop
}
 800936c:	3708      	adds	r7, #8
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	200300d0 	.word	0x200300d0
 8009378:	20000504 	.word	0x20000504

0800937c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8009384:	4817      	ldr	r0, [pc, #92]	; (80093e4 <TL_MM_Init+0x68>)
 8009386:	f000 f9ff 	bl	8009788 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800938a:	4817      	ldr	r0, [pc, #92]	; (80093e8 <TL_MM_Init+0x6c>)
 800938c:	f000 f9fc 	bl	8009788 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8009390:	4b16      	ldr	r3, [pc, #88]	; (80093ec <TL_MM_Init+0x70>)
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	4a16      	ldr	r2, [pc, #88]	; (80093f0 <TL_MM_Init+0x74>)
 8009396:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8009398:	4b15      	ldr	r3, [pc, #84]	; (80093f0 <TL_MM_Init+0x74>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	6892      	ldr	r2, [r2, #8]
 80093a0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80093a2:	4b13      	ldr	r3, [pc, #76]	; (80093f0 <TL_MM_Init+0x74>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	68d2      	ldr	r2, [r2, #12]
 80093aa:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80093ac:	4b10      	ldr	r3, [pc, #64]	; (80093f0 <TL_MM_Init+0x74>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a0c      	ldr	r2, [pc, #48]	; (80093e4 <TL_MM_Init+0x68>)
 80093b2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80093b4:	4b0e      	ldr	r3, [pc, #56]	; (80093f0 <TL_MM_Init+0x74>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	6812      	ldr	r2, [r2, #0]
 80093bc:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80093be:	4b0c      	ldr	r3, [pc, #48]	; (80093f0 <TL_MM_Init+0x74>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	6852      	ldr	r2, [r2, #4]
 80093c6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80093c8:	4b09      	ldr	r3, [pc, #36]	; (80093f0 <TL_MM_Init+0x74>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	6912      	ldr	r2, [r2, #16]
 80093d0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80093d2:	4b07      	ldr	r3, [pc, #28]	; (80093f0 <TL_MM_Init+0x74>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	6952      	ldr	r2, [r2, #20]
 80093da:	619a      	str	r2, [r3, #24]

  return;
 80093dc:	bf00      	nop
}
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	200300b8 	.word	0x200300b8
 80093e8:	200004f0 	.word	0x200004f0
 80093ec:	20030000 	.word	0x20030000
 80093f0:	20000508 	.word	0x20000508

080093f4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80093fc:	6879      	ldr	r1, [r7, #4]
 80093fe:	4807      	ldr	r0, [pc, #28]	; (800941c <TL_MM_EvtDone+0x28>)
 8009400:	f000 fa1a 	bl	8009838 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8009404:	6879      	ldr	r1, [r7, #4]
 8009406:	2000      	movs	r0, #0
 8009408:	f000 f862 	bl	80094d0 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800940c:	4804      	ldr	r0, [pc, #16]	; (8009420 <TL_MM_EvtDone+0x2c>)
 800940e:	f002 ffe3 	bl	800c3d8 <HW_IPCC_MM_SendFreeBuf>

  return;
 8009412:	bf00      	nop
}
 8009414:	3708      	adds	r7, #8
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	200004f0 	.word	0x200004f0
 8009420:	08009425 	.word	0x08009425

08009424 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800942a:	e00c      	b.n	8009446 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800942c:	1d3b      	adds	r3, r7, #4
 800942e:	4619      	mov	r1, r3
 8009430:	480a      	ldr	r0, [pc, #40]	; (800945c <SendFreeBuf+0x38>)
 8009432:	f000 fa48 	bl	80098c6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8009436:	4b0a      	ldr	r3, [pc, #40]	; (8009460 <SendFreeBuf+0x3c>)
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	691b      	ldr	r3, [r3, #16]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	4611      	mov	r1, r2
 8009440:	4618      	mov	r0, r3
 8009442:	f000 f9f9 	bl	8009838 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009446:	4805      	ldr	r0, [pc, #20]	; (800945c <SendFreeBuf+0x38>)
 8009448:	f000 f9ae 	bl	80097a8 <LST_is_empty>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d0ec      	beq.n	800942c <SendFreeBuf+0x8>
  }

  return;
 8009452:	bf00      	nop
}
 8009454:	3708      	adds	r7, #8
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	200004f0 	.word	0x200004f0
 8009460:	20030000 	.word	0x20030000

08009464 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8009468:	4805      	ldr	r0, [pc, #20]	; (8009480 <TL_TRACES_Init+0x1c>)
 800946a:	f000 f98d 	bl	8009788 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800946e:	4b05      	ldr	r3, [pc, #20]	; (8009484 <TL_TRACES_Init+0x20>)
 8009470:	695b      	ldr	r3, [r3, #20]
 8009472:	4a03      	ldr	r2, [pc, #12]	; (8009480 <TL_TRACES_Init+0x1c>)
 8009474:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8009476:	f002 ffe5 	bl	800c444 <HW_IPCC_TRACES_Init>

  return;
 800947a:	bf00      	nop
}
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	200300c0 	.word	0x200300c0
 8009484:	20030000 	.word	0x20030000

08009488 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800948e:	e008      	b.n	80094a2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8009490:	1d3b      	adds	r3, r7, #4
 8009492:	4619      	mov	r1, r3
 8009494:	4808      	ldr	r0, [pc, #32]	; (80094b8 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009496:	f000 fa16 	bl	80098c6 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4618      	mov	r0, r3
 800949e:	f000 f80d 	bl	80094bc <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80094a2:	4805      	ldr	r0, [pc, #20]	; (80094b8 <HW_IPCC_TRACES_EvtNot+0x30>)
 80094a4:	f000 f980 	bl	80097a8 <LST_is_empty>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d0f0      	beq.n	8009490 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80094ae:	bf00      	nop
}
 80094b0:	3708      	adds	r7, #8
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	200300c0 	.word	0x200300c0

080094bc <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80094c4:	bf00      	nop
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	4603      	mov	r3, r0
 80094d8:	6039      	str	r1, [r7, #0]
 80094da:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80094dc:	79fb      	ldrb	r3, [r7, #7]
 80094de:	2b06      	cmp	r3, #6
 80094e0:	d845      	bhi.n	800956e <OutputDbgTrace+0x9e>
 80094e2:	a201      	add	r2, pc, #4	; (adr r2, 80094e8 <OutputDbgTrace+0x18>)
 80094e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e8:	08009505 	.word	0x08009505
 80094ec:	08009529 	.word	0x08009529
 80094f0:	0800952f 	.word	0x0800952f
 80094f4:	08009543 	.word	0x08009543
 80094f8:	0800954f 	.word	0x0800954f
 80094fc:	08009555 	.word	0x08009555
 8009500:	08009563 	.word	0x08009563
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	7a5b      	ldrb	r3, [r3, #9]
 800950c:	2bff      	cmp	r3, #255	; 0xff
 800950e:	d005      	beq.n	800951c <OutputDbgTrace+0x4c>
 8009510:	2bff      	cmp	r3, #255	; 0xff
 8009512:	dc05      	bgt.n	8009520 <OutputDbgTrace+0x50>
 8009514:	2b0e      	cmp	r3, #14
 8009516:	d005      	beq.n	8009524 <OutputDbgTrace+0x54>
 8009518:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800951a:	e001      	b.n	8009520 <OutputDbgTrace+0x50>
          break;
 800951c:	bf00      	nop
 800951e:	e027      	b.n	8009570 <OutputDbgTrace+0xa0>
          break;
 8009520:	bf00      	nop
 8009522:	e025      	b.n	8009570 <OutputDbgTrace+0xa0>
          break;
 8009524:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8009526:	e023      	b.n	8009570 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800952c:	e020      	b.n	8009570 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	7a5b      	ldrb	r3, [r3, #9]
 8009536:	2b0e      	cmp	r3, #14
 8009538:	d001      	beq.n	800953e <OutputDbgTrace+0x6e>
 800953a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800953c:	e000      	b.n	8009540 <OutputDbgTrace+0x70>
          break;
 800953e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009540:	e016      	b.n	8009570 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	7a5b      	ldrb	r3, [r3, #9]
 800954a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800954c:	e010      	b.n	8009570 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009552:	e00d      	b.n	8009570 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	7a5b      	ldrb	r3, [r3, #9]
 800955c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800955e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009560:	e006      	b.n	8009570 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	7a5b      	ldrb	r3, [r3, #9]
 800956a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800956c:	e000      	b.n	8009570 <OutputDbgTrace+0xa0>

    default:
      break;
 800956e:	bf00      	nop
  }

  return;
 8009570:	bf00      	nop
}
 8009572:	3714      	adds	r7, #20
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 8009588:	215c      	movs	r1, #92	; 0x5c
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f003 fafc 	bl	800cb88 <strrchr>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d007      	beq.n	80095a6 <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 8009596:	215c      	movs	r1, #92	; 0x5c
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f003 faf5 	bl	800cb88 <strrchr>
 800959e:	4603      	mov	r3, r0
 80095a0:	3301      	adds	r3, #1
 80095a2:	60fb      	str	r3, [r7, #12]
 80095a4:	e00d      	b.n	80095c2 <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 80095a6:	212f      	movs	r1, #47	; 0x2f
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f003 faed 	bl	800cb88 <strrchr>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d006      	beq.n	80095c2 <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 80095b4:	212f      	movs	r1, #47	; 0x2f
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f003 fae6 	bl	800cb88 <strrchr>
 80095bc:	4603      	mov	r3, r0
 80095be:	3301      	adds	r3, #1
 80095c0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80095c2:	68fb      	ldr	r3, [r7, #12]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b086      	sub	sp, #24
 80095d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095d2:	f3ef 8310 	mrs	r3, PRIMASK
 80095d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80095d8:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 80095da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80095dc:	b672      	cpsid	i
}
 80095de:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 80095e0:	1cbb      	adds	r3, r7, #2
 80095e2:	4619      	mov	r1, r3
 80095e4:	4812      	ldr	r0, [pc, #72]	; (8009630 <DbgTrace_TxCpltCallback+0x64>)
 80095e6:	f000 fbe6 	bl	8009db6 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 80095ea:	1cbb      	adds	r3, r7, #2
 80095ec:	4619      	mov	r1, r3
 80095ee:	4810      	ldr	r0, [pc, #64]	; (8009630 <DbgTrace_TxCpltCallback+0x64>)
 80095f0:	f000 fcd2 	bl	8009f98 <CircularQueue_Sense>
 80095f4:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00c      	beq.n	8009616 <DbgTrace_TxCpltCallback+0x4a>
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	f383 8810 	msr	PRIMASK, r3
}
 8009606:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8009608:	887b      	ldrh	r3, [r7, #2]
 800960a:	4a0a      	ldr	r2, [pc, #40]	; (8009634 <DbgTrace_TxCpltCallback+0x68>)
 800960c:	4619      	mov	r1, r3
 800960e:	6938      	ldr	r0, [r7, #16]
 8009610:	f7f7 fb9f 	bl	8000d52 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8009614:	e008      	b.n	8009628 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8009616:	4b08      	ldr	r3, [pc, #32]	; (8009638 <DbgTrace_TxCpltCallback+0x6c>)
 8009618:	2201      	movs	r2, #1
 800961a:	701a      	strb	r2, [r3, #0]
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f383 8810 	msr	PRIMASK, r3
}
 8009626:	bf00      	nop
}
 8009628:	bf00      	nop
 800962a:	3718      	adds	r7, #24
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	2000050c 	.word	0x2000050c
 8009634:	080095cd 	.word	0x080095cd
 8009638:	2000000d 	.word	0x2000000d

0800963c <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8009642:	f7f7 fb80 	bl	8000d46 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8009646:	2302      	movs	r3, #2
 8009648:	9300      	str	r3, [sp, #0]
 800964a:	2300      	movs	r3, #0
 800964c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009650:	4903      	ldr	r1, [pc, #12]	; (8009660 <DbgTraceInit+0x24>)
 8009652:	4804      	ldr	r0, [pc, #16]	; (8009664 <DbgTraceInit+0x28>)
 8009654:	f000 f956 	bl	8009904 <CircularQueue_Init>
#endif 
#endif
  return;
 8009658:	bf00      	nop
}
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	2000052c 	.word	0x2000052c
 8009664:	2000050c 	.word	0x2000050c

08009668 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	68b9      	ldr	r1, [r7, #8]
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f000 f805 	bl	8009688 <DbgTraceWrite>
 800967e:	4603      	mov	r3, r0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b08a      	sub	sp, #40	; 0x28
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8009694:	2300      	movs	r3, #0
 8009696:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009698:	f3ef 8310 	mrs	r3, PRIMASK
 800969c:	61bb      	str	r3, [r7, #24]
  return(result);
 800969e:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 80096a0:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a8:	d102      	bne.n	80096b0 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 80096aa:	2300      	movs	r3, #0
 80096ac:	627b      	str	r3, [r7, #36]	; 0x24
 80096ae:	e037      	b.n	8009720 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d006      	beq.n	80096c4 <DbgTraceWrite+0x3c>
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2b02      	cmp	r3, #2
 80096ba:	d003      	beq.n	80096c4 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 80096bc:	f04f 33ff 	mov.w	r3, #4294967295
 80096c0:	627b      	str	r3, [r7, #36]	; 0x24
 80096c2:	e02d      	b.n	8009720 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d02a      	beq.n	8009720 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80096ce:	b672      	cpsid	i
}
 80096d0:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	2301      	movs	r3, #1
 80096d8:	68b9      	ldr	r1, [r7, #8]
 80096da:	4814      	ldr	r0, [pc, #80]	; (800972c <DbgTraceWrite+0xa4>)
 80096dc:	f000 f944 	bl	8009968 <CircularQueue_Add>
 80096e0:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d015      	beq.n	8009714 <DbgTraceWrite+0x8c>
 80096e8:	4b11      	ldr	r3, [pc, #68]	; (8009730 <DbgTraceWrite+0xa8>)
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d010      	beq.n	8009714 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 80096f2:	4b0f      	ldr	r3, [pc, #60]	; (8009730 <DbgTraceWrite+0xa8>)
 80096f4:	2200      	movs	r2, #0
 80096f6:	701a      	strb	r2, [r3, #0]
 80096f8:	6a3b      	ldr	r3, [r7, #32]
 80096fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	f383 8810 	msr	PRIMASK, r3
}
 8009702:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	b29b      	uxth	r3, r3
 8009708:	4a0a      	ldr	r2, [pc, #40]	; (8009734 <DbgTraceWrite+0xac>)
 800970a:	4619      	mov	r1, r3
 800970c:	69f8      	ldr	r0, [r7, #28]
 800970e:	f7f7 fb20 	bl	8000d52 <DbgOutputTraces>
 8009712:	e005      	b.n	8009720 <DbgTraceWrite+0x98>
 8009714:	6a3b      	ldr	r3, [r7, #32]
 8009716:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	f383 8810 	msr	PRIMASK, r3
}
 800971e:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009722:	4618      	mov	r0, r3
 8009724:	3728      	adds	r7, #40	; 0x28
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	2000050c 	.word	0x2000050c
 8009730:	2000000d 	.word	0x2000000d
 8009734:	080095cd 	.word	0x080095cd

08009738 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8009738:	b480      	push	{r7}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	4603      	mov	r3, r0
 8009740:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8009742:	4b0f      	ldr	r3, [pc, #60]	; (8009780 <OTP_Read+0x48>)
 8009744:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009746:	e002      	b.n	800974e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	3b08      	subs	r3, #8
 800974c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	3307      	adds	r3, #7
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	79fa      	ldrb	r2, [r7, #7]
 8009756:	429a      	cmp	r2, r3
 8009758:	d003      	beq.n	8009762 <OTP_Read+0x2a>
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	4a09      	ldr	r2, [pc, #36]	; (8009784 <OTP_Read+0x4c>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d1f2      	bne.n	8009748 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	3307      	adds	r3, #7
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	79fa      	ldrb	r2, [r7, #7]
 800976a:	429a      	cmp	r2, r3
 800976c:	d001      	beq.n	8009772 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800976e:	2300      	movs	r3, #0
 8009770:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009772:	68fb      	ldr	r3, [r7, #12]
}
 8009774:	4618      	mov	r0, r3
 8009776:	3714      	adds	r7, #20
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr
 8009780:	1fff73f8 	.word	0x1fff73f8
 8009784:	1fff7000 	.word	0x1fff7000

08009788 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	605a      	str	r2, [r3, #4]
}
 800979c:	bf00      	nop
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b087      	sub	sp, #28
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097b0:	f3ef 8310 	mrs	r3, PRIMASK
 80097b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80097b6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80097b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80097ba:	b672      	cpsid	i
}
 80097bc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d102      	bne.n	80097ce <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80097c8:	2301      	movs	r3, #1
 80097ca:	75fb      	strb	r3, [r7, #23]
 80097cc:	e001      	b.n	80097d2 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80097ce:	2300      	movs	r3, #0
 80097d0:	75fb      	strb	r3, [r7, #23]
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	f383 8810 	msr	PRIMASK, r3
}
 80097dc:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80097de:	7dfb      	ldrb	r3, [r7, #23]
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	371c      	adds	r7, #28
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b087      	sub	sp, #28
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097f6:	f3ef 8310 	mrs	r3, PRIMASK
 80097fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80097fc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80097fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009800:	b672      	cpsid	i
}
 8009802:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	683a      	ldr	r2, [r7, #0]
 8009816:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	683a      	ldr	r2, [r7, #0]
 800981e:	605a      	str	r2, [r3, #4]
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	f383 8810 	msr	PRIMASK, r3
}
 800982a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800982c:	bf00      	nop
 800982e:	371c      	adds	r7, #28
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8009838:	b480      	push	{r7}
 800983a:	b087      	sub	sp, #28
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009842:	f3ef 8310 	mrs	r3, PRIMASK
 8009846:	60fb      	str	r3, [r7, #12]
  return(result);
 8009848:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800984a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800984c:	b672      	cpsid	i
}
 800984e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	685a      	ldr	r2, [r3, #4]
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	683a      	ldr	r2, [r7, #0]
 8009862:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	683a      	ldr	r2, [r7, #0]
 800986a:	601a      	str	r2, [r3, #0]
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	f383 8810 	msr	PRIMASK, r3
}
 8009876:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009878:	bf00      	nop
 800987a:	371c      	adds	r7, #28
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8009884:	b480      	push	{r7}
 8009886:	b087      	sub	sp, #28
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800988c:	f3ef 8310 	mrs	r3, PRIMASK
 8009890:	60fb      	str	r3, [r7, #12]
  return(result);
 8009892:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009894:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009896:	b672      	cpsid	i
}
 8009898:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	6812      	ldr	r2, [r2, #0]
 80098a2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	6852      	ldr	r2, [r2, #4]
 80098ac:	605a      	str	r2, [r3, #4]
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	f383 8810 	msr	PRIMASK, r3
}
 80098b8:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80098ba:	bf00      	nop
 80098bc:	371c      	adds	r7, #28
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr

080098c6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b086      	sub	sp, #24
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
 80098ce:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098d0:	f3ef 8310 	mrs	r3, PRIMASK
 80098d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80098d6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80098d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80098da:	b672      	cpsid	i
}
 80098dc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7ff ffca 	bl	8009884 <LST_remove_node>
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	f383 8810 	msr	PRIMASK, r3
}
 80098fa:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80098fc:	bf00      	nop
 80098fe:	3718      	adds	r7, #24
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8009904:	b480      	push	{r7}
 8009906:	b085      	sub	sp, #20
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	607a      	str	r2, [r7, #4]
 8009910:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	68ba      	ldr	r2, [r7, #8]
 8009916:	601a      	str	r2, [r3, #0]
  q->first = 0;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2200      	movs	r2, #0
 800991c:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2200      	movs	r2, #0
 8009922:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2200      	movs	r2, #0
 8009928:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2200      	movs	r2, #0
 800992e:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	887a      	ldrh	r2, [r7, #2]
 800993a:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	7e3a      	ldrb	r2, [r7, #24]
 8009940:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 8009942:	7e3b      	ldrb	r3, [r7, #24]
 8009944:	f003 0302 	and.w	r3, r3, #2
 8009948:	2b00      	cmp	r3, #0
 800994a:	d006      	beq.n	800995a <CircularQueue_Init+0x56>
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	891b      	ldrh	r3, [r3, #8]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d002      	beq.n	800995a <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 8009954:	f04f 33ff 	mov.w	r3, #4294967295
 8009958:	e000      	b.n	800995c <CircularQueue_Init+0x58>
  }
  return 0;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3714      	adds	r7, #20
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b08e      	sub	sp, #56	; 0x38
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	603b      	str	r3, [r7, #0]
 8009974:	4613      	mov	r3, r2
 8009976:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8009978:	2300      	movs	r3, #0
 800997a:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800997c:	2300      	movs	r3, #0
 800997e:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 8009980:	2300      	movs	r3, #0
 8009982:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8009984:	2300      	movs	r3, #0
 8009986:	62bb      	str	r3, [r7, #40]	; 0x28
 8009988:	2300      	movs	r3, #0
 800998a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800998c:	2300      	movs	r3, #0
 800998e:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8009990:	2300      	movs	r3, #0
 8009992:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	891b      	ldrh	r3, [r3, #8]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d101      	bne.n	80099a0 <CircularQueue_Add+0x38>
 800999c:	2302      	movs	r3, #2
 800999e:	e000      	b.n	80099a2 <CircularQueue_Add+0x3a>
 80099a0:	2300      	movs	r3, #0
 80099a2:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	695b      	ldr	r3, [r3, #20]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d02a      	beq.n	8009a02 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	891b      	ldrh	r3, [r3, #8]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d123      	bne.n	80099fc <CircularQueue_Add+0x94>
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	691b      	ldr	r3, [r3, #16]
 80099bc:	4413      	add	r3, r2
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6819      	ldr	r1, [r3, #0]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	1c58      	adds	r0, r3, #1
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	4298      	cmp	r0, r3
 80099d2:	d306      	bcc.n	80099e2 <CircularQueue_Add+0x7a>
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	6918      	ldr	r0, [r3, #16]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	1ac3      	subs	r3, r0, r3
 80099de:	3301      	adds	r3, #1
 80099e0:	e002      	b.n	80099e8 <CircularQueue_Add+0x80>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	3301      	adds	r3, #1
 80099e8:	440b      	add	r3, r1
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	021b      	lsls	r3, r3, #8
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	4413      	add	r3, r2
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	3302      	adds	r3, #2
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	e001      	b.n	8009a00 <CircularQueue_Add+0x98>
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	891b      	ldrh	r3, [r3, #8]
 8009a00:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	891b      	ldrh	r3, [r3, #8]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d002      	beq.n	8009a10 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	891b      	ldrh	r3, [r3, #8]
 8009a0e:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	691a      	ldr	r2, [r3, #16]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d307      	bcc.n	8009a2c <CircularQueue_Add+0xc4>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6919      	ldr	r1, [r3, #16]
 8009a24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009a26:	440b      	add	r3, r1
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	e000      	b.n	8009a2e <CircularQueue_Add+0xc6>
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8009a30:	88fa      	ldrh	r2, [r7, #6]
 8009a32:	7ffb      	ldrb	r3, [r7, #31]
 8009a34:	4413      	add	r3, r2
 8009a36:	461a      	mov	r2, r3
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	fb02 f303 	mul.w	r3, r2, r3
 8009a3e:	69ba      	ldr	r2, [r7, #24]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d80b      	bhi.n	8009a5c <CircularQueue_Add+0xf4>
 8009a44:	88fa      	ldrh	r2, [r7, #6]
 8009a46:	7ffb      	ldrb	r3, [r7, #31]
 8009a48:	4413      	add	r3, r2
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a52:	fb01 f202 	mul.w	r2, r1, r2
 8009a56:	1a9b      	subs	r3, r3, r2
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	e000      	b.n	8009a5e <CircularQueue_Add+0xf6>
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8009a60:	7dfa      	ldrb	r2, [r7, #23]
 8009a62:	7ffb      	ldrb	r3, [r7, #31]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	bf8c      	ite	hi
 8009a68:	2301      	movhi	r3, #1
 8009a6a:	2300      	movls	r3, #0
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8009a70:	7fbb      	ldrb	r3, [r7, #30]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d008      	beq.n	8009a88 <CircularQueue_Add+0x120>
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	7f1b      	ldrb	r3, [r3, #28]
 8009a7a:	f003 0301 	and.w	r3, r3, #1
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d002      	beq.n	8009a88 <CircularQueue_Add+0x120>
 8009a82:	7dfb      	ldrb	r3, [r7, #23]
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	e000      	b.n	8009a8a <CircularQueue_Add+0x122>
 8009a88:	8bbb      	ldrh	r3, [r7, #28]
 8009a8a:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8009a8c:	7fbb      	ldrb	r3, [r7, #30]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d008      	beq.n	8009aa4 <CircularQueue_Add+0x13c>
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	7f1b      	ldrb	r3, [r3, #28]
 8009a96:	f003 0302 	and.w	r3, r3, #2
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d002      	beq.n	8009aa4 <CircularQueue_Add+0x13c>
 8009a9e:	7ffb      	ldrb	r3, [r7, #31]
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	e000      	b.n	8009aa6 <CircularQueue_Add+0x13e>
 8009aa4:	8bbb      	ldrh	r3, [r7, #28]
 8009aa6:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8009aa8:	88fb      	ldrh	r3, [r7, #6]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	f000 817e 	beq.w	8009dac <CircularQueue_Add+0x444>
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	695a      	ldr	r2, [r3, #20]
 8009ab4:	88f9      	ldrh	r1, [r7, #6]
 8009ab6:	7ffb      	ldrb	r3, [r7, #31]
 8009ab8:	440b      	add	r3, r1
 8009aba:	4619      	mov	r1, r3
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	fb01 f303 	mul.w	r3, r1, r3
 8009ac2:	441a      	add	r2, r3
 8009ac4:	8bbb      	ldrh	r3, [r7, #28]
 8009ac6:	441a      	add	r2, r3
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	f200 816d 	bhi.w	8009dac <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ad6:	e14a      	b.n	8009d6e <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	691a      	ldr	r2, [r3, #16]
 8009adc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009ade:	441a      	add	r2, r3
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d307      	bcc.n	8009af8 <CircularQueue_Add+0x190>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	691a      	ldr	r2, [r3, #16]
 8009aec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009aee:	441a      	add	r2, r3
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	1ad3      	subs	r3, r2, r3
 8009af6:	e003      	b.n	8009b00 <CircularQueue_Add+0x198>
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	691a      	ldr	r2, [r3, #16]
 8009afc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009afe:	4413      	add	r3, r2
 8009b00:	68fa      	ldr	r2, [r7, #12]
 8009b02:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	691b      	ldr	r3, [r3, #16]
 8009b08:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	891b      	ldrh	r3, [r3, #8]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d130      	bne.n	8009b74 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b18:	1c59      	adds	r1, r3, #1
 8009b1a:	6339      	str	r1, [r7, #48]	; 0x30
 8009b1c:	4413      	add	r3, r2
 8009b1e:	88fa      	ldrh	r2, [r7, #6]
 8009b20:	b2d2      	uxtb	r2, r2
 8009b22:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d304      	bcc.n	8009b38 <CircularQueue_Add+0x1d0>
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b34:	1ad3      	subs	r3, r2, r3
 8009b36:	e000      	b.n	8009b3a <CircularQueue_Add+0x1d2>
 8009b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3a:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8009b3c:	88fb      	ldrh	r3, [r7, #6]
 8009b3e:	0a1b      	lsrs	r3, r3, #8
 8009b40:	b298      	uxth	r0, r3
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b48:	1c59      	adds	r1, r3, #1
 8009b4a:	6339      	str	r1, [r7, #48]	; 0x30
 8009b4c:	4413      	add	r3, r2
 8009b4e:	b2c2      	uxtb	r2, r0
 8009b50:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d304      	bcc.n	8009b66 <CircularQueue_Add+0x1fe>
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b62:	1ad3      	subs	r3, r2, r3
 8009b64:	e000      	b.n	8009b68 <CircularQueue_Add+0x200>
 8009b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b68:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	695b      	ldr	r3, [r3, #20]
 8009b6e:	1c9a      	adds	r2, r3, #2
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8009b74:	88fa      	ldrh	r2, [r7, #6]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6859      	ldr	r1, [r3, #4]
 8009b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7c:	1acb      	subs	r3, r1, r3
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	bf28      	it	cs
 8009b82:	4613      	movcs	r3, r2
 8009b84:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8009b86:	88fb      	ldrh	r3, [r7, #6]
 8009b88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d007      	beq.n	8009b9e <CircularQueue_Add+0x236>
 8009b8e:	88fb      	ldrh	r3, [r7, #6]
 8009b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d225      	bcs.n	8009be2 <CircularQueue_Add+0x27a>
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	7f1b      	ldrb	r3, [r3, #28]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d121      	bne.n	8009be2 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba4:	18d0      	adds	r0, r2, r3
 8009ba6:	88fb      	ldrh	r3, [r7, #6]
 8009ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009baa:	fb02 f303 	mul.w	r3, r2, r3
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	f002 ff05 	bl	800c9c4 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	695a      	ldr	r2, [r3, #20]
 8009bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc0:	441a      	add	r2, r3
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8009bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bcc:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8009bce:	88fa      	ldrh	r2, [r7, #6]
 8009bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd2:	1ad3      	subs	r3, r2, r3
 8009bd4:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8009bd6:	7ffb      	ldrb	r3, [r7, #31]
 8009bd8:	b29a      	uxth	r2, r3
 8009bda:	88fb      	ldrh	r3, [r7, #6]
 8009bdc:	4413      	add	r3, r2
 8009bde:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009be0:	e0a4      	b.n	8009d2c <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8009be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f000 80a1 	beq.w	8009d2c <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	7f1b      	ldrb	r3, [r3, #28]
 8009bee:	f003 0301 	and.w	r3, r3, #1
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d03a      	beq.n	8009c6c <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	891b      	ldrh	r3, [r3, #8]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d10d      	bne.n	8009c1a <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c04:	3b02      	subs	r3, #2
 8009c06:	4413      	add	r3, r2
 8009c08:	22ff      	movs	r2, #255	; 0xff
 8009c0a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c12:	3b01      	subs	r3, #1
 8009c14:	4413      	add	r3, r2
 8009c16:	22ff      	movs	r2, #255	; 0xff
 8009c18:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	695a      	ldr	r2, [r3, #20]
 8009c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c20:	441a      	add	r2, r3
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 8009c26:	2300      	movs	r3, #0
 8009c28:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8009c2a:	88fb      	ldrh	r3, [r7, #6]
 8009c2c:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8009c2e:	2300      	movs	r3, #0
 8009c30:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	891b      	ldrh	r3, [r3, #8]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d16f      	bne.n	8009d1a <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c40:	1c59      	adds	r1, r3, #1
 8009c42:	6339      	str	r1, [r7, #48]	; 0x30
 8009c44:	4413      	add	r3, r2
 8009c46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c48:	b2d2      	uxtb	r2, r2
 8009c4a:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4e:	0a18      	lsrs	r0, r3, #8
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c56:	1c59      	adds	r1, r3, #1
 8009c58:	6339      	str	r1, [r7, #48]	; 0x30
 8009c5a:	4413      	add	r3, r2
 8009c5c:	b2c2      	uxtb	r2, r0
 8009c5e:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	695b      	ldr	r3, [r3, #20]
 8009c64:	1c9a      	adds	r2, r3, #2
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	615a      	str	r2, [r3, #20]
 8009c6a:	e056      	b.n	8009d1a <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	7f1b      	ldrb	r3, [r3, #28]
 8009c70:	f003 0302 	and.w	r3, r3, #2
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d050      	beq.n	8009d1a <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	891b      	ldrh	r3, [r3, #8]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d14a      	bne.n	8009d16 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c86:	3b02      	subs	r3, #2
 8009c88:	4413      	add	r3, r2
 8009c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c8c:	b2d2      	uxtb	r2, r2
 8009c8e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c92:	0a19      	lsrs	r1, r3, #8
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	4413      	add	r3, r2
 8009c9e:	b2ca      	uxtb	r2, r1
 8009ca0:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca8:	18d0      	adds	r0, r2, r3
 8009caa:	88fb      	ldrh	r3, [r7, #6]
 8009cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cae:	fb02 f303 	mul.w	r3, r2, r3
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cb8:	4619      	mov	r1, r3
 8009cba:	f002 fe83 	bl	800c9c4 <memcpy>
             q->byteCount += NbBytesToCopy; 
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	695a      	ldr	r2, [r3, #20]
 8009cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc4:	441a      	add	r2, r3
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8009cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ccc:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8009cce:	88fa      	ldrh	r2, [r7, #6]
 8009cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	699b      	ldr	r3, [r3, #24]
 8009cda:	1c5a      	adds	r2, r3, #1
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cea:	1c59      	adds	r1, r3, #1
 8009cec:	6339      	str	r1, [r7, #48]	; 0x30
 8009cee:	4413      	add	r3, r2
 8009cf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cf2:	b2d2      	uxtb	r2, r2
 8009cf4:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf8:	0a18      	lsrs	r0, r3, #8
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d00:	1c59      	adds	r1, r3, #1
 8009d02:	6339      	str	r1, [r7, #48]	; 0x30
 8009d04:	4413      	add	r3, r2
 8009d06:	b2c2      	uxtb	r2, r0
 8009d08:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	695b      	ldr	r3, [r3, #20]
 8009d0e:	1c9a      	adds	r2, r3, #2
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	615a      	str	r2, [r3, #20]
 8009d14:	e001      	b.n	8009d1a <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 8009d16:	2300      	movs	r3, #0
 8009d18:	e049      	b.n	8009dae <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8009d1a:	7ffb      	ldrb	r3, [r7, #31]
 8009d1c:	b29a      	uxth	r2, r3
 8009d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	4413      	add	r3, r2
 8009d24:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 8009d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d015      	beq.n	8009d5e <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d38:	18d0      	adds	r0, r2, r3
 8009d3a:	88fb      	ldrh	r3, [r7, #6]
 8009d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d3e:	fb03 f202 	mul.w	r2, r3, r2
 8009d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d44:	4413      	add	r3, r2
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	4413      	add	r3, r2
 8009d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	f002 fe39 	bl	800c9c4 <memcpy>
        q->byteCount += NbBytesToCopy;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	695a      	ldr	r2, [r3, #20]
 8009d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d58:	441a      	add	r2, r3
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	699b      	ldr	r3, [r3, #24]
 8009d62:	1c5a      	adds	r2, r3, #1
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8009d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	f4ff aeb0 	bcc.w	8009ad8 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	6919      	ldr	r1, [r3, #16]
 8009d80:	7ffb      	ldrb	r3, [r7, #31]
 8009d82:	4419      	add	r1, r3
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	4299      	cmp	r1, r3
 8009d8a:	d307      	bcc.n	8009d9c <CircularQueue_Add+0x434>
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	6919      	ldr	r1, [r3, #16]
 8009d90:	7ffb      	ldrb	r3, [r7, #31]
 8009d92:	4419      	add	r1, r3
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	1acb      	subs	r3, r1, r3
 8009d9a:	e003      	b.n	8009da4 <CircularQueue_Add+0x43c>
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	6919      	ldr	r1, [r3, #16]
 8009da0:	7ffb      	ldrb	r3, [r7, #31]
 8009da2:	440b      	add	r3, r1
 8009da4:	4413      	add	r3, r2
 8009da6:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8009da8:	6a3b      	ldr	r3, [r7, #32]
 8009daa:	e000      	b.n	8009dae <CircularQueue_Add+0x446>
    return NULL;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3738      	adds	r7, #56	; 0x38
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8009db6:	b480      	push	{r7}
 8009db8:	b085      	sub	sp, #20
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
 8009dbe:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	891b      	ldrh	r3, [r3, #8]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d101      	bne.n	8009dd4 <CircularQueue_Remove+0x1e>
 8009dd0:	2302      	movs	r3, #2
 8009dd2:	e000      	b.n	8009dd6 <CircularQueue_Remove+0x20>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	695b      	ldr	r3, [r3, #20]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f000 80cc 	beq.w	8009f7e <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	891b      	ldrh	r3, [r3, #8]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d121      	bne.n	8009e32 <CircularQueue_Remove+0x7c>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	68db      	ldr	r3, [r3, #12]
 8009df6:	4413      	add	r3, r2
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	b29a      	uxth	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6819      	ldr	r1, [r3, #0]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	1c58      	adds	r0, r3, #1
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	4298      	cmp	r0, r3
 8009e0c:	d306      	bcc.n	8009e1c <CircularQueue_Remove+0x66>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	68d8      	ldr	r0, [r3, #12]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	1ac3      	subs	r3, r0, r3
 8009e18:	3301      	adds	r3, #1
 8009e1a:	e002      	b.n	8009e22 <CircularQueue_Remove+0x6c>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	3301      	adds	r3, #1
 8009e22:	440b      	add	r3, r1
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	021b      	lsls	r3, r3, #8
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	4413      	add	r3, r2
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	e001      	b.n	8009e36 <CircularQueue_Remove+0x80>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	891b      	ldrh	r3, [r3, #8]
 8009e36:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	7f1b      	ldrb	r3, [r3, #28]
 8009e3c:	f003 0301 	and.w	r3, r3, #1
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d057      	beq.n	8009ef4 <CircularQueue_Remove+0x13e>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	7f1b      	ldrb	r3, [r3, #28]
 8009e48:	f003 0302 	and.w	r3, r3, #2
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d151      	bne.n	8009ef4 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8009e50:	897b      	ldrh	r3, [r7, #10]
 8009e52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d103      	bne.n	8009e62 <CircularQueue_Remove+0xac>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	891b      	ldrh	r3, [r3, #8]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d012      	beq.n	8009e88 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	68da      	ldr	r2, [r3, #12]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d942      	bls.n	8009ef4 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	891b      	ldrh	r3, [r3, #8]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d03e      	beq.n	8009ef4 <CircularQueue_Remove+0x13e>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	685a      	ldr	r2, [r3, #4]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	1ad3      	subs	r3, r2, r3
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	8912      	ldrh	r2, [r2, #8]
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d235      	bcs.n	8009ef4 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	695a      	ldr	r2, [r3, #20]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	68d9      	ldr	r1, [r3, #12]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	1acb      	subs	r3, r1, r3
 8009e96:	441a      	add	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	891b      	ldrh	r3, [r3, #8]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d121      	bne.n	8009eee <CircularQueue_Remove+0x138>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	68db      	ldr	r3, [r3, #12]
 8009eb2:	4413      	add	r3, r2
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	b29a      	uxth	r2, r3
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6819      	ldr	r1, [r3, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	68db      	ldr	r3, [r3, #12]
 8009ec0:	1c58      	adds	r0, r3, #1
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	4298      	cmp	r0, r3
 8009ec8:	d306      	bcc.n	8009ed8 <CircularQueue_Remove+0x122>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	68d8      	ldr	r0, [r3, #12]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	1ac3      	subs	r3, r0, r3
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	e002      	b.n	8009ede <CircularQueue_Remove+0x128>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	3301      	adds	r3, #1
 8009ede:	440b      	add	r3, r1
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	021b      	lsls	r3, r3, #8
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	4413      	add	r3, r2
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	e001      	b.n	8009ef2 <CircularQueue_Remove+0x13c>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	891b      	ldrh	r3, [r3, #8]
 8009ef2:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	68d9      	ldr	r1, [r3, #12]
 8009efc:	7a7b      	ldrb	r3, [r7, #9]
 8009efe:	4419      	add	r1, r3
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	4299      	cmp	r1, r3
 8009f06:	d307      	bcc.n	8009f18 <CircularQueue_Remove+0x162>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	68d9      	ldr	r1, [r3, #12]
 8009f0c:	7a7b      	ldrb	r3, [r7, #9]
 8009f0e:	4419      	add	r1, r3
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	1acb      	subs	r3, r1, r3
 8009f16:	e003      	b.n	8009f20 <CircularQueue_Remove+0x16a>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	68d9      	ldr	r1, [r3, #12]
 8009f1c:	7a7b      	ldrb	r3, [r7, #9]
 8009f1e:	440b      	add	r3, r1
 8009f20:	4413      	add	r3, r2
 8009f22:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	695b      	ldr	r3, [r3, #20]
 8009f28:	8979      	ldrh	r1, [r7, #10]
 8009f2a:	7a7a      	ldrb	r2, [r7, #9]
 8009f2c:	440a      	add	r2, r1
 8009f2e:	1a9a      	subs	r2, r3, r2
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	695b      	ldr	r3, [r3, #20]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d01b      	beq.n	8009f74 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	68da      	ldr	r2, [r3, #12]
 8009f40:	897b      	ldrh	r3, [r7, #10]
 8009f42:	441a      	add	r2, r3
 8009f44:	7a7b      	ldrb	r3, [r7, #9]
 8009f46:	441a      	add	r2, r3
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d309      	bcc.n	8009f64 <CircularQueue_Remove+0x1ae>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	68da      	ldr	r2, [r3, #12]
 8009f54:	897b      	ldrh	r3, [r7, #10]
 8009f56:	441a      	add	r2, r3
 8009f58:	7a7b      	ldrb	r3, [r7, #9]
 8009f5a:	441a      	add	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	1ad3      	subs	r3, r2, r3
 8009f62:	e005      	b.n	8009f70 <CircularQueue_Remove+0x1ba>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	68da      	ldr	r2, [r3, #12]
 8009f68:	897b      	ldrh	r3, [r7, #10]
 8009f6a:	441a      	add	r2, r3
 8009f6c:	7a7b      	ldrb	r3, [r7, #9]
 8009f6e:	4413      	add	r3, r2
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	699b      	ldr	r3, [r3, #24]
 8009f78:	1e5a      	subs	r2, r3, #1
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d002      	beq.n	8009f8a <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	897a      	ldrh	r2, [r7, #10]
 8009f88:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3714      	adds	r7, #20
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b087      	sub	sp, #28
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	891b      	ldrh	r3, [r3, #8]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d101      	bne.n	8009fb6 <CircularQueue_Sense+0x1e>
 8009fb2:	2302      	movs	r3, #2
 8009fb4:	e000      	b.n	8009fb8 <CircularQueue_Sense+0x20>
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	695b      	ldr	r3, [r3, #20]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	f000 8090 	beq.w	800a0ec <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	891b      	ldrh	r3, [r3, #8]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d121      	bne.n	800a01e <CircularQueue_Sense+0x86>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	4413      	add	r3, r2
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	b29a      	uxth	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6819      	ldr	r1, [r3, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	1c58      	adds	r0, r3, #1
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	4298      	cmp	r0, r3
 8009ff8:	d306      	bcc.n	800a008 <CircularQueue_Sense+0x70>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	68d8      	ldr	r0, [r3, #12]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	1ac3      	subs	r3, r0, r3
 800a004:	3301      	adds	r3, #1
 800a006:	e002      	b.n	800a00e <CircularQueue_Sense+0x76>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	3301      	adds	r3, #1
 800a00e:	440b      	add	r3, r1
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	b29b      	uxth	r3, r3
 800a014:	021b      	lsls	r3, r3, #8
 800a016:	b29b      	uxth	r3, r3
 800a018:	4413      	add	r3, r2
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	e001      	b.n	800a022 <CircularQueue_Sense+0x8a>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	891b      	ldrh	r3, [r3, #8]
 800a022:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	7f1b      	ldrb	r3, [r3, #28]
 800a028:	f003 0301 	and.w	r3, r3, #1
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d048      	beq.n	800a0c2 <CircularQueue_Sense+0x12a>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	7f1b      	ldrb	r3, [r3, #28]
 800a034:	f003 0302 	and.w	r3, r3, #2
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d142      	bne.n	800a0c2 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a03c:	8a7b      	ldrh	r3, [r7, #18]
 800a03e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a042:	4293      	cmp	r3, r2
 800a044:	d103      	bne.n	800a04e <CircularQueue_Sense+0xb6>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	891b      	ldrh	r3, [r3, #8]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d012      	beq.n	800a074 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	68da      	ldr	r2, [r3, #12]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a056:	429a      	cmp	r2, r3
 800a058:	d933      	bls.n	800a0c2 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	891b      	ldrh	r3, [r3, #8]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d02f      	beq.n	800a0c2 <CircularQueue_Sense+0x12a>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	685a      	ldr	r2, [r3, #4]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	1ad3      	subs	r3, r2, r3
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	8912      	ldrh	r2, [r2, #8]
 800a070:	4293      	cmp	r3, r2
 800a072:	d226      	bcs.n	800a0c2 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800a074:	2300      	movs	r3, #0
 800a076:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	891b      	ldrh	r3, [r3, #8]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d11d      	bne.n	800a0bc <CircularQueue_Sense+0x124>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	4413      	add	r3, r2
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	b29a      	uxth	r2, r3
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6819      	ldr	r1, [r3, #0]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	1c58      	adds	r0, r3, #1
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	4298      	cmp	r0, r3
 800a09a:	d305      	bcc.n	800a0a8 <CircularQueue_Sense+0x110>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	1ac3      	subs	r3, r0, r3
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	e001      	b.n	800a0ac <CircularQueue_Sense+0x114>
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	440b      	add	r3, r1
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	021b      	lsls	r3, r3, #8
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	4413      	add	r3, r2
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	e001      	b.n	800a0c0 <CircularQueue_Sense+0x128>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	891b      	ldrh	r3, [r3, #8]
 800a0c0:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	7af9      	ldrb	r1, [r7, #11]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	4419      	add	r1, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	4299      	cmp	r1, r3
 800a0d2:	d306      	bcc.n	800a0e2 <CircularQueue_Sense+0x14a>
 800a0d4:	7af9      	ldrb	r1, [r7, #11]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	4419      	add	r1, r3
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	1acb      	subs	r3, r1, r3
 800a0e0:	e002      	b.n	800a0e8 <CircularQueue_Sense+0x150>
 800a0e2:	7af9      	ldrb	r1, [r7, #11]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	440b      	add	r3, r1
 800a0e8:	4413      	add	r3, r2
 800a0ea:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d002      	beq.n	800a0f8 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	8a7a      	ldrh	r2, [r7, #18]
 800a0f6:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800a0f8:	697b      	ldr	r3, [r7, #20]
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	371c      	adds	r7, #28
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr
	...

0800a108 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800a108:	b480      	push	{r7}
 800a10a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800a10c:	4b03      	ldr	r3, [pc, #12]	; (800a11c <LL_FLASH_GetUDN+0x14>)
 800a10e:	681b      	ldr	r3, [r3, #0]
}
 800a110:	4618      	mov	r0, r3
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	1fff7580 	.word	0x1fff7580

0800a120 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800a120:	b480      	push	{r7}
 800a122:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800a124:	4b03      	ldr	r3, [pc, #12]	; (800a134 <LL_FLASH_GetDeviceID+0x14>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	b2db      	uxtb	r3, r3
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr
 800a134:	1fff7584 	.word	0x1fff7584

0800a138 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800a138:	b480      	push	{r7}
 800a13a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800a13c:	4b03      	ldr	r3, [pc, #12]	; (800a14c <LL_FLASH_GetSTCompanyID+0x14>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	0a1b      	lsrs	r3, r3, #8
}
 800a142:	4618      	mov	r0, r3
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr
 800a14c:	1fff7584 	.word	0x1fff7584

0800a150 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800a150:	b5b0      	push	{r4, r5, r7, lr}
 800a152:	b090      	sub	sp, #64	; 0x40
 800a154:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a156:	2392      	movs	r3, #146	; 0x92
 800a158:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800a15c:	4b45      	ldr	r3, [pc, #276]	; (800a274 <APP_BLE_Init+0x124>)
 800a15e:	1d3c      	adds	r4, r7, #4
 800a160:	461d      	mov	r5, r3
 800a162:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a164:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a16a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a16c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a16e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a172:	e884 0003 	stmia.w	r4, {r0, r1}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800a176:	f000 fb37 	bl	800a7e8 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800a17a:	2101      	movs	r1, #1
 800a17c:	2002      	movs	r0, #2
 800a17e:	f002 f989 	bl	800c494 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800a182:	4a3d      	ldr	r2, [pc, #244]	; (800a278 <APP_BLE_Init+0x128>)
 800a184:	2100      	movs	r1, #0
 800a186:	2002      	movs	r0, #2
 800a188:	f002 fab0 	bl	800c6ec <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800a18c:	1d3b      	adds	r3, r7, #4
 800a18e:	4618      	mov	r0, r3
 800a190:	f7fe fbf0 	bl	8008974 <SHCI_C2_BLE_Init>
 800a194:	4603      	mov	r3, r0
 800a196:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800a19a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d012      	beq.n	800a1c8 <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800a1a2:	4836      	ldr	r0, [pc, #216]	; (800a27c <APP_BLE_Init+0x12c>)
 800a1a4:	f7ff f9ea 	bl	800957c <DbgTraceGetFileName>
 800a1a8:	4601      	mov	r1, r0
 800a1aa:	f240 1345 	movw	r3, #325	; 0x145
 800a1ae:	4a34      	ldr	r2, [pc, #208]	; (800a280 <APP_BLE_Init+0x130>)
 800a1b0:	4834      	ldr	r0, [pc, #208]	; (800a284 <APP_BLE_Init+0x134>)
 800a1b2:	f002 fc1d 	bl	800c9f0 <iprintf>
 800a1b6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	4832      	ldr	r0, [pc, #200]	; (800a288 <APP_BLE_Init+0x138>)
 800a1be:	f002 fc17 	bl	800c9f0 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800a1c2:	f7f8 fcdb 	bl	8002b7c <Error_Handler>
 800a1c6:	e00c      	b.n	800a1e2 <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800a1c8:	482c      	ldr	r0, [pc, #176]	; (800a27c <APP_BLE_Init+0x12c>)
 800a1ca:	f7ff f9d7 	bl	800957c <DbgTraceGetFileName>
 800a1ce:	4601      	mov	r1, r0
 800a1d0:	f240 134b 	movw	r3, #331	; 0x14b
 800a1d4:	4a2a      	ldr	r2, [pc, #168]	; (800a280 <APP_BLE_Init+0x130>)
 800a1d6:	482b      	ldr	r0, [pc, #172]	; (800a284 <APP_BLE_Init+0x134>)
 800a1d8:	f002 fc0a 	bl	800c9f0 <iprintf>
 800a1dc:	482b      	ldr	r0, [pc, #172]	; (800a28c <APP_BLE_Init+0x13c>)
 800a1de:	f002 fc07 	bl	800c9f0 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800a1e2:	f000 fb17 	bl	800a814 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800a1e6:	f7fe fb1f 	bl	8008828 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a1ea:	4b29      	ldr	r3, [pc, #164]	; (800a290 <APP_BLE_Init+0x140>)
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800a1f2:	4b27      	ldr	r3, [pc, #156]	; (800a290 <APP_BLE_Init+0x140>)
 800a1f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1f8:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800a1fa:	4a26      	ldr	r2, [pc, #152]	; (800a294 <APP_BLE_Init+0x144>)
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	2001      	movs	r0, #1
 800a200:	f002 fa74 	bl	800c6ec <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800a204:	2006      	movs	r0, #6
 800a206:	f7fe f982 	bl	800850e <aci_hal_set_radio_activity_mask>
 800a20a:	4603      	mov	r3, r0
 800a20c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800a210:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a214:	2b00      	cmp	r3, #0
 800a216:	d010      	beq.n	800a23a <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800a218:	4818      	ldr	r0, [pc, #96]	; (800a27c <APP_BLE_Init+0x12c>)
 800a21a:	f7ff f9af 	bl	800957c <DbgTraceGetFileName>
 800a21e:	4601      	mov	r1, r0
 800a220:	f240 136f 	movw	r3, #367	; 0x16f
 800a224:	4a16      	ldr	r2, [pc, #88]	; (800a280 <APP_BLE_Init+0x130>)
 800a226:	4817      	ldr	r0, [pc, #92]	; (800a284 <APP_BLE_Init+0x134>)
 800a228:	f002 fbe2 	bl	800c9f0 <iprintf>
 800a22c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a230:	4619      	mov	r1, r3
 800a232:	4819      	ldr	r0, [pc, #100]	; (800a298 <APP_BLE_Init+0x148>)
 800a234:	f002 fbdc 	bl	800c9f0 <iprintf>
 800a238:	e00c      	b.n	800a254 <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800a23a:	4810      	ldr	r0, [pc, #64]	; (800a27c <APP_BLE_Init+0x12c>)
 800a23c:	f7ff f99e 	bl	800957c <DbgTraceGetFileName>
 800a240:	4601      	mov	r1, r0
 800a242:	f240 1373 	movw	r3, #371	; 0x173
 800a246:	4a0e      	ldr	r2, [pc, #56]	; (800a280 <APP_BLE_Init+0x130>)
 800a248:	480e      	ldr	r0, [pc, #56]	; (800a284 <APP_BLE_Init+0x134>)
 800a24a:	f002 fbd1 	bl	800c9f0 <iprintf>
 800a24e:	4813      	ldr	r0, [pc, #76]	; (800a29c <APP_BLE_Init+0x14c>)
 800a250:	f002 fbce 	bl	800c9f0 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800a254:	f000 ff7e 	bl	800b154 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800a258:	4b0d      	ldr	r3, [pc, #52]	; (800a290 <APP_BLE_Init+0x140>)
 800a25a:	2200      	movs	r2, #0
 800a25c:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800a25e:	4b0c      	ldr	r3, [pc, #48]	; (800a290 <APP_BLE_Init+0x140>)
 800a260:	2200      	movs	r2, #0
 800a262:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800a264:	2001      	movs	r0, #1
 800a266:	f000 fd69 	bl	800ad3c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800a26a:	bf00      	nop
}
 800a26c:	3740      	adds	r7, #64	; 0x40
 800a26e:	46bd      	mov	sp, r7
 800a270:	bdb0      	pop	{r4, r5, r7, pc}
 800a272:	bf00      	nop
 800a274:	0800e634 	.word	0x0800e634
 800a278:	08008b91 	.word	0x08008b91
 800a27c:	0800e528 	.word	0x0800e528
 800a280:	0800fd24 	.word	0x0800fd24
 800a284:	0800e544 	.word	0x0800e544
 800a288:	0800e558 	.word	0x0800e558
 800a28c:	0800e590 	.word	0x0800e590
 800a290:	20000198 	.word	0x20000198
 800a294:	0800aec1 	.word	0x0800aec1
 800a298:	0800e5b8 	.word	0x0800e5b8
 800a29c:	0800e5fc 	.word	0x0800e5fc

0800a2a0 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800a2a0:	b5b0      	push	{r4, r5, r7, lr}
 800a2a2:	b08e      	sub	sp, #56	; 0x38
 800a2a4:	af04      	add	r7, sp, #16
 800a2a6:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800a2a8:	2392      	movs	r3, #146	; 0x92
 800a2aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800a2b4:	6a3b      	ldr	r3, [r7, #32]
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	2bff      	cmp	r3, #255	; 0xff
 800a2ba:	f000 811d 	beq.w	800a4f8 <SVCCTL_App_Notification+0x258>
 800a2be:	2bff      	cmp	r3, #255	; 0xff
 800a2c0:	f300 8269 	bgt.w	800a796 <SVCCTL_App_Notification+0x4f6>
 800a2c4:	2b05      	cmp	r3, #5
 800a2c6:	d002      	beq.n	800a2ce <SVCCTL_App_Notification+0x2e>
 800a2c8:	2b3e      	cmp	r3, #62	; 0x3e
 800a2ca:	d042      	beq.n	800a352 <SVCCTL_App_Notification+0xb2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800a2cc:	e263      	b.n	800a796 <SVCCTL_App_Notification+0x4f6>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800a2ce:	6a3b      	ldr	r3, [r7, #32]
 800a2d0:	3302      	adds	r3, #2
 800a2d2:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a2da:	b29a      	uxth	r2, r3
 800a2dc:	4bb1      	ldr	r3, [pc, #708]	; (800a5a4 <SVCCTL_App_Notification+0x304>)
 800a2de:	8adb      	ldrh	r3, [r3, #22]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d128      	bne.n	800a336 <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800a2e4:	4baf      	ldr	r3, [pc, #700]	; (800a5a4 <SVCCTL_App_Notification+0x304>)
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a2ea:	4bae      	ldr	r3, [pc, #696]	; (800a5a4 <SVCCTL_App_Notification+0x304>)
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800a2f2:	48ad      	ldr	r0, [pc, #692]	; (800a5a8 <SVCCTL_App_Notification+0x308>)
 800a2f4:	f7ff f942 	bl	800957c <DbgTraceGetFileName>
 800a2f8:	4601      	mov	r1, r0
 800a2fa:	f240 13b7 	movw	r3, #439	; 0x1b7
 800a2fe:	4aab      	ldr	r2, [pc, #684]	; (800a5ac <SVCCTL_App_Notification+0x30c>)
 800a300:	48ab      	ldr	r0, [pc, #684]	; (800a5b0 <SVCCTL_App_Notification+0x310>)
 800a302:	f002 fb75 	bl	800c9f0 <iprintf>
 800a306:	48ab      	ldr	r0, [pc, #684]	; (800a5b4 <SVCCTL_App_Notification+0x314>)
 800a308:	f002 fc0e 	bl	800cb28 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800a30c:	48a6      	ldr	r0, [pc, #664]	; (800a5a8 <SVCCTL_App_Notification+0x308>)
 800a30e:	f7ff f935 	bl	800957c <DbgTraceGetFileName>
 800a312:	4601      	mov	r1, r0
 800a314:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 800a318:	4aa4      	ldr	r2, [pc, #656]	; (800a5ac <SVCCTL_App_Notification+0x30c>)
 800a31a:	48a5      	ldr	r0, [pc, #660]	; (800a5b0 <SVCCTL_App_Notification+0x310>)
 800a31c:	f002 fb68 	bl	800c9f0 <iprintf>
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a326:	b29b      	uxth	r3, r3
 800a328:	4619      	mov	r1, r3
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	78db      	ldrb	r3, [r3, #3]
 800a32e:	461a      	mov	r2, r3
 800a330:	48a1      	ldr	r0, [pc, #644]	; (800a5b8 <SVCCTL_App_Notification+0x318>)
 800a332:	f002 fb5d 	bl	800c9f0 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800a336:	2001      	movs	r0, #1
 800a338:	f000 fd00 	bl	800ad3c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800a33c:	4b9f      	ldr	r3, [pc, #636]	; (800a5bc <SVCCTL_App_Notification+0x31c>)
 800a33e:	2201      	movs	r2, #1
 800a340:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800a342:	4b98      	ldr	r3, [pc, #608]	; (800a5a4 <SVCCTL_App_Notification+0x304>)
 800a344:	8ada      	ldrh	r2, [r3, #22]
 800a346:	4b9d      	ldr	r3, [pc, #628]	; (800a5bc <SVCCTL_App_Notification+0x31c>)
 800a348:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800a34a:	489c      	ldr	r0, [pc, #624]	; (800a5bc <SVCCTL_App_Notification+0x31c>)
 800a34c:	f000 feee 	bl	800b12c <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800a350:	e224      	b.n	800a79c <SVCCTL_App_Notification+0x4fc>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800a352:	6a3b      	ldr	r3, [r7, #32]
 800a354:	3302      	adds	r3, #2
 800a356:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d042      	beq.n	800a3e6 <SVCCTL_App_Notification+0x146>
 800a360:	2b03      	cmp	r3, #3
 800a362:	f040 80c7 	bne.w	800a4f4 <SVCCTL_App_Notification+0x254>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	3301      	adds	r3, #1
 800a36a:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800a36c:	488e      	ldr	r0, [pc, #568]	; (800a5a8 <SVCCTL_App_Notification+0x308>)
 800a36e:	f7ff f905 	bl	800957c <DbgTraceGetFileName>
 800a372:	4601      	mov	r1, r0
 800a374:	f240 13df 	movw	r3, #479	; 0x1df
 800a378:	4a8c      	ldr	r2, [pc, #560]	; (800a5ac <SVCCTL_App_Notification+0x30c>)
 800a37a:	488d      	ldr	r0, [pc, #564]	; (800a5b0 <SVCCTL_App_Notification+0x310>)
 800a37c:	f002 fb38 	bl	800c9f0 <iprintf>
 800a380:	488f      	ldr	r0, [pc, #572]	; (800a5c0 <SVCCTL_App_Notification+0x320>)
 800a382:	f002 fbd1 	bl	800cb28 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800a386:	4888      	ldr	r0, [pc, #544]	; (800a5a8 <SVCCTL_App_Notification+0x308>)
 800a388:	f7ff f8f8 	bl	800957c <DbgTraceGetFileName>
 800a38c:	4601      	mov	r1, r0
 800a38e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800a392:	4a86      	ldr	r2, [pc, #536]	; (800a5ac <SVCCTL_App_Notification+0x30c>)
 800a394:	4886      	ldr	r0, [pc, #536]	; (800a5b0 <SVCCTL_App_Notification+0x310>)
 800a396:	f002 fb2b 	bl	800c9f0 <iprintf>
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7f6 f9c0 	bl	8000728 <__aeabi_i2d>
 800a3a8:	f04f 0200 	mov.w	r2, #0
 800a3ac:	4b85      	ldr	r3, [pc, #532]	; (800a5c4 <SVCCTL_App_Notification+0x324>)
 800a3ae:	f7f5 ff3f 	bl	8000230 <__aeabi_dmul>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	4610      	mov	r0, r2
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	461c      	mov	r4, r3
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	4413      	add	r3, r2
 800a3d4:	005b      	lsls	r3, r3, #1
 800a3d6:	9301      	str	r3, [sp, #4]
 800a3d8:	9400      	str	r4, [sp, #0]
 800a3da:	4602      	mov	r2, r0
 800a3dc:	460b      	mov	r3, r1
 800a3de:	487a      	ldr	r0, [pc, #488]	; (800a5c8 <SVCCTL_App_Notification+0x328>)
 800a3e0:	f002 fb06 	bl	800c9f0 <iprintf>
          break;
 800a3e4:	e087      	b.n	800a4f6 <SVCCTL_App_Notification+0x256>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800a3ec:	486e      	ldr	r0, [pc, #440]	; (800a5a8 <SVCCTL_App_Notification+0x308>)
 800a3ee:	f7ff f8c5 	bl	800957c <DbgTraceGetFileName>
 800a3f2:	4601      	mov	r1, r0
 800a3f4:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 800a3f8:	4a6c      	ldr	r2, [pc, #432]	; (800a5ac <SVCCTL_App_Notification+0x30c>)
 800a3fa:	486d      	ldr	r0, [pc, #436]	; (800a5b0 <SVCCTL_App_Notification+0x310>)
 800a3fc:	f002 faf8 	bl	800c9f0 <iprintf>
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a406:	b29b      	uxth	r3, r3
 800a408:	4619      	mov	r1, r3
 800a40a:	4870      	ldr	r0, [pc, #448]	; (800a5cc <SVCCTL_App_Notification+0x32c>)
 800a40c:	f002 faf0 	bl	800c9f0 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800a410:	4865      	ldr	r0, [pc, #404]	; (800a5a8 <SVCCTL_App_Notification+0x308>)
 800a412:	f7ff f8b3 	bl	800957c <DbgTraceGetFileName>
 800a416:	4601      	mov	r1, r0
 800a418:	f240 13f3 	movw	r3, #499	; 0x1f3
 800a41c:	4a63      	ldr	r2, [pc, #396]	; (800a5ac <SVCCTL_App_Notification+0x30c>)
 800a41e:	4864      	ldr	r0, [pc, #400]	; (800a5b0 <SVCCTL_App_Notification+0x310>)
 800a420:	f002 fae6 	bl	800c9f0 <iprintf>
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	7a9b      	ldrb	r3, [r3, #10]
 800a428:	4618      	mov	r0, r3
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	7a5b      	ldrb	r3, [r3, #9]
 800a42e:	461c      	mov	r4, r3
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	7a1b      	ldrb	r3, [r3, #8]
 800a434:	461d      	mov	r5, r3
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	79db      	ldrb	r3, [r3, #7]
 800a43a:	461a      	mov	r2, r3
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	799b      	ldrb	r3, [r3, #6]
 800a440:	4619      	mov	r1, r3
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	795b      	ldrb	r3, [r3, #5]
 800a446:	9302      	str	r3, [sp, #8]
 800a448:	9101      	str	r1, [sp, #4]
 800a44a:	9200      	str	r2, [sp, #0]
 800a44c:	462b      	mov	r3, r5
 800a44e:	4622      	mov	r2, r4
 800a450:	4601      	mov	r1, r0
 800a452:	485f      	ldr	r0, [pc, #380]	; (800a5d0 <SVCCTL_App_Notification+0x330>)
 800a454:	f002 facc 	bl	800c9f0 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800a458:	4853      	ldr	r0, [pc, #332]	; (800a5a8 <SVCCTL_App_Notification+0x308>)
 800a45a:	f7ff f88f 	bl	800957c <DbgTraceGetFileName>
 800a45e:	4601      	mov	r1, r0
 800a460:	f44f 73fd 	mov.w	r3, #506	; 0x1fa
 800a464:	4a51      	ldr	r2, [pc, #324]	; (800a5ac <SVCCTL_App_Notification+0x30c>)
 800a466:	4852      	ldr	r0, [pc, #328]	; (800a5b0 <SVCCTL_App_Notification+0x310>)
 800a468:	f002 fac2 	bl	800c9f0 <iprintf>
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800a472:	b29b      	uxth	r3, r3
 800a474:	4618      	mov	r0, r3
 800a476:	f7f6 f957 	bl	8000728 <__aeabi_i2d>
 800a47a:	f04f 0200 	mov.w	r2, #0
 800a47e:	4b51      	ldr	r3, [pc, #324]	; (800a5c4 <SVCCTL_App_Notification+0x324>)
 800a480:	f7f5 fed6 	bl	8000230 <__aeabi_dmul>
 800a484:	4602      	mov	r2, r0
 800a486:	460b      	mov	r3, r1
 800a488:	4610      	mov	r0, r2
 800a48a:	4619      	mov	r1, r3
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800a492:	b29b      	uxth	r3, r3
 800a494:	461c      	mov	r4, r3
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	461a      	mov	r2, r3
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	4413      	add	r3, r2
 800a4a6:	005b      	lsls	r3, r3, #1
 800a4a8:	9301      	str	r3, [sp, #4]
 800a4aa:	9400      	str	r4, [sp, #0]
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	4845      	ldr	r0, [pc, #276]	; (800a5c8 <SVCCTL_App_Notification+0x328>)
 800a4b2:	f002 fa9d 	bl	800c9f0 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800a4b6:	4b3b      	ldr	r3, [pc, #236]	; (800a5a4 <SVCCTL_App_Notification+0x304>)
 800a4b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a4bc:	2b04      	cmp	r3, #4
 800a4be:	d104      	bne.n	800a4ca <SVCCTL_App_Notification+0x22a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800a4c0:	4b38      	ldr	r3, [pc, #224]	; (800a5a4 <SVCCTL_App_Notification+0x304>)
 800a4c2:	2206      	movs	r2, #6
 800a4c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800a4c8:	e003      	b.n	800a4d2 <SVCCTL_App_Notification+0x232>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800a4ca:	4b36      	ldr	r3, [pc, #216]	; (800a5a4 <SVCCTL_App_Notification+0x304>)
 800a4cc:	2205      	movs	r2, #5
 800a4ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	4b32      	ldr	r3, [pc, #200]	; (800a5a4 <SVCCTL_App_Notification+0x304>)
 800a4dc:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800a4de:	4b37      	ldr	r3, [pc, #220]	; (800a5bc <SVCCTL_App_Notification+0x31c>)
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800a4e4:	4b2f      	ldr	r3, [pc, #188]	; (800a5a4 <SVCCTL_App_Notification+0x304>)
 800a4e6:	8ada      	ldrh	r2, [r3, #22]
 800a4e8:	4b34      	ldr	r3, [pc, #208]	; (800a5bc <SVCCTL_App_Notification+0x31c>)
 800a4ea:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800a4ec:	4833      	ldr	r0, [pc, #204]	; (800a5bc <SVCCTL_App_Notification+0x31c>)
 800a4ee:	f000 fe1d 	bl	800b12c <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800a4f2:	e000      	b.n	800a4f6 <SVCCTL_App_Notification+0x256>
          break;
 800a4f4:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800a4f6:	e151      	b.n	800a79c <SVCCTL_App_Notification+0x4fc>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800a4f8:	6a3b      	ldr	r3, [r7, #32]
 800a4fa:	3302      	adds	r3, #2
 800a4fc:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	881b      	ldrh	r3, [r3, #0]
 800a502:	b29b      	uxth	r3, r3
 800a504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a508:	f000 8141 	beq.w	800a78e <SVCCTL_App_Notification+0x4ee>
 800a50c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a510:	f300 8143 	bgt.w	800a79a <SVCCTL_App_Notification+0x4fa>
 800a514:	2b04      	cmp	r3, #4
 800a516:	f000 813c 	beq.w	800a792 <SVCCTL_App_Notification+0x4f2>
 800a51a:	2b04      	cmp	r3, #4
 800a51c:	f2c0 813d 	blt.w	800a79a <SVCCTL_App_Notification+0x4fa>
 800a520:	f240 420a 	movw	r2, #1034	; 0x40a
 800a524:	4293      	cmp	r3, r2
 800a526:	f300 8138 	bgt.w	800a79a <SVCCTL_App_Notification+0x4fa>
 800a52a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a52e:	f340 8134 	ble.w	800a79a <SVCCTL_App_Notification+0x4fa>
 800a532:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800a536:	2b09      	cmp	r3, #9
 800a538:	f200 812f 	bhi.w	800a79a <SVCCTL_App_Notification+0x4fa>
 800a53c:	a201      	add	r2, pc, #4	; (adr r2, 800a544 <SVCCTL_App_Notification+0x2a4>)
 800a53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a542:	bf00      	nop
 800a544:	0800a709 	.word	0x0800a709
 800a548:	0800a5dd 	.word	0x0800a5dd
 800a54c:	0800a79b 	.word	0x0800a79b
 800a550:	0800a79b 	.word	0x0800a79b
 800a554:	0800a79b 	.word	0x0800a79b
 800a558:	0800a79b 	.word	0x0800a79b
 800a55c:	0800a56d 	.word	0x0800a56d
 800a560:	0800a79b 	.word	0x0800a79b
 800a564:	0800a64f 	.word	0x0800a64f
 800a568:	0800a589 	.word	0x0800a589
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800a56c:	480e      	ldr	r0, [pc, #56]	; (800a5a8 <SVCCTL_App_Notification+0x308>)
 800a56e:	f7ff f805 	bl	800957c <DbgTraceGetFileName>
 800a572:	4601      	mov	r1, r0
 800a574:	f44f 730f 	mov.w	r3, #572	; 0x23c
 800a578:	4a0c      	ldr	r2, [pc, #48]	; (800a5ac <SVCCTL_App_Notification+0x30c>)
 800a57a:	480d      	ldr	r0, [pc, #52]	; (800a5b0 <SVCCTL_App_Notification+0x310>)
 800a57c:	f002 fa38 	bl	800c9f0 <iprintf>
 800a580:	4814      	ldr	r0, [pc, #80]	; (800a5d4 <SVCCTL_App_Notification+0x334>)
 800a582:	f002 fa35 	bl	800c9f0 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800a586:	e105      	b.n	800a794 <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800a588:	4807      	ldr	r0, [pc, #28]	; (800a5a8 <SVCCTL_App_Notification+0x308>)
 800a58a:	f7fe fff7 	bl	800957c <DbgTraceGetFileName>
 800a58e:	4601      	mov	r1, r0
 800a590:	f44f 7313 	mov.w	r3, #588	; 0x24c
 800a594:	4a05      	ldr	r2, [pc, #20]	; (800a5ac <SVCCTL_App_Notification+0x30c>)
 800a596:	4806      	ldr	r0, [pc, #24]	; (800a5b0 <SVCCTL_App_Notification+0x310>)
 800a598:	f002 fa2a 	bl	800c9f0 <iprintf>
 800a59c:	480e      	ldr	r0, [pc, #56]	; (800a5d8 <SVCCTL_App_Notification+0x338>)
 800a59e:	f002 fac3 	bl	800cb28 <puts>
          break;
 800a5a2:	e0f7      	b.n	800a794 <SVCCTL_App_Notification+0x4f4>
 800a5a4:	20000198 	.word	0x20000198
 800a5a8:	0800e528 	.word	0x0800e528
 800a5ac:	0800fd34 	.word	0x0800fd34
 800a5b0:	0800e544 	.word	0x0800e544
 800a5b4:	0800e66c 	.word	0x0800e66c
 800a5b8:	0800e698 	.word	0x0800e698
 800a5bc:	20001534 	.word	0x20001534
 800a5c0:	0800e6d4 	.word	0x0800e6d4
 800a5c4:	3ff40000 	.word	0x3ff40000
 800a5c8:	0800e708 	.word	0x0800e708
 800a5cc:	0800e774 	.word	0x0800e774
 800a5d0:	0800e7bc 	.word	0x0800e7bc
 800a5d4:	0800e80c 	.word	0x0800e80c
 800a5d8:	0800e834 	.word	0x0800e834
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800a5dc:	4872      	ldr	r0, [pc, #456]	; (800a7a8 <SVCCTL_App_Notification+0x508>)
 800a5de:	f7fe ffcd 	bl	800957c <DbgTraceGetFileName>
 800a5e2:	4601      	mov	r1, r0
 800a5e4:	f240 2353 	movw	r3, #595	; 0x253
 800a5e8:	4a70      	ldr	r2, [pc, #448]	; (800a7ac <SVCCTL_App_Notification+0x50c>)
 800a5ea:	4871      	ldr	r0, [pc, #452]	; (800a7b0 <SVCCTL_App_Notification+0x510>)
 800a5ec:	f002 fa00 	bl	800c9f0 <iprintf>
 800a5f0:	4870      	ldr	r0, [pc, #448]	; (800a7b4 <SVCCTL_App_Notification+0x514>)
 800a5f2:	f002 fa99 	bl	800cb28 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800a5f6:	4b70      	ldr	r3, [pc, #448]	; (800a7b8 <SVCCTL_App_Notification+0x518>)
 800a5f8:	8adb      	ldrh	r3, [r3, #22]
 800a5fa:	4970      	ldr	r1, [pc, #448]	; (800a7bc <SVCCTL_App_Notification+0x51c>)
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7fd f9dd 	bl	80079bc <aci_gap_pass_key_resp>
 800a602:	4603      	mov	r3, r0
 800a604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800a608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d010      	beq.n	800a632 <SVCCTL_App_Notification+0x392>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800a610:	4865      	ldr	r0, [pc, #404]	; (800a7a8 <SVCCTL_App_Notification+0x508>)
 800a612:	f7fe ffb3 	bl	800957c <DbgTraceGetFileName>
 800a616:	4601      	mov	r1, r0
 800a618:	f44f 7316 	mov.w	r3, #600	; 0x258
 800a61c:	4a63      	ldr	r2, [pc, #396]	; (800a7ac <SVCCTL_App_Notification+0x50c>)
 800a61e:	4864      	ldr	r0, [pc, #400]	; (800a7b0 <SVCCTL_App_Notification+0x510>)
 800a620:	f002 f9e6 	bl	800c9f0 <iprintf>
 800a624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a628:	4619      	mov	r1, r3
 800a62a:	4865      	ldr	r0, [pc, #404]	; (800a7c0 <SVCCTL_App_Notification+0x520>)
 800a62c:	f002 f9e0 	bl	800c9f0 <iprintf>
          break;
 800a630:	e0b0      	b.n	800a794 <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800a632:	485d      	ldr	r0, [pc, #372]	; (800a7a8 <SVCCTL_App_Notification+0x508>)
 800a634:	f7fe ffa2 	bl	800957c <DbgTraceGetFileName>
 800a638:	4601      	mov	r1, r0
 800a63a:	f44f 7317 	mov.w	r3, #604	; 0x25c
 800a63e:	4a5b      	ldr	r2, [pc, #364]	; (800a7ac <SVCCTL_App_Notification+0x50c>)
 800a640:	485b      	ldr	r0, [pc, #364]	; (800a7b0 <SVCCTL_App_Notification+0x510>)
 800a642:	f002 f9d5 	bl	800c9f0 <iprintf>
 800a646:	485f      	ldr	r0, [pc, #380]	; (800a7c4 <SVCCTL_App_Notification+0x524>)
 800a648:	f002 fa6e 	bl	800cb28 <puts>
          break;
 800a64c:	e0a2      	b.n	800a794 <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800a64e:	4856      	ldr	r0, [pc, #344]	; (800a7a8 <SVCCTL_App_Notification+0x508>)
 800a650:	f7fe ff94 	bl	800957c <DbgTraceGetFileName>
 800a654:	4601      	mov	r1, r0
 800a656:	f44f 7319 	mov.w	r3, #612	; 0x264
 800a65a:	4a54      	ldr	r2, [pc, #336]	; (800a7ac <SVCCTL_App_Notification+0x50c>)
 800a65c:	4854      	ldr	r0, [pc, #336]	; (800a7b0 <SVCCTL_App_Notification+0x510>)
 800a65e:	f002 f9c7 	bl	800c9f0 <iprintf>
 800a662:	4859      	ldr	r0, [pc, #356]	; (800a7c8 <SVCCTL_App_Notification+0x528>)
 800a664:	f002 fa60 	bl	800cb28 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800a668:	484f      	ldr	r0, [pc, #316]	; (800a7a8 <SVCCTL_App_Notification+0x508>)
 800a66a:	f7fe ff87 	bl	800957c <DbgTraceGetFileName>
 800a66e:	4601      	mov	r1, r0
 800a670:	f240 2365 	movw	r3, #613	; 0x265
 800a674:	4a4d      	ldr	r2, [pc, #308]	; (800a7ac <SVCCTL_App_Notification+0x50c>)
 800a676:	484e      	ldr	r0, [pc, #312]	; (800a7b0 <SVCCTL_App_Notification+0x510>)
 800a678:	f002 f9ba 	bl	800c9f0 <iprintf>
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	3302      	adds	r3, #2
 800a680:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800a684:	4619      	mov	r1, r3
 800a686:	4851      	ldr	r0, [pc, #324]	; (800a7cc <SVCCTL_App_Notification+0x52c>)
 800a688:	f002 f9b2 	bl	800c9f0 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800a68c:	4846      	ldr	r0, [pc, #280]	; (800a7a8 <SVCCTL_App_Notification+0x508>)
 800a68e:	f7fe ff75 	bl	800957c <DbgTraceGetFileName>
 800a692:	4601      	mov	r1, r0
 800a694:	f240 2367 	movw	r3, #615	; 0x267
 800a698:	4a44      	ldr	r2, [pc, #272]	; (800a7ac <SVCCTL_App_Notification+0x50c>)
 800a69a:	4845      	ldr	r0, [pc, #276]	; (800a7b0 <SVCCTL_App_Notification+0x510>)
 800a69c:	f002 f9a8 	bl	800c9f0 <iprintf>
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	3302      	adds	r3, #2
 800a6a4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	4849      	ldr	r0, [pc, #292]	; (800a7d0 <SVCCTL_App_Notification+0x530>)
 800a6ac:	f002 f9a0 	bl	800c9f0 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800a6b0:	4b41      	ldr	r3, [pc, #260]	; (800a7b8 <SVCCTL_App_Notification+0x518>)
 800a6b2:	8adb      	ldrh	r3, [r3, #22]
 800a6b4:	2101      	movs	r1, #1
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7fd fb2a 	bl	8007d10 <aci_gap_numeric_comparison_value_confirm_yesno>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800a6c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d010      	beq.n	800a6ec <SVCCTL_App_Notification+0x44c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800a6ca:	4837      	ldr	r0, [pc, #220]	; (800a7a8 <SVCCTL_App_Notification+0x508>)
 800a6cc:	f7fe ff56 	bl	800957c <DbgTraceGetFileName>
 800a6d0:	4601      	mov	r1, r0
 800a6d2:	f44f 731b 	mov.w	r3, #620	; 0x26c
 800a6d6:	4a35      	ldr	r2, [pc, #212]	; (800a7ac <SVCCTL_App_Notification+0x50c>)
 800a6d8:	4835      	ldr	r0, [pc, #212]	; (800a7b0 <SVCCTL_App_Notification+0x510>)
 800a6da:	f002 f989 	bl	800c9f0 <iprintf>
 800a6de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	483b      	ldr	r0, [pc, #236]	; (800a7d4 <SVCCTL_App_Notification+0x534>)
 800a6e6:	f002 f983 	bl	800c9f0 <iprintf>
          break;
 800a6ea:	e053      	b.n	800a794 <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800a6ec:	482e      	ldr	r0, [pc, #184]	; (800a7a8 <SVCCTL_App_Notification+0x508>)
 800a6ee:	f7fe ff45 	bl	800957c <DbgTraceGetFileName>
 800a6f2:	4601      	mov	r1, r0
 800a6f4:	f44f 731c 	mov.w	r3, #624	; 0x270
 800a6f8:	4a2c      	ldr	r2, [pc, #176]	; (800a7ac <SVCCTL_App_Notification+0x50c>)
 800a6fa:	482d      	ldr	r0, [pc, #180]	; (800a7b0 <SVCCTL_App_Notification+0x510>)
 800a6fc:	f002 f978 	bl	800c9f0 <iprintf>
 800a700:	4835      	ldr	r0, [pc, #212]	; (800a7d8 <SVCCTL_App_Notification+0x538>)
 800a702:	f002 fa11 	bl	800cb28 <puts>
          break;
 800a706:	e045      	b.n	800a794 <SVCCTL_App_Notification+0x4f4>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	3302      	adds	r3, #2
 800a70c:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800a70e:	4826      	ldr	r0, [pc, #152]	; (800a7a8 <SVCCTL_App_Notification+0x508>)
 800a710:	f7fe ff34 	bl	800957c <DbgTraceGetFileName>
 800a714:	4601      	mov	r1, r0
 800a716:	f240 237a 	movw	r3, #634	; 0x27a
 800a71a:	4a24      	ldr	r2, [pc, #144]	; (800a7ac <SVCCTL_App_Notification+0x50c>)
 800a71c:	4824      	ldr	r0, [pc, #144]	; (800a7b0 <SVCCTL_App_Notification+0x510>)
 800a71e:	f002 f967 	bl	800c9f0 <iprintf>
 800a722:	482e      	ldr	r0, [pc, #184]	; (800a7dc <SVCCTL_App_Notification+0x53c>)
 800a724:	f002 fa00 	bl	800cb28 <puts>
          if (p_pairing_complete->Status != 0)
 800a728:	69bb      	ldr	r3, [r7, #24]
 800a72a:	789b      	ldrb	r3, [r3, #2]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d013      	beq.n	800a758 <SVCCTL_App_Notification+0x4b8>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800a730:	481d      	ldr	r0, [pc, #116]	; (800a7a8 <SVCCTL_App_Notification+0x508>)
 800a732:	f7fe ff23 	bl	800957c <DbgTraceGetFileName>
 800a736:	4601      	mov	r1, r0
 800a738:	f240 237d 	movw	r3, #637	; 0x27d
 800a73c:	4a1b      	ldr	r2, [pc, #108]	; (800a7ac <SVCCTL_App_Notification+0x50c>)
 800a73e:	481c      	ldr	r0, [pc, #112]	; (800a7b0 <SVCCTL_App_Notification+0x510>)
 800a740:	f002 f956 	bl	800c9f0 <iprintf>
 800a744:	69bb      	ldr	r3, [r7, #24]
 800a746:	789b      	ldrb	r3, [r3, #2]
 800a748:	4619      	mov	r1, r3
 800a74a:	69bb      	ldr	r3, [r7, #24]
 800a74c:	78db      	ldrb	r3, [r3, #3]
 800a74e:	461a      	mov	r2, r3
 800a750:	4823      	ldr	r0, [pc, #140]	; (800a7e0 <SVCCTL_App_Notification+0x540>)
 800a752:	f002 f94d 	bl	800c9f0 <iprintf>
 800a756:	e00c      	b.n	800a772 <SVCCTL_App_Notification+0x4d2>
            APP_DBG_MSG("     - Pairing Success\n");
 800a758:	4813      	ldr	r0, [pc, #76]	; (800a7a8 <SVCCTL_App_Notification+0x508>)
 800a75a:	f7fe ff0f 	bl	800957c <DbgTraceGetFileName>
 800a75e:	4601      	mov	r1, r0
 800a760:	f240 2381 	movw	r3, #641	; 0x281
 800a764:	4a11      	ldr	r2, [pc, #68]	; (800a7ac <SVCCTL_App_Notification+0x50c>)
 800a766:	4812      	ldr	r0, [pc, #72]	; (800a7b0 <SVCCTL_App_Notification+0x510>)
 800a768:	f002 f942 	bl	800c9f0 <iprintf>
 800a76c:	481d      	ldr	r0, [pc, #116]	; (800a7e4 <SVCCTL_App_Notification+0x544>)
 800a76e:	f002 f9db 	bl	800cb28 <puts>
          APP_DBG_MSG("\n");
 800a772:	480d      	ldr	r0, [pc, #52]	; (800a7a8 <SVCCTL_App_Notification+0x508>)
 800a774:	f7fe ff02 	bl	800957c <DbgTraceGetFileName>
 800a778:	4601      	mov	r1, r0
 800a77a:	f240 2383 	movw	r3, #643	; 0x283
 800a77e:	4a0b      	ldr	r2, [pc, #44]	; (800a7ac <SVCCTL_App_Notification+0x50c>)
 800a780:	480b      	ldr	r0, [pc, #44]	; (800a7b0 <SVCCTL_App_Notification+0x510>)
 800a782:	f002 f935 	bl	800c9f0 <iprintf>
 800a786:	200a      	movs	r0, #10
 800a788:	f002 f94a 	bl	800ca20 <putchar>
          break;
 800a78c:	e002      	b.n	800a794 <SVCCTL_App_Notification+0x4f4>
          break;
 800a78e:	bf00      	nop
 800a790:	e003      	b.n	800a79a <SVCCTL_App_Notification+0x4fa>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800a792:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800a794:	e001      	b.n	800a79a <SVCCTL_App_Notification+0x4fa>
      break;
 800a796:	bf00      	nop
 800a798:	e000      	b.n	800a79c <SVCCTL_App_Notification+0x4fc>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800a79a:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800a79c:	2301      	movs	r3, #1
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3728      	adds	r7, #40	; 0x28
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bdb0      	pop	{r4, r5, r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	0800e528 	.word	0x0800e528
 800a7ac:	0800fd34 	.word	0x0800fd34
 800a7b0:	0800e544 	.word	0x0800e544
 800a7b4:	0800e864 	.word	0x0800e864
 800a7b8:	20000198 	.word	0x20000198
 800a7bc:	0001b207 	.word	0x0001b207
 800a7c0:	0800e88c 	.word	0x0800e88c
 800a7c4:	0800e8c0 	.word	0x0800e8c0
 800a7c8:	0800e8e8 	.word	0x0800e8e8
 800a7cc:	0800e91c 	.word	0x0800e91c
 800a7d0:	0800e938 	.word	0x0800e938
 800a7d4:	0800e950 	.word	0x0800e950
 800a7d8:	0800e9a0 	.word	0x0800e9a0
 800a7dc:	0800e9e8 	.word	0x0800e9e8
 800a7e0:	0800ea14 	.word	0x0800ea14
 800a7e4:	0800ea50 	.word	0x0800ea50

0800a7e8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800a7ee:	4b06      	ldr	r3, [pc, #24]	; (800a808 <Ble_Tl_Init+0x20>)
 800a7f0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800a7f2:	4b06      	ldr	r3, [pc, #24]	; (800a80c <Ble_Tl_Init+0x24>)
 800a7f4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800a7f6:	463b      	mov	r3, r7
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	4805      	ldr	r0, [pc, #20]	; (800a810 <Ble_Tl_Init+0x28>)
 800a7fc:	f7fe f9ac 	bl	8008b58 <hci_init>

  return;
 800a800:	bf00      	nop
}
 800a802:	3708      	adds	r7, #8
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	200300d8 	.word	0x200300d8
 800a80c:	0800afe9 	.word	0x0800afe9
 800a810:	0800afb1 	.word	0x0800afb1

0800a814 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800a814:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a816:	b08d      	sub	sp, #52	; 0x34
 800a818:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800a81a:	2300      	movs	r3, #0
 800a81c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a81e:	2392      	movs	r3, #146	; 0x92
 800a820:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800a822:	48a3      	ldr	r0, [pc, #652]	; (800aab0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a824:	f7fe feaa 	bl	800957c <DbgTraceGetFileName>
 800a828:	4601      	mov	r1, r0
 800a82a:	f240 23c3 	movw	r3, #707	; 0x2c3
 800a82e:	4aa1      	ldr	r2, [pc, #644]	; (800aab4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a830:	48a1      	ldr	r0, [pc, #644]	; (800aab8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a832:	f002 f8dd 	bl	800c9f0 <iprintf>
 800a836:	48a1      	ldr	r0, [pc, #644]	; (800aabc <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800a838:	f002 f976 	bl	800cb28 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800a83c:	f7fd febb 	bl	80085b6 <hci_reset>
 800a840:	4603      	mov	r3, r0
 800a842:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800a844:	7dfb      	ldrb	r3, [r7, #23]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00f      	beq.n	800a86a <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800a84a:	4899      	ldr	r0, [pc, #612]	; (800aab0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a84c:	f7fe fe96 	bl	800957c <DbgTraceGetFileName>
 800a850:	4601      	mov	r1, r0
 800a852:	f44f 7333 	mov.w	r3, #716	; 0x2cc
 800a856:	4a97      	ldr	r2, [pc, #604]	; (800aab4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a858:	4897      	ldr	r0, [pc, #604]	; (800aab8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a85a:	f002 f8c9 	bl	800c9f0 <iprintf>
 800a85e:	7dfb      	ldrb	r3, [r7, #23]
 800a860:	4619      	mov	r1, r3
 800a862:	4897      	ldr	r0, [pc, #604]	; (800aac0 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800a864:	f002 f8c4 	bl	800c9f0 <iprintf>
 800a868:	e00c      	b.n	800a884 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800a86a:	4891      	ldr	r0, [pc, #580]	; (800aab0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a86c:	f7fe fe86 	bl	800957c <DbgTraceGetFileName>
 800a870:	4601      	mov	r1, r0
 800a872:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 800a876:	4a8f      	ldr	r2, [pc, #572]	; (800aab4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a878:	488f      	ldr	r0, [pc, #572]	; (800aab8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a87a:	f002 f8b9 	bl	800c9f0 <iprintf>
 800a87e:	4891      	ldr	r0, [pc, #580]	; (800aac4 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800a880:	f002 f952 	bl	800cb28 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800a884:	f000 fad8 	bl	800ae38 <BleGetBdAddress>
 800a888:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800a88a:	693a      	ldr	r2, [r7, #16]
 800a88c:	2106      	movs	r1, #6
 800a88e:	2000      	movs	r0, #0
 800a890:	f7fd fd51 	bl	8008336 <aci_hal_write_config_data>
 800a894:	4603      	mov	r3, r0
 800a896:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800a898:	7dfb      	ldrb	r3, [r7, #23]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00f      	beq.n	800a8be <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800a89e:	4884      	ldr	r0, [pc, #528]	; (800aab0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a8a0:	f7fe fe6c 	bl	800957c <DbgTraceGetFileName>
 800a8a4:	4601      	mov	r1, r0
 800a8a6:	f240 23da 	movw	r3, #730	; 0x2da
 800a8aa:	4a82      	ldr	r2, [pc, #520]	; (800aab4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a8ac:	4882      	ldr	r0, [pc, #520]	; (800aab8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a8ae:	f002 f89f 	bl	800c9f0 <iprintf>
 800a8b2:	7dfb      	ldrb	r3, [r7, #23]
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	4884      	ldr	r0, [pc, #528]	; (800aac8 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800a8b8:	f002 f89a 	bl	800c9f0 <iprintf>
 800a8bc:	e035      	b.n	800a92a <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800a8be:	487c      	ldr	r0, [pc, #496]	; (800aab0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a8c0:	f7fe fe5c 	bl	800957c <DbgTraceGetFileName>
 800a8c4:	4601      	mov	r1, r0
 800a8c6:	f240 23de 	movw	r3, #734	; 0x2de
 800a8ca:	4a7a      	ldr	r2, [pc, #488]	; (800aab4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a8cc:	487a      	ldr	r0, [pc, #488]	; (800aab8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a8ce:	f002 f88f 	bl	800c9f0 <iprintf>
 800a8d2:	487e      	ldr	r0, [pc, #504]	; (800aacc <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800a8d4:	f002 f928 	bl	800cb28 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800a8d8:	4875      	ldr	r0, [pc, #468]	; (800aab0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a8da:	f7fe fe4f 	bl	800957c <DbgTraceGetFileName>
 800a8de:	4601      	mov	r1, r0
 800a8e0:	f240 23df 	movw	r3, #735	; 0x2df
 800a8e4:	4a73      	ldr	r2, [pc, #460]	; (800aab4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a8e6:	4874      	ldr	r0, [pc, #464]	; (800aab8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a8e8:	f002 f882 	bl	800c9f0 <iprintf>
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	3305      	adds	r3, #5
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	3304      	adds	r3, #4
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	461c      	mov	r4, r3
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	3303      	adds	r3, #3
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	461d      	mov	r5, r3
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	3302      	adds	r3, #2
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	461a      	mov	r2, r3
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	3301      	adds	r3, #1
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	4619      	mov	r1, r3
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	9302      	str	r3, [sp, #8]
 800a91a:	9101      	str	r1, [sp, #4]
 800a91c:	9200      	str	r2, [sp, #0]
 800a91e:	462b      	mov	r3, r5
 800a920:	4622      	mov	r2, r4
 800a922:	4601      	mov	r1, r0
 800a924:	486a      	ldr	r0, [pc, #424]	; (800aad0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800a926:	f002 f863 	bl	800c9f0 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800a92a:	4a6a      	ldr	r2, [pc, #424]	; (800aad4 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800a92c:	2110      	movs	r1, #16
 800a92e:	2018      	movs	r0, #24
 800a930:	f7fd fd01 	bl	8008336 <aci_hal_write_config_data>
 800a934:	4603      	mov	r3, r0
 800a936:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800a938:	7dfb      	ldrb	r3, [r7, #23]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00f      	beq.n	800a95e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800a93e:	485c      	ldr	r0, [pc, #368]	; (800aab0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a940:	f7fe fe1c 	bl	800957c <DbgTraceGetFileName>
 800a944:	4601      	mov	r1, r0
 800a946:	f240 3326 	movw	r3, #806	; 0x326
 800a94a:	4a5a      	ldr	r2, [pc, #360]	; (800aab4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a94c:	485a      	ldr	r0, [pc, #360]	; (800aab8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a94e:	f002 f84f 	bl	800c9f0 <iprintf>
 800a952:	7dfb      	ldrb	r3, [r7, #23]
 800a954:	4619      	mov	r1, r3
 800a956:	4860      	ldr	r0, [pc, #384]	; (800aad8 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800a958:	f002 f84a 	bl	800c9f0 <iprintf>
 800a95c:	e00c      	b.n	800a978 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800a95e:	4854      	ldr	r0, [pc, #336]	; (800aab0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a960:	f7fe fe0c 	bl	800957c <DbgTraceGetFileName>
 800a964:	4601      	mov	r1, r0
 800a966:	f240 332a 	movw	r3, #810	; 0x32a
 800a96a:	4a52      	ldr	r2, [pc, #328]	; (800aab4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a96c:	4852      	ldr	r0, [pc, #328]	; (800aab8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a96e:	f002 f83f 	bl	800c9f0 <iprintf>
 800a972:	485a      	ldr	r0, [pc, #360]	; (800aadc <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800a974:	f002 f8d8 	bl	800cb28 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800a978:	4a59      	ldr	r2, [pc, #356]	; (800aae0 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800a97a:	2110      	movs	r1, #16
 800a97c:	2008      	movs	r0, #8
 800a97e:	f7fd fcda 	bl	8008336 <aci_hal_write_config_data>
 800a982:	4603      	mov	r3, r0
 800a984:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800a986:	7dfb      	ldrb	r3, [r7, #23]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d00f      	beq.n	800a9ac <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800a98c:	4848      	ldr	r0, [pc, #288]	; (800aab0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a98e:	f7fe fdf5 	bl	800957c <DbgTraceGetFileName>
 800a992:	4601      	mov	r1, r0
 800a994:	f240 3333 	movw	r3, #819	; 0x333
 800a998:	4a46      	ldr	r2, [pc, #280]	; (800aab4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a99a:	4847      	ldr	r0, [pc, #284]	; (800aab8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a99c:	f002 f828 	bl	800c9f0 <iprintf>
 800a9a0:	7dfb      	ldrb	r3, [r7, #23]
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	484f      	ldr	r0, [pc, #316]	; (800aae4 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800a9a6:	f002 f823 	bl	800c9f0 <iprintf>
 800a9aa:	e00c      	b.n	800a9c6 <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800a9ac:	4840      	ldr	r0, [pc, #256]	; (800aab0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a9ae:	f7fe fde5 	bl	800957c <DbgTraceGetFileName>
 800a9b2:	4601      	mov	r1, r0
 800a9b4:	f240 3337 	movw	r3, #823	; 0x337
 800a9b8:	4a3e      	ldr	r2, [pc, #248]	; (800aab4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a9ba:	483f      	ldr	r0, [pc, #252]	; (800aab8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a9bc:	f002 f818 	bl	800c9f0 <iprintf>
 800a9c0:	4849      	ldr	r0, [pc, #292]	; (800aae8 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800a9c2:	f002 f8b1 	bl	800cb28 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800a9c6:	2118      	movs	r1, #24
 800a9c8:	2001      	movs	r0, #1
 800a9ca:	f7fd fd39 	bl	8008440 <aci_hal_set_tx_power_level>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800a9d2:	7dfb      	ldrb	r3, [r7, #23]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d00f      	beq.n	800a9f8 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800a9d8:	4835      	ldr	r0, [pc, #212]	; (800aab0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a9da:	f7fe fdcf 	bl	800957c <DbgTraceGetFileName>
 800a9de:	4601      	mov	r1, r0
 800a9e0:	f44f 7350 	mov.w	r3, #832	; 0x340
 800a9e4:	4a33      	ldr	r2, [pc, #204]	; (800aab4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a9e6:	4834      	ldr	r0, [pc, #208]	; (800aab8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a9e8:	f002 f802 	bl	800c9f0 <iprintf>
 800a9ec:	7dfb      	ldrb	r3, [r7, #23]
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	483e      	ldr	r0, [pc, #248]	; (800aaec <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800a9f2:	f001 fffd 	bl	800c9f0 <iprintf>
 800a9f6:	e00c      	b.n	800aa12 <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800a9f8:	482d      	ldr	r0, [pc, #180]	; (800aab0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a9fa:	f7fe fdbf 	bl	800957c <DbgTraceGetFileName>
 800a9fe:	4601      	mov	r1, r0
 800aa00:	f44f 7351 	mov.w	r3, #836	; 0x344
 800aa04:	4a2b      	ldr	r2, [pc, #172]	; (800aab4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800aa06:	482c      	ldr	r0, [pc, #176]	; (800aab8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800aa08:	f001 fff2 	bl	800c9f0 <iprintf>
 800aa0c:	4838      	ldr	r0, [pc, #224]	; (800aaf0 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800aa0e:	f002 f88b 	bl	800cb28 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800aa12:	f7fd f9e4 	bl	8007dde <aci_gatt_init>
 800aa16:	4603      	mov	r3, r0
 800aa18:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800aa1a:	7dfb      	ldrb	r3, [r7, #23]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d00f      	beq.n	800aa40 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800aa20:	4823      	ldr	r0, [pc, #140]	; (800aab0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800aa22:	f7fe fdab 	bl	800957c <DbgTraceGetFileName>
 800aa26:	4601      	mov	r1, r0
 800aa28:	f240 334d 	movw	r3, #845	; 0x34d
 800aa2c:	4a21      	ldr	r2, [pc, #132]	; (800aab4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800aa2e:	4822      	ldr	r0, [pc, #136]	; (800aab8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800aa30:	f001 ffde 	bl	800c9f0 <iprintf>
 800aa34:	7dfb      	ldrb	r3, [r7, #23]
 800aa36:	4619      	mov	r1, r3
 800aa38:	482e      	ldr	r0, [pc, #184]	; (800aaf4 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800aa3a:	f001 ffd9 	bl	800c9f0 <iprintf>
 800aa3e:	e00c      	b.n	800aa5a <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800aa40:	481b      	ldr	r0, [pc, #108]	; (800aab0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800aa42:	f7fe fd9b 	bl	800957c <DbgTraceGetFileName>
 800aa46:	4601      	mov	r1, r0
 800aa48:	f240 3351 	movw	r3, #849	; 0x351
 800aa4c:	4a19      	ldr	r2, [pc, #100]	; (800aab4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800aa4e:	481a      	ldr	r0, [pc, #104]	; (800aab8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800aa50:	f001 ffce 	bl	800c9f0 <iprintf>
 800aa54:	4828      	ldr	r0, [pc, #160]	; (800aaf8 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800aa56:	f002 f867 	bl	800cb28 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
 800aa60:	f043 0301 	orr.w	r3, r3, #1
 800aa64:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif /* BLE_CFG_CENTRAL == 1 */

  if (role > 0)
 800aa66:	7bfb      	ldrb	r3, [r7, #15]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d069      	beq.n	800ab40 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800aa6c:	4b23      	ldr	r3, [pc, #140]	; (800aafc <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800aa6e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800aa70:	1dba      	adds	r2, r7, #6
 800aa72:	7bf8      	ldrb	r0, [r7, #15]
 800aa74:	1cbb      	adds	r3, r7, #2
 800aa76:	9301      	str	r3, [sp, #4]
 800aa78:	1d3b      	adds	r3, r7, #4
 800aa7a:	9300      	str	r3, [sp, #0]
 800aa7c:	4613      	mov	r3, r2
 800aa7e:	2209      	movs	r2, #9
 800aa80:	2100      	movs	r1, #0
 800aa82:	f7fd f802 	bl	8007a8a <aci_gap_init>
 800aa86:	4603      	mov	r3, r0
 800aa88:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800aa8a:	7dfb      	ldrb	r3, [r7, #23]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d039      	beq.n	800ab04 <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800aa90:	4807      	ldr	r0, [pc, #28]	; (800aab0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800aa92:	f7fe fd73 	bl	800957c <DbgTraceGetFileName>
 800aa96:	4601      	mov	r1, r0
 800aa98:	f240 3371 	movw	r3, #881	; 0x371
 800aa9c:	4a05      	ldr	r2, [pc, #20]	; (800aab4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800aa9e:	4806      	ldr	r0, [pc, #24]	; (800aab8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800aaa0:	f001 ffa6 	bl	800c9f0 <iprintf>
 800aaa4:	7dfb      	ldrb	r3, [r7, #23]
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	4815      	ldr	r0, [pc, #84]	; (800ab00 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800aaaa:	f001 ffa1 	bl	800c9f0 <iprintf>
 800aaae:	e036      	b.n	800ab1e <Ble_Hci_Gap_Gatt_Init+0x30a>
 800aab0:	0800e528 	.word	0x0800e528
 800aab4:	0800fd4c 	.word	0x0800fd4c
 800aab8:	0800e544 	.word	0x0800e544
 800aabc:	0800ea68 	.word	0x0800ea68
 800aac0:	0800ea94 	.word	0x0800ea94
 800aac4:	0800eac4 	.word	0x0800eac4
 800aac8:	0800eae4 	.word	0x0800eae4
 800aacc:	0800eb40 	.word	0x0800eb40
 800aad0:	0800eb8c 	.word	0x0800eb8c
 800aad4:	0800fd04 	.word	0x0800fd04
 800aad8:	0800ebc8 	.word	0x0800ebc8
 800aadc:	0800ec20 	.word	0x0800ec20
 800aae0:	0800fd14 	.word	0x0800fd14
 800aae4:	0800ec68 	.word	0x0800ec68
 800aae8:	0800ecc0 	.word	0x0800ecc0
 800aaec:	0800ed08 	.word	0x0800ed08
 800aaf0:	0800ed48 	.word	0x0800ed48
 800aaf4:	0800ed78 	.word	0x0800ed78
 800aaf8:	0800edac 	.word	0x0800edac
 800aafc:	0800edd0 	.word	0x0800edd0
 800ab00:	0800eddc 	.word	0x0800eddc
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800ab04:	487e      	ldr	r0, [pc, #504]	; (800ad00 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800ab06:	f7fe fd39 	bl	800957c <DbgTraceGetFileName>
 800ab0a:	4601      	mov	r1, r0
 800ab0c:	f240 3375 	movw	r3, #885	; 0x375
 800ab10:	4a7c      	ldr	r2, [pc, #496]	; (800ad04 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800ab12:	487d      	ldr	r0, [pc, #500]	; (800ad08 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800ab14:	f001 ff6c 	bl	800c9f0 <iprintf>
 800ab18:	487c      	ldr	r0, [pc, #496]	; (800ad0c <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 800ab1a:	f002 f805 	bl	800cb28 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800ab1e:	88fc      	ldrh	r4, [r7, #6]
 800ab20:	88bd      	ldrh	r5, [r7, #4]
 800ab22:	68b8      	ldr	r0, [r7, #8]
 800ab24:	f7f5 fb2c 	bl	8000180 <strlen>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	b2da      	uxtb	r2, r3
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	9300      	str	r3, [sp, #0]
 800ab30:	4613      	mov	r3, r2
 800ab32:	2200      	movs	r2, #0
 800ab34:	4629      	mov	r1, r5
 800ab36:	4620      	mov	r0, r4
 800ab38:	f7fd fb54 	bl	80081e4 <aci_gatt_update_char_value>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800ab40:	88f8      	ldrh	r0, [r7, #6]
 800ab42:	8879      	ldrh	r1, [r7, #2]
 800ab44:	463b      	mov	r3, r7
 800ab46:	9300      	str	r3, [sp, #0]
 800ab48:	2302      	movs	r3, #2
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f7fd fb4a 	bl	80081e4 <aci_gatt_update_char_value>
 800ab50:	4603      	mov	r3, r0
 800ab52:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800ab54:	2202      	movs	r2, #2
 800ab56:	2102      	movs	r1, #2
 800ab58:	2000      	movs	r0, #0
 800ab5a:	f7fd fd50 	bl	80085fe <hci_le_set_default_phy>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800ab62:	7dfb      	ldrb	r3, [r7, #23]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d00f      	beq.n	800ab88 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800ab68:	4865      	ldr	r0, [pc, #404]	; (800ad00 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800ab6a:	f7fe fd07 	bl	800957c <DbgTraceGetFileName>
 800ab6e:	4601      	mov	r1, r0
 800ab70:	f240 3397 	movw	r3, #919	; 0x397
 800ab74:	4a63      	ldr	r2, [pc, #396]	; (800ad04 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800ab76:	4864      	ldr	r0, [pc, #400]	; (800ad08 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800ab78:	f001 ff3a 	bl	800c9f0 <iprintf>
 800ab7c:	7dfb      	ldrb	r3, [r7, #23]
 800ab7e:	4619      	mov	r1, r3
 800ab80:	4863      	ldr	r0, [pc, #396]	; (800ad10 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 800ab82:	f001 ff35 	bl	800c9f0 <iprintf>
 800ab86:	e00c      	b.n	800aba2 <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800ab88:	485d      	ldr	r0, [pc, #372]	; (800ad00 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800ab8a:	f7fe fcf7 	bl	800957c <DbgTraceGetFileName>
 800ab8e:	4601      	mov	r1, r0
 800ab90:	f240 339b 	movw	r3, #923	; 0x39b
 800ab94:	4a5b      	ldr	r2, [pc, #364]	; (800ad04 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800ab96:	485c      	ldr	r0, [pc, #368]	; (800ad08 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800ab98:	f001 ff2a 	bl	800c9f0 <iprintf>
 800ab9c:	485d      	ldr	r0, [pc, #372]	; (800ad14 <Ble_Hci_Gap_Gatt_Init+0x500>)
 800ab9e:	f001 ffc3 	bl	800cb28 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800aba2:	4b5d      	ldr	r3, [pc, #372]	; (800ad18 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800aba4:	2201      	movs	r2, #1
 800aba6:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800aba8:	4b5b      	ldr	r3, [pc, #364]	; (800ad18 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	4618      	mov	r0, r3
 800abae:	f7fc fded 	bl	800778c <aci_gap_set_io_capability>
 800abb2:	4603      	mov	r3, r0
 800abb4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800abb6:	7dfb      	ldrb	r3, [r7, #23]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d00f      	beq.n	800abdc <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800abbc:	4850      	ldr	r0, [pc, #320]	; (800ad00 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800abbe:	f7fe fcdd 	bl	800957c <DbgTraceGetFileName>
 800abc2:	4601      	mov	r1, r0
 800abc4:	f240 33a5 	movw	r3, #933	; 0x3a5
 800abc8:	4a4e      	ldr	r2, [pc, #312]	; (800ad04 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800abca:	484f      	ldr	r0, [pc, #316]	; (800ad08 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800abcc:	f001 ff10 	bl	800c9f0 <iprintf>
 800abd0:	7dfb      	ldrb	r3, [r7, #23]
 800abd2:	4619      	mov	r1, r3
 800abd4:	4851      	ldr	r0, [pc, #324]	; (800ad1c <Ble_Hci_Gap_Gatt_Init+0x508>)
 800abd6:	f001 ff0b 	bl	800c9f0 <iprintf>
 800abda:	e00c      	b.n	800abf6 <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800abdc:	4848      	ldr	r0, [pc, #288]	; (800ad00 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800abde:	f7fe fccd 	bl	800957c <DbgTraceGetFileName>
 800abe2:	4601      	mov	r1, r0
 800abe4:	f240 33a9 	movw	r3, #937	; 0x3a9
 800abe8:	4a46      	ldr	r2, [pc, #280]	; (800ad04 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800abea:	4847      	ldr	r0, [pc, #284]	; (800ad08 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800abec:	f001 ff00 	bl	800c9f0 <iprintf>
 800abf0:	484b      	ldr	r0, [pc, #300]	; (800ad20 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 800abf2:	f001 ff99 	bl	800cb28 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800abf6:	4b48      	ldr	r3, [pc, #288]	; (800ad18 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800abf8:	2201      	movs	r2, #1
 800abfa:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800abfc:	4b46      	ldr	r3, [pc, #280]	; (800ad18 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800abfe:	2208      	movs	r2, #8
 800ac00:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800ac02:	4b45      	ldr	r3, [pc, #276]	; (800ad18 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800ac04:	2210      	movs	r2, #16
 800ac06:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800ac08:	4b43      	ldr	r3, [pc, #268]	; (800ad18 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800ac0e:	4b42      	ldr	r3, [pc, #264]	; (800ad18 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800ac10:	4a44      	ldr	r2, [pc, #272]	; (800ad24 <Ble_Hci_Gap_Gatt_Init+0x510>)
 800ac12:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800ac14:	4b40      	ldr	r3, [pc, #256]	; (800ad18 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800ac16:	2200      	movs	r2, #0
 800ac18:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800ac1a:	4b3f      	ldr	r3, [pc, #252]	; (800ad18 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800ac1c:	789c      	ldrb	r4, [r3, #2]
 800ac1e:	4b3e      	ldr	r3, [pc, #248]	; (800ad18 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800ac20:	785d      	ldrb	r5, [r3, #1]
 800ac22:	4b3d      	ldr	r3, [pc, #244]	; (800ad18 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800ac24:	791b      	ldrb	r3, [r3, #4]
 800ac26:	4a3c      	ldr	r2, [pc, #240]	; (800ad18 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800ac28:	7952      	ldrb	r2, [r2, #5]
 800ac2a:	493b      	ldr	r1, [pc, #236]	; (800ad18 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800ac2c:	78c9      	ldrb	r1, [r1, #3]
 800ac2e:	483a      	ldr	r0, [pc, #232]	; (800ad18 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800ac30:	6880      	ldr	r0, [r0, #8]
 800ac32:	2600      	movs	r6, #0
 800ac34:	9604      	str	r6, [sp, #16]
 800ac36:	9003      	str	r0, [sp, #12]
 800ac38:	9102      	str	r1, [sp, #8]
 800ac3a:	9201      	str	r2, [sp, #4]
 800ac3c:	9300      	str	r3, [sp, #0]
 800ac3e:	2300      	movs	r3, #0
 800ac40:	2201      	movs	r2, #1
 800ac42:	4629      	mov	r1, r5
 800ac44:	4620      	mov	r0, r4
 800ac46:	f7fc fdf5 	bl	8007834 <aci_gap_set_authentication_requirement>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_BLE_ADDRESS_TYPE);
  if (ret != BLE_STATUS_SUCCESS)
 800ac4e:	7dfb      	ldrb	r3, [r7, #23]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d00f      	beq.n	800ac74 <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800ac54:	482a      	ldr	r0, [pc, #168]	; (800ad00 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800ac56:	f7fe fc91 	bl	800957c <DbgTraceGetFileName>
 800ac5a:	4601      	mov	r1, r0
 800ac5c:	f44f 7371 	mov.w	r3, #964	; 0x3c4
 800ac60:	4a28      	ldr	r2, [pc, #160]	; (800ad04 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800ac62:	4829      	ldr	r0, [pc, #164]	; (800ad08 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800ac64:	f001 fec4 	bl	800c9f0 <iprintf>
 800ac68:	7dfb      	ldrb	r3, [r7, #23]
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	482e      	ldr	r0, [pc, #184]	; (800ad28 <Ble_Hci_Gap_Gatt_Init+0x514>)
 800ac6e:	f001 febf 	bl	800c9f0 <iprintf>
 800ac72:	e00c      	b.n	800ac8e <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800ac74:	4822      	ldr	r0, [pc, #136]	; (800ad00 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800ac76:	f7fe fc81 	bl	800957c <DbgTraceGetFileName>
 800ac7a:	4601      	mov	r1, r0
 800ac7c:	f44f 7372 	mov.w	r3, #968	; 0x3c8
 800ac80:	4a20      	ldr	r2, [pc, #128]	; (800ad04 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800ac82:	4821      	ldr	r0, [pc, #132]	; (800ad08 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800ac84:	f001 feb4 	bl	800c9f0 <iprintf>
 800ac88:	4828      	ldr	r0, [pc, #160]	; (800ad2c <Ble_Hci_Gap_Gatt_Init+0x518>)
 800ac8a:	f001 ff4d 	bl	800cb28 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800ac8e:	4b22      	ldr	r3, [pc, #136]	; (800ad18 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800ac90:	789b      	ldrb	r3, [r3, #2]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d023      	beq.n	800acde <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 800ac96:	f7fd f817 	bl	8007cc8 <aci_gap_configure_whitelist>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800ac9e:	7dfb      	ldrb	r3, [r7, #23]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d00f      	beq.n	800acc4 <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800aca4:	4816      	ldr	r0, [pc, #88]	; (800ad00 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800aca6:	f7fe fc69 	bl	800957c <DbgTraceGetFileName>
 800acaa:	4601      	mov	r1, r0
 800acac:	f240 33d3 	movw	r3, #979	; 0x3d3
 800acb0:	4a14      	ldr	r2, [pc, #80]	; (800ad04 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800acb2:	4815      	ldr	r0, [pc, #84]	; (800ad08 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800acb4:	f001 fe9c 	bl	800c9f0 <iprintf>
 800acb8:	7dfb      	ldrb	r3, [r7, #23]
 800acba:	4619      	mov	r1, r3
 800acbc:	481c      	ldr	r0, [pc, #112]	; (800ad30 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 800acbe:	f001 fe97 	bl	800c9f0 <iprintf>
 800acc2:	e00c      	b.n	800acde <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800acc4:	480e      	ldr	r0, [pc, #56]	; (800ad00 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800acc6:	f7fe fc59 	bl	800957c <DbgTraceGetFileName>
 800acca:	4601      	mov	r1, r0
 800accc:	f240 33d7 	movw	r3, #983	; 0x3d7
 800acd0:	4a0c      	ldr	r2, [pc, #48]	; (800ad04 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800acd2:	480d      	ldr	r0, [pc, #52]	; (800ad08 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800acd4:	f001 fe8c 	bl	800c9f0 <iprintf>
 800acd8:	4816      	ldr	r0, [pc, #88]	; (800ad34 <Ble_Hci_Gap_Gatt_Init+0x520>)
 800acda:	f001 ff25 	bl	800cb28 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800acde:	4808      	ldr	r0, [pc, #32]	; (800ad00 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800ace0:	f7fe fc4c 	bl	800957c <DbgTraceGetFileName>
 800ace4:	4601      	mov	r1, r0
 800ace6:	f240 33da 	movw	r3, #986	; 0x3da
 800acea:	4a06      	ldr	r2, [pc, #24]	; (800ad04 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800acec:	4806      	ldr	r0, [pc, #24]	; (800ad08 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800acee:	f001 fe7f 	bl	800c9f0 <iprintf>
 800acf2:	4811      	ldr	r0, [pc, #68]	; (800ad38 <Ble_Hci_Gap_Gatt_Init+0x524>)
 800acf4:	f001 fe7c 	bl	800c9f0 <iprintf>
}
 800acf8:	bf00      	nop
 800acfa:	371c      	adds	r7, #28
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad00:	0800e528 	.word	0x0800e528
 800ad04:	0800fd4c 	.word	0x0800fd4c
 800ad08:	0800e544 	.word	0x0800e544
 800ad0c:	0800ee0c 	.word	0x0800ee0c
 800ad10:	0800ee2c 	.word	0x0800ee2c
 800ad14:	0800ee68 	.word	0x0800ee68
 800ad18:	20000198 	.word	0x20000198
 800ad1c:	0800ee94 	.word	0x0800ee94
 800ad20:	0800eed4 	.word	0x0800eed4
 800ad24:	0001b207 	.word	0x0001b207
 800ad28:	0800ef04 	.word	0x0800ef04
 800ad2c:	0800ef50 	.word	0x0800ef50
 800ad30:	0800ef8c 	.word	0x0800ef8c
 800ad34:	0800efcc 	.word	0x0800efcc
 800ad38:	0800effc 	.word	0x0800effc

0800ad3c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b08c      	sub	sp, #48	; 0x30
 800ad40:	af08      	add	r7, sp, #32
 800ad42:	4603      	mov	r3, r0
 800ad44:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ad46:	2392      	movs	r3, #146	; 0x92
 800ad48:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800ad4a:	4a32      	ldr	r2, [pc, #200]	; (800ae14 <Adv_Request+0xd8>)
 800ad4c:	79fb      	ldrb	r3, [r7, #7]
 800ad4e:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800ad52:	2300      	movs	r3, #0
 800ad54:	9306      	str	r3, [sp, #24]
 800ad56:	2300      	movs	r3, #0
 800ad58:	9305      	str	r3, [sp, #20]
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	9304      	str	r3, [sp, #16]
 800ad5e:	2300      	movs	r3, #0
 800ad60:	9303      	str	r3, [sp, #12]
 800ad62:	2300      	movs	r3, #0
 800ad64:	9302      	str	r3, [sp, #8]
 800ad66:	2300      	movs	r3, #0
 800ad68:	9301      	str	r3, [sp, #4]
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	9300      	str	r3, [sp, #0]
 800ad6e:	2300      	movs	r3, #0
 800ad70:	22a0      	movs	r2, #160	; 0xa0
 800ad72:	2180      	movs	r1, #128	; 0x80
 800ad74:	2000      	movs	r0, #0
 800ad76:	f7fc fc0f 	bl	8007598 <aci_gap_set_discoverable>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800ad7e:	7bfb      	ldrb	r3, [r7, #15]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d00f      	beq.n	800ada4 <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800ad84:	4824      	ldr	r0, [pc, #144]	; (800ae18 <Adv_Request+0xdc>)
 800ad86:	f7fe fbf9 	bl	800957c <DbgTraceGetFileName>
 800ad8a:	4601      	mov	r1, r0
 800ad8c:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 800ad90:	4a22      	ldr	r2, [pc, #136]	; (800ae1c <Adv_Request+0xe0>)
 800ad92:	4823      	ldr	r0, [pc, #140]	; (800ae20 <Adv_Request+0xe4>)
 800ad94:	f001 fe2c 	bl	800c9f0 <iprintf>
 800ad98:	7bfb      	ldrb	r3, [r7, #15]
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	4821      	ldr	r0, [pc, #132]	; (800ae24 <Adv_Request+0xe8>)
 800ad9e:	f001 fe27 	bl	800c9f0 <iprintf>
 800ada2:	e00c      	b.n	800adbe <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800ada4:	481c      	ldr	r0, [pc, #112]	; (800ae18 <Adv_Request+0xdc>)
 800ada6:	f7fe fbe9 	bl	800957c <DbgTraceGetFileName>
 800adaa:	4601      	mov	r1, r0
 800adac:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 800adb0:	4a1a      	ldr	r2, [pc, #104]	; (800ae1c <Adv_Request+0xe0>)
 800adb2:	481b      	ldr	r0, [pc, #108]	; (800ae20 <Adv_Request+0xe4>)
 800adb4:	f001 fe1c 	bl	800c9f0 <iprintf>
 800adb8:	481b      	ldr	r0, [pc, #108]	; (800ae28 <Adv_Request+0xec>)
 800adba:	f001 feb5 	bl	800cb28 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800adbe:	491b      	ldr	r1, [pc, #108]	; (800ae2c <Adv_Request+0xf0>)
 800adc0:	2013      	movs	r0, #19
 800adc2:	f7fc ff0f 	bl	8007be4 <aci_gap_update_adv_data>
 800adc6:	4603      	mov	r3, r0
 800adc8:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800adca:	7bfb      	ldrb	r3, [r7, #15]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d00f      	beq.n	800adf0 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800add0:	4811      	ldr	r0, [pc, #68]	; (800ae18 <Adv_Request+0xdc>)
 800add2:	f7fe fbd3 	bl	800957c <DbgTraceGetFileName>
 800add6:	4601      	mov	r1, r0
 800add8:	f240 33fb 	movw	r3, #1019	; 0x3fb
 800addc:	4a0f      	ldr	r2, [pc, #60]	; (800ae1c <Adv_Request+0xe0>)
 800adde:	4810      	ldr	r0, [pc, #64]	; (800ae20 <Adv_Request+0xe4>)
 800ade0:	f001 fe06 	bl	800c9f0 <iprintf>
 800ade4:	7bfb      	ldrb	r3, [r7, #15]
 800ade6:	4619      	mov	r1, r3
 800ade8:	4811      	ldr	r0, [pc, #68]	; (800ae30 <Adv_Request+0xf4>)
 800adea:	f001 fe01 	bl	800c9f0 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800adee:	e00d      	b.n	800ae0c <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800adf0:	4809      	ldr	r0, [pc, #36]	; (800ae18 <Adv_Request+0xdc>)
 800adf2:	f7fe fbc3 	bl	800957c <DbgTraceGetFileName>
 800adf6:	4601      	mov	r1, r0
 800adf8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800adfc:	4a07      	ldr	r2, [pc, #28]	; (800ae1c <Adv_Request+0xe0>)
 800adfe:	4808      	ldr	r0, [pc, #32]	; (800ae20 <Adv_Request+0xe4>)
 800ae00:	f001 fdf6 	bl	800c9f0 <iprintf>
 800ae04:	480b      	ldr	r0, [pc, #44]	; (800ae34 <Adv_Request+0xf8>)
 800ae06:	f001 fdf3 	bl	800c9f0 <iprintf>
  return;
 800ae0a:	bf00      	nop
}
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	20000198 	.word	0x20000198
 800ae18:	0800e528 	.word	0x0800e528
 800ae1c:	0800fd64 	.word	0x0800fd64
 800ae20:	0800e544 	.word	0x0800e544
 800ae24:	0800f028 	.word	0x0800f028
 800ae28:	0800f060 	.word	0x0800f060
 800ae2c:	20000010 	.word	0x20000010
 800ae30:	0800f088 	.word	0x0800f088
 800ae34:	0800f0bc 	.word	0x0800f0bc

0800ae38 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b086      	sub	sp, #24
 800ae3c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800ae3e:	f7ff f963 	bl	800a108 <LL_FLASH_GetUDN>
 800ae42:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae4a:	d023      	beq.n	800ae94 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800ae4c:	f7ff f974 	bl	800a138 <LL_FLASH_GetSTCompanyID>
 800ae50:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800ae52:	f7ff f965 	bl	800a120 <LL_FLASH_GetDeviceID>
 800ae56:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	b2da      	uxtb	r2, r3
 800ae5c:	4b16      	ldr	r3, [pc, #88]	; (800aeb8 <BleGetBdAddress+0x80>)
 800ae5e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	0a1b      	lsrs	r3, r3, #8
 800ae64:	b2da      	uxtb	r2, r3
 800ae66:	4b14      	ldr	r3, [pc, #80]	; (800aeb8 <BleGetBdAddress+0x80>)
 800ae68:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	b2da      	uxtb	r2, r3
 800ae6e:	4b12      	ldr	r3, [pc, #72]	; (800aeb8 <BleGetBdAddress+0x80>)
 800ae70:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	b2da      	uxtb	r2, r3
 800ae76:	4b10      	ldr	r3, [pc, #64]	; (800aeb8 <BleGetBdAddress+0x80>)
 800ae78:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	0a1b      	lsrs	r3, r3, #8
 800ae7e:	b2da      	uxtb	r2, r3
 800ae80:	4b0d      	ldr	r3, [pc, #52]	; (800aeb8 <BleGetBdAddress+0x80>)
 800ae82:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	0c1b      	lsrs	r3, r3, #16
 800ae88:	b2da      	uxtb	r2, r3
 800ae8a:	4b0b      	ldr	r3, [pc, #44]	; (800aeb8 <BleGetBdAddress+0x80>)
 800ae8c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800ae8e:	4b0a      	ldr	r3, [pc, #40]	; (800aeb8 <BleGetBdAddress+0x80>)
 800ae90:	617b      	str	r3, [r7, #20]
 800ae92:	e00b      	b.n	800aeac <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800ae94:	2000      	movs	r0, #0
 800ae96:	f7fe fc4f 	bl	8009738 <OTP_Read>
 800ae9a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d002      	beq.n	800aea8 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	617b      	str	r3, [r7, #20]
 800aea6:	e001      	b.n	800aeac <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800aea8:	4b04      	ldr	r3, [pc, #16]	; (800aebc <BleGetBdAddress+0x84>)
 800aeaa:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800aeac:	697b      	ldr	r3, [r7, #20]
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3718      	adds	r7, #24
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	2000152c 	.word	0x2000152c
 800aebc:	0800fcfc 	.word	0x0800fcfc

0800aec0 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800aec6:	4b1f      	ldr	r3, [pc, #124]	; (800af44 <Adv_Cancel+0x84>)
 800aec8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aecc:	2b05      	cmp	r3, #5
 800aece:	d035      	beq.n	800af3c <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800aed0:	2392      	movs	r3, #146	; 0x92
 800aed2:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800aed4:	f7fc fb3c 	bl	8007550 <aci_gap_set_non_discoverable>
 800aed8:	4603      	mov	r3, r0
 800aeda:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800aedc:	4b19      	ldr	r3, [pc, #100]	; (800af44 <Adv_Cancel+0x84>)
 800aede:	2200      	movs	r2, #0
 800aee0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800aee4:	79fb      	ldrb	r3, [r7, #7]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00d      	beq.n	800af06 <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800aeea:	4817      	ldr	r0, [pc, #92]	; (800af48 <Adv_Cancel+0x88>)
 800aeec:	f7fe fb46 	bl	800957c <DbgTraceGetFileName>
 800aef0:	4601      	mov	r1, r0
 800aef2:	f240 434d 	movw	r3, #1101	; 0x44d
 800aef6:	4a15      	ldr	r2, [pc, #84]	; (800af4c <Adv_Cancel+0x8c>)
 800aef8:	4815      	ldr	r0, [pc, #84]	; (800af50 <Adv_Cancel+0x90>)
 800aefa:	f001 fd79 	bl	800c9f0 <iprintf>
 800aefe:	4815      	ldr	r0, [pc, #84]	; (800af54 <Adv_Cancel+0x94>)
 800af00:	f001 fd76 	bl	800c9f0 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800af04:	e01a      	b.n	800af3c <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 800af06:	4810      	ldr	r0, [pc, #64]	; (800af48 <Adv_Cancel+0x88>)
 800af08:	f7fe fb38 	bl	800957c <DbgTraceGetFileName>
 800af0c:	4601      	mov	r1, r0
 800af0e:	f240 4351 	movw	r3, #1105	; 0x451
 800af12:	4a0e      	ldr	r2, [pc, #56]	; (800af4c <Adv_Cancel+0x8c>)
 800af14:	480e      	ldr	r0, [pc, #56]	; (800af50 <Adv_Cancel+0x90>)
 800af16:	f001 fd6b 	bl	800c9f0 <iprintf>
 800af1a:	480f      	ldr	r0, [pc, #60]	; (800af58 <Adv_Cancel+0x98>)
 800af1c:	f001 fd68 	bl	800c9f0 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800af20:	4809      	ldr	r0, [pc, #36]	; (800af48 <Adv_Cancel+0x88>)
 800af22:	f7fe fb2b 	bl	800957c <DbgTraceGetFileName>
 800af26:	4601      	mov	r1, r0
 800af28:	f240 4352 	movw	r3, #1106	; 0x452
 800af2c:	4a07      	ldr	r2, [pc, #28]	; (800af4c <Adv_Cancel+0x8c>)
 800af2e:	4808      	ldr	r0, [pc, #32]	; (800af50 <Adv_Cancel+0x90>)
 800af30:	f001 fd5e 	bl	800c9f0 <iprintf>
 800af34:	4809      	ldr	r0, [pc, #36]	; (800af5c <Adv_Cancel+0x9c>)
 800af36:	f001 fd5b 	bl	800c9f0 <iprintf>
  return;
 800af3a:	bf00      	nop
 800af3c:	bf00      	nop
}
 800af3e:	3708      	adds	r7, #8
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	20000198 	.word	0x20000198
 800af48:	0800e528 	.word	0x0800e528
 800af4c:	0800fd70 	.word	0x0800fd70
 800af50:	0800e544 	.word	0x0800e544
 800af54:	0800f0e4 	.word	0x0800f0e4
 800af58:	0800f108 	.word	0x0800f108
 800af5c:	0800f110 	.word	0x0800f110

0800af60 <APP_BLE_Key_Button1_Action>:
}
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

/* USER CODE BEGIN FD_SPECIFIC_FUNCTIONS */
void APP_BLE_Key_Button1_Action(void)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	af00      	add	r7, sp, #0
  P2PS_APP_SW1_Button_Action();
 800af64:	f000 f95a 	bl	800b21c <P2PS_APP_SW1_Button_Action>
}
 800af68:	bf00      	nop
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800af74:	2100      	movs	r1, #0
 800af76:	2002      	movs	r0, #2
 800af78:	f001 fbda 	bl	800c730 <UTIL_SEQ_SetTask>

  return;
 800af7c:	bf00      	nop
}
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800af8c:	2001      	movs	r0, #1
 800af8e:	f001 fc3b 	bl	800c808 <UTIL_SEQ_SetEvt>

  return;
 800af92:	bf00      	nop
}
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b082      	sub	sp, #8
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800afa2:	2001      	movs	r0, #1
 800afa4:	f001 fc50 	bl	800c848 <UTIL_SEQ_WaitEvt>

  return;
 800afa8:	bf00      	nop
}
 800afaa:	3708      	adds	r7, #8
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	3308      	adds	r3, #8
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7fd fc82 	bl	80088cc <SVCCTL_UserEvtRx>
 800afc8:	4603      	mov	r3, r0
 800afca:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800afcc:	7afb      	ldrb	r3, [r7, #11]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d003      	beq.n	800afda <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2201      	movs	r2, #1
 800afd6:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800afd8:	e003      	b.n	800afe2 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2200      	movs	r2, #0
 800afde:	701a      	strb	r2, [r3, #0]
  return;
 800afe0:	bf00      	nop
}
 800afe2:	3710      	adds	r7, #16
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
 800afee:	4603      	mov	r3, r0
 800aff0:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800aff2:	79fb      	ldrb	r3, [r7, #7]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d002      	beq.n	800affe <BLE_StatusNot+0x16>
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d006      	beq.n	800b00a <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800affc:	e00b      	b.n	800b016 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800affe:	2303      	movs	r3, #3
 800b000:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	f001 fbc0 	bl	800c788 <UTIL_SEQ_PauseTask>
      break;
 800b008:	e005      	b.n	800b016 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b00a:	2303      	movs	r3, #3
 800b00c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800b00e:	68f8      	ldr	r0, [r7, #12]
 800b010:	f001 fbda 	bl	800c7c8 <UTIL_SEQ_ResumeTask>
      break;
 800b014:	bf00      	nop
  }

  return;
 800b016:	bf00      	nop
}
 800b018:	3710      	adds	r7, #16
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
	...

0800b020 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	2b0e      	cmp	r3, #14
 800b02e:	d867      	bhi.n	800b100 <Custom_STM_App_Notification+0xe0>
 800b030:	a201      	add	r2, pc, #4	; (adr r2, 800b038 <Custom_STM_App_Notification+0x18>)
 800b032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b036:	bf00      	nop
 800b038:	0800b101 	.word	0x0800b101
 800b03c:	0800b101 	.word	0x0800b101
 800b040:	0800b101 	.word	0x0800b101
 800b044:	0800b075 	.word	0x0800b075
 800b048:	0800b07d 	.word	0x0800b07d
 800b04c:	0800b101 	.word	0x0800b101
 800b050:	0800b085 	.word	0x0800b085
 800b054:	0800b08d 	.word	0x0800b08d
 800b058:	0800b101 	.word	0x0800b101
 800b05c:	0800b095 	.word	0x0800b095
 800b060:	0800b0a7 	.word	0x0800b0a7
 800b064:	0800b0af 	.word	0x0800b0af
 800b068:	0800b101 	.word	0x0800b101
 800b06c:	0800b0b7 	.word	0x0800b0b7
 800b070:	0800b0ef 	.word	0x0800b0ef
      /* USER CODE END CUSTOM_STM_ANGLE_C_READ_EVT */
      break;

    case CUSTOM_STM_ANGLE_C_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ANGLE_C_NOTIFY_ENABLED_EVT */
    	Custom_App_Context.Angle_c_Notification_Status = 1;
 800b074:	4b25      	ldr	r3, [pc, #148]	; (800b10c <Custom_STM_App_Notification+0xec>)
 800b076:	2201      	movs	r2, #1
 800b078:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_ANGLE_C_NOTIFY_ENABLED_EVT */
      break;
 800b07a:	e042      	b.n	800b102 <Custom_STM_App_Notification+0xe2>

    case CUSTOM_STM_ANGLE_C_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ANGLE_C_NOTIFY_DISABLED_EVT */
    	Custom_App_Context.Angle_c_Notification_Status = 0;
 800b07c:	4b23      	ldr	r3, [pc, #140]	; (800b10c <Custom_STM_App_Notification+0xec>)
 800b07e:	2200      	movs	r2, #0
 800b080:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_ANGLE_C_NOTIFY_DISABLED_EVT */
      break;
 800b082:	e03e      	b.n	800b102 <Custom_STM_App_Notification+0xe2>
      /* USER CODE END CUSTOM_STM_LIVEDATA_C_READ_EVT */
      break;

    case CUSTOM_STM_LIVEDATA_C_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_LIVEDATA_C_NOTIFY_ENABLED_EVT */
    	Custom_App_Context.Livedata_c_Notification_Status =1;
 800b084:	4b21      	ldr	r3, [pc, #132]	; (800b10c <Custom_STM_App_Notification+0xec>)
 800b086:	2201      	movs	r2, #1
 800b088:	705a      	strb	r2, [r3, #1]
      /* USER CODE END CUSTOM_STM_LIVEDATA_C_NOTIFY_ENABLED_EVT */
      break;
 800b08a:	e03a      	b.n	800b102 <Custom_STM_App_Notification+0xe2>

    case CUSTOM_STM_LIVEDATA_C_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_LIVEDATA_C_NOTIFY_DISABLED_EVT */
    	Custom_App_Context.Livedata_c_Notification_Status = 0;
 800b08c:	4b1f      	ldr	r3, [pc, #124]	; (800b10c <Custom_STM_App_Notification+0xec>)
 800b08e:	2200      	movs	r2, #0
 800b090:	705a      	strb	r2, [r3, #1]
      /* USER CODE END CUSTOM_STM_LIVEDATA_C_NOTIFY_DISABLED_EVT */
      break;
 800b092:	e036      	b.n	800b102 <Custom_STM_App_Notification+0xe2>
//         	{
//         		configString[i] = pNotification->DataTransfered.pPayload[i];
//         	}
//
//         	newConfigPresent = true;
    		callback_configReceive(pNotification->DataTransfered.pPayload,pNotification->DataTransfered.Length);
 800b094:	4b1e      	ldr	r3, [pc, #120]	; (800b110 <Custom_STM_App_Notification+0xf0>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	6850      	ldr	r0, [r2, #4]
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	7a12      	ldrb	r2, [r2, #8]
 800b0a0:	4611      	mov	r1, r2
 800b0a2:	4798      	blx	r3
//           HAL_GPIO_WritePin(Blue_Led_GPIO_Port, Blue_Led_Pin, GPIO_PIN_RESET);
//         }


      /* USER CODE END CUSTOM_STM_CONFIGFLAGS_C_WRITE_EVT */
      break;
 800b0a4:	e02d      	b.n	800b102 <Custom_STM_App_Notification+0xe2>

    case CUSTOM_STM_CONFIGFLAGS_C_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_CONFIGFLAGS_C_NOTIFY_ENABLED_EVT */
    	Custom_App_Context.Configflags_c_Notification_Status = 1;
 800b0a6:	4b19      	ldr	r3, [pc, #100]	; (800b10c <Custom_STM_App_Notification+0xec>)
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	709a      	strb	r2, [r3, #2]
      /* USER CODE END CUSTOM_STM_CONFIGFLAGS_C_NOTIFY_ENABLED_EVT */
      break;
 800b0ac:	e029      	b.n	800b102 <Custom_STM_App_Notification+0xe2>

    case CUSTOM_STM_CONFIGFLAGS_C_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_CONFIGFLAGS_C_NOTIFY_DISABLED_EVT */
    	Custom_App_Context.Configflags_c_Notification_Status = 0;
 800b0ae:	4b17      	ldr	r3, [pc, #92]	; (800b10c <Custom_STM_App_Notification+0xec>)
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	709a      	strb	r2, [r3, #2]
      /* USER CODE END CUSTOM_STM_CONFIGFLAGS_C_NOTIFY_DISABLED_EVT */
      break;
 800b0b4:	e025      	b.n	800b102 <Custom_STM_App_Notification+0xe2>
      /* USER CODE END CUSTOM_STM_CONFIGFLAGSREQ_C_READ_EVT */
      break;

    case CUSTOM_STM_CONFIGFLAGSREQ_C_WRITE_EVT:
      /* USER CODE BEGIN CUSTOM_STM_CONFIGFLAGSREQ_C_WRITE_EVT */
        APP_DBG_MSG("\r\n\r** CUSTOM_STM_CONFIGFLAGSREQ_C_WRITE_EVT \n");
 800b0b6:	4817      	ldr	r0, [pc, #92]	; (800b114 <Custom_STM_App_Notification+0xf4>)
 800b0b8:	f7fe fa60 	bl	800957c <DbgTraceGetFileName>
 800b0bc:	4601      	mov	r1, r0
 800b0be:	23e0      	movs	r3, #224	; 0xe0
 800b0c0:	4a15      	ldr	r2, [pc, #84]	; (800b118 <Custom_STM_App_Notification+0xf8>)
 800b0c2:	4816      	ldr	r0, [pc, #88]	; (800b11c <Custom_STM_App_Notification+0xfc>)
 800b0c4:	f001 fc94 	bl	800c9f0 <iprintf>
 800b0c8:	4815      	ldr	r0, [pc, #84]	; (800b120 <Custom_STM_App_Notification+0x100>)
 800b0ca:	f001 fd2d 	bl	800cb28 <puts>
        APP_DBG_MSG("\r\n\r** Length: %d \n", pNotification->DataTransfered.Length);
 800b0ce:	4811      	ldr	r0, [pc, #68]	; (800b114 <Custom_STM_App_Notification+0xf4>)
 800b0d0:	f7fe fa54 	bl	800957c <DbgTraceGetFileName>
 800b0d4:	4601      	mov	r1, r0
 800b0d6:	23e1      	movs	r3, #225	; 0xe1
 800b0d8:	4a0f      	ldr	r2, [pc, #60]	; (800b118 <Custom_STM_App_Notification+0xf8>)
 800b0da:	4810      	ldr	r0, [pc, #64]	; (800b11c <Custom_STM_App_Notification+0xfc>)
 800b0dc:	f001 fc88 	bl	800c9f0 <iprintf>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	7a1b      	ldrb	r3, [r3, #8]
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	480f      	ldr	r0, [pc, #60]	; (800b124 <Custom_STM_App_Notification+0x104>)
 800b0e8:	f001 fc82 	bl	800c9f0 <iprintf>
      /* USER CODE END CUSTOM_STM_CONFIGFLAGSREQ_C_WRITE_EVT */
      break;
 800b0ec:	e009      	b.n	800b102 <Custom_STM_App_Notification+0xe2>

    /* controlService */
    case CUSTOM_STM_CONTROL_C_WRITE_EVT:
      /* USER CODE BEGIN CUSTOM_STM_CONTROL_C_WRITE_EVT */
    	callback_controlReceive(pNotification->DataTransfered.pPayload,pNotification->DataTransfered.Length);
 800b0ee:	4b0e      	ldr	r3, [pc, #56]	; (800b128 <Custom_STM_App_Notification+0x108>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	6850      	ldr	r0, [r2, #4]
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	7a12      	ldrb	r2, [r2, #8]
 800b0fa:	4611      	mov	r1, r2
 800b0fc:	4798      	blx	r3
      /* USER CODE END CUSTOM_STM_CONTROL_C_WRITE_EVT */
      break;
 800b0fe:	e000      	b.n	800b102 <Custom_STM_App_Notification+0xe2>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800b100:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800b102:	bf00      	nop
}
 800b104:	3708      	adds	r7, #8
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	2000021c 	.word	0x2000021c
 800b110:	20001634 	.word	0x20001634
 800b114:	0800f12c 	.word	0x0800f12c
 800b118:	0800fd7c 	.word	0x0800fd7c
 800b11c:	0800f14c 	.word	0x0800f14c
 800b120:	0800f160 	.word	0x0800f160
 800b124:	0800f190 	.word	0x0800f190
 800b128:	20001630 	.word	0x20001630

0800b12c <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d002      	beq.n	800b142 <Custom_APP_Notification+0x16>
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d002      	beq.n	800b146 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800b140:	e002      	b.n	800b148 <Custom_APP_Notification+0x1c>
      break;
 800b142:	bf00      	nop
 800b144:	e000      	b.n	800b148 <Custom_APP_Notification+0x1c>
      break;
 800b146:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800b148:	bf00      	nop
}
 800b14a:	370c      	adds	r7, #12
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr

0800b154 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
 800b158:	4a0b      	ldr	r2, [pc, #44]	; (800b188 <Custom_APP_Init+0x34>)
 800b15a:	2100      	movs	r1, #0
 800b15c:	2008      	movs	r0, #8
 800b15e:	f001 fac5 	bl	800c6ec <UTIL_SEQ_RegTask>

	  Custom_App_Context.ButtonStatus = 0;
 800b162:	4b0a      	ldr	r3, [pc, #40]	; (800b18c <Custom_APP_Init+0x38>)
 800b164:	2200      	movs	r2, #0
 800b166:	70da      	strb	r2, [r3, #3]
	  Custom_App_Context.Angle_c_Notification_Status = 1;
 800b168:	4b08      	ldr	r3, [pc, #32]	; (800b18c <Custom_APP_Init+0x38>)
 800b16a:	2201      	movs	r2, #1
 800b16c:	701a      	strb	r2, [r3, #0]
	  Custom_App_Context.Configflags_c_Notification_Status = 1;
 800b16e:	4b07      	ldr	r3, [pc, #28]	; (800b18c <Custom_APP_Init+0x38>)
 800b170:	2201      	movs	r2, #1
 800b172:	709a      	strb	r2, [r3, #2]
	  Custom_App_Context.Livedata_c_Notification_Status = 1;
 800b174:	4b05      	ldr	r3, [pc, #20]	; (800b18c <Custom_APP_Init+0x38>)
 800b176:	2201      	movs	r2, #1
 800b178:	705a      	strb	r2, [r3, #1]

	  Custom_Configflags_c_Update_Char();
 800b17a:	f000 f83b 	bl	800b1f4 <Custom_Configflags_c_Update_Char>
	  Custom_Angle_c_Update_Char();
 800b17e:	f000 f807 	bl	800b190 <Custom_Angle_c_Update_Char>
	  //Custom_Livedata_c_Update_Char();


  /* USER CODE END CUSTOM_APP_Init */
  return;
 800b182:	bf00      	nop
}
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	0800b22d 	.word	0x0800b22d
 800b18c:	2000021c 	.word	0x2000021c

0800b190 <Custom_Angle_c_Update_Char>:
 *************************************************************/

/* ledService */
/* angleService */
void Custom_Angle_c_Update_Char(void) /* Property Read */
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b08e      	sub	sp, #56	; 0x38
 800b194:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800b196:	2300      	movs	r3, #0
 800b198:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* USER CODE BEGIN Angle_c_UC_1*/

  char btString[50];
  sprintf(btString,"%d,%d,",25,120);
 800b19c:	4638      	mov	r0, r7
 800b19e:	2378      	movs	r3, #120	; 0x78
 800b1a0:	2219      	movs	r2, #25
 800b1a2:	4912      	ldr	r1, [pc, #72]	; (800b1ec <Custom_Angle_c_Update_Char+0x5c>)
 800b1a4:	f001 fcc8 	bl	800cb38 <siprintf>
	for(int i = 0 ; i < 10; i++)
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	637b      	str	r3, [r7, #52]	; 0x34
 800b1ac:	e00b      	b.n	800b1c6 <Custom_Angle_c_Update_Char+0x36>
	{
		UpdateCharData[i] = btString[i];
 800b1ae:	463a      	mov	r2, r7
 800b1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1b2:	4413      	add	r3, r2
 800b1b4:	7819      	ldrb	r1, [r3, #0]
 800b1b6:	4a0e      	ldr	r2, [pc, #56]	; (800b1f0 <Custom_Angle_c_Update_Char+0x60>)
 800b1b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ba:	4413      	add	r3, r2
 800b1bc:	460a      	mov	r2, r1
 800b1be:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < 10; i++)
 800b1c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	637b      	str	r3, [r7, #52]	; 0x34
 800b1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1c8:	2b09      	cmp	r3, #9
 800b1ca:	ddf0      	ble.n	800b1ae <Custom_Angle_c_Update_Char+0x1e>
	}
  updateflag = 1; // Custom_App_Context.Angle_c_Notification_Status
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* USER CODE END Angle_c_UC_1*/

  if (updateflag != 0)
 800b1d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d004      	beq.n	800b1e4 <Custom_Angle_c_Update_Char+0x54>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_ANGLE_C, (uint8_t *)UpdateCharData);
 800b1da:	4905      	ldr	r1, [pc, #20]	; (800b1f0 <Custom_Angle_c_Update_Char+0x60>)
 800b1dc:	2001      	movs	r0, #1
 800b1de:	f000 fd91 	bl	800bd04 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Angle_c_UC_Last*/

  /* USER CODE END Angle_c_UC_Last*/
  return;
 800b1e2:	bf00      	nop
 800b1e4:	bf00      	nop
}
 800b1e6:	3738      	adds	r7, #56	; 0x38
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	0800f1a4 	.word	0x0800f1a4
 800b1f0:	20001538 	.word	0x20001538

0800b1f4 <Custom_Configflags_c_Update_Char>:
  return;
}

/* configService */
void Custom_Configflags_c_Update_Char(void) /* Property Read */
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	71fb      	strb	r3, [r7, #7]
//  UpdateCharData[1] = 0x11;
//  UpdateCharData[2] = 0x11;
//  updateflag = 1;  //Custom_App_Context.Configflags_c_Notification_Status
  /* USER CODE END Configflags_c_UC_1*/

  if (updateflag != 0)
 800b1fe:	79fb      	ldrb	r3, [r7, #7]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d004      	beq.n	800b20e <Custom_Configflags_c_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_CONFIGFLAGS_C, (uint8_t *)UpdateCharData);
 800b204:	4904      	ldr	r1, [pc, #16]	; (800b218 <Custom_Configflags_c_Update_Char+0x24>)
 800b206:	2003      	movs	r0, #3
 800b208:	f000 fd7c 	bl	800bd04 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Configflags_c_UC_Last*/

  /* USER CODE END Configflags_c_UC_Last*/
  return;
 800b20c:	bf00      	nop
 800b20e:	bf00      	nop
}
 800b210:	3708      	adds	r7, #8
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	20001538 	.word	0x20001538

0800b21c <P2PS_APP_SW1_Button_Action>:

/* controlService */

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_APP_SW1_Button_Action(void)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800b220:	2100      	movs	r1, #0
 800b222:	2008      	movs	r0, #8
 800b224:	f001 fa84 	bl	800c730 <UTIL_SEQ_SetTask>

  return;
 800b228:	bf00      	nop
}
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <P2PS_Send_Notification>:

void P2PS_Send_Notification(void)
{
 800b22c:	b480      	push	{r7}
 800b22e:	af00      	add	r7, sp, #0

	if (Custom_App_Context.ButtonStatus == 0)
 800b230:	4b07      	ldr	r3, [pc, #28]	; (800b250 <P2PS_Send_Notification+0x24>)
 800b232:	78db      	ldrb	r3, [r3, #3]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d103      	bne.n	800b240 <P2PS_Send_Notification+0x14>
	{
	  Custom_App_Context.ButtonStatus = 1;
 800b238:	4b05      	ldr	r3, [pc, #20]	; (800b250 <P2PS_Send_Notification+0x24>)
 800b23a:	2201      	movs	r2, #1
 800b23c:	70da      	strb	r2, [r3, #3]
//		Custom_Button_c_Send_Notification();
//   } else {
//	APP_DBG_MSG("-- CUSTOM APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
//   }

  return;
 800b23e:	e003      	b.n	800b248 <P2PS_Send_Notification+0x1c>
	  Custom_App_Context.ButtonStatus = 0;
 800b240:	4b03      	ldr	r3, [pc, #12]	; (800b250 <P2PS_Send_Notification+0x24>)
 800b242:	2200      	movs	r2, #0
 800b244:	70da      	strb	r2, [r3, #3]
  return;
 800b246:	bf00      	nop
}
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr
 800b250:	2000021c 	.word	0x2000021c

0800b254 <livedataUpdateChar>:
//
//  return;
//}

void livedataUpdateChar(char *btString) /* Property Read */
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b084      	sub	sp, #16
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]

	for(int i = 0 ; i < 24; i++)
 800b25c:	2300      	movs	r3, #0
 800b25e:	60fb      	str	r3, [r7, #12]
 800b260:	e00b      	b.n	800b27a <livedataUpdateChar+0x26>
	{
		UpdateCharData[i] = btString[i];
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	687a      	ldr	r2, [r7, #4]
 800b266:	4413      	add	r3, r2
 800b268:	7819      	ldrb	r1, [r3, #0]
 800b26a:	4a09      	ldr	r2, [pc, #36]	; (800b290 <livedataUpdateChar+0x3c>)
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	4413      	add	r3, r2
 800b270:	460a      	mov	r2, r1
 800b272:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < 24; i++)
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	3301      	adds	r3, #1
 800b278:	60fb      	str	r3, [r7, #12]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2b17      	cmp	r3, #23
 800b27e:	ddf0      	ble.n	800b262 <livedataUpdateChar+0xe>
	}

    Custom_STM_App_Update_Char(CUSTOM_STM_LIVEDATA_C, (uint8_t *)UpdateCharData);
 800b280:	4903      	ldr	r1, [pc, #12]	; (800b290 <livedataUpdateChar+0x3c>)
 800b282:	2002      	movs	r0, #2
 800b284:	f000 fd3e 	bl	800bd04 <Custom_STM_App_Update_Char>

  return;
 800b288:	bf00      	nop
}
 800b28a:	3710      	adds	r7, #16
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	20001538 	.word	0x20001538

0800b294 <angleUpdateChar>:

void angleUpdateChar(char *btString) /* Property Read */
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]

	for(int i = 0 ; i < 10; i++)
 800b29c:	2300      	movs	r3, #0
 800b29e:	60fb      	str	r3, [r7, #12]
 800b2a0:	e00b      	b.n	800b2ba <angleUpdateChar+0x26>
	{
		UpdateCharData[i] = btString[i];
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	4413      	add	r3, r2
 800b2a8:	7819      	ldrb	r1, [r3, #0]
 800b2aa:	4a09      	ldr	r2, [pc, #36]	; (800b2d0 <angleUpdateChar+0x3c>)
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	4413      	add	r3, r2
 800b2b0:	460a      	mov	r2, r1
 800b2b2:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < 10; i++)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	60fb      	str	r3, [r7, #12]
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2b09      	cmp	r3, #9
 800b2be:	ddf0      	ble.n	800b2a2 <angleUpdateChar+0xe>
	}

    Custom_STM_App_Update_Char(CUSTOM_STM_ANGLE_C, (uint8_t *)UpdateCharData);
 800b2c0:	4903      	ldr	r1, [pc, #12]	; (800b2d0 <angleUpdateChar+0x3c>)
 800b2c2:	2001      	movs	r0, #1
 800b2c4:	f000 fd1e 	bl	800bd04 <Custom_STM_App_Update_Char>

}
 800b2c8:	bf00      	nop
 800b2ca:	3710      	adds	r7, #16
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	20001538 	.word	0x20001538

0800b2d4 <bt_updateConfigString>:

void bt_updateConfigString(char *btString) /* Property Read */
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]

	for(int i = 0 ; i < 53; i++)
 800b2dc:	2300      	movs	r3, #0
 800b2de:	60fb      	str	r3, [r7, #12]
 800b2e0:	e00b      	b.n	800b2fa <bt_updateConfigString+0x26>
	{
		UpdateCharData[i] = btString[i];
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	4413      	add	r3, r2
 800b2e8:	7819      	ldrb	r1, [r3, #0]
 800b2ea:	4a09      	ldr	r2, [pc, #36]	; (800b310 <bt_updateConfigString+0x3c>)
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	4413      	add	r3, r2
 800b2f0:	460a      	mov	r2, r1
 800b2f2:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < 53; i++)
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	60fb      	str	r3, [r7, #12]
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2b34      	cmp	r3, #52	; 0x34
 800b2fe:	ddf0      	ble.n	800b2e2 <bt_updateConfigString+0xe>
	}

    Custom_STM_App_Update_Char(CUSTOM_STM_CONFIGFLAGS_C, (uint8_t *)UpdateCharData);
 800b300:	4903      	ldr	r1, [pc, #12]	; (800b310 <bt_updateConfigString+0x3c>)
 800b302:	2003      	movs	r0, #3
 800b304:	f000 fcfe 	bl	800bd04 <Custom_STM_App_Update_Char>

}
 800b308:	bf00      	nop
 800b30a:	3710      	adds	r7, #16
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}
 800b310:	20001538 	.word	0x20001538

0800b314 <connectControlCallback>:




void connectControlCallback(btDataReceiveCallbackFunction_t cbFunc)
{
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
	callback_controlReceive = cbFunc;
 800b31c:	4a04      	ldr	r2, [pc, #16]	; (800b330 <connectControlCallback+0x1c>)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6013      	str	r3, [r2, #0]
}
 800b322:	bf00      	nop
 800b324:	370c      	adds	r7, #12
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr
 800b32e:	bf00      	nop
 800b330:	20001630 	.word	0x20001630

0800b334 <connectConfigReceiveCallback>:

void connectConfigReceiveCallback(btDataReceiveCallbackFunction_t cbFunc)
{
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
	callback_configReceive = cbFunc;
 800b33c:	4a04      	ldr	r2, [pc, #16]	; (800b350 <connectConfigReceiveCallback+0x1c>)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6013      	str	r3, [r2, #0]
}
 800b342:	bf00      	nop
 800b344:	370c      	adds	r7, #12
 800b346:	46bd      	mov	sp, r7
 800b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34c:	4770      	bx	lr
 800b34e:	bf00      	nop
 800b350:	20001634 	.word	0x20001634

0800b354 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b08a      	sub	sp, #40	; 0x28
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */
//  aci_gatt_attribute_modified_event_rp0 *attribute_modified;
//  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800b35c:	2300      	movs	r3, #0
 800b35e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	3301      	adds	r3, #1
 800b366:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800b368:	6a3b      	ldr	r3, [r7, #32]
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	2bff      	cmp	r3, #255	; 0xff
 800b36e:	f040 80d0 	bne.w	800b512 <Custom_STM_Event_Handler+0x1be>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800b372:	6a3b      	ldr	r3, [r7, #32]
 800b374:	3302      	adds	r3, #2
 800b376:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	881b      	ldrh	r3, [r3, #0]
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	f640 4214 	movw	r2, #3092	; 0xc14
 800b382:	4293      	cmp	r3, r2
 800b384:	f000 80bf 	beq.w	800b506 <Custom_STM_Event_Handler+0x1b2>
 800b388:	f640 4214 	movw	r2, #3092	; 0xc14
 800b38c:	4293      	cmp	r3, r2
 800b38e:	f300 80bc 	bgt.w	800b50a <Custom_STM_Event_Handler+0x1b6>
 800b392:	f640 4201 	movw	r2, #3073	; 0xc01
 800b396:	4293      	cmp	r3, r2
 800b398:	d003      	beq.n	800b3a2 <Custom_STM_Event_Handler+0x4e>
 800b39a:	f640 4213 	movw	r2, #3091	; 0xc13
 800b39e:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800b3a0:	e0b6      	b.n	800b510 <Custom_STM_Event_Handler+0x1bc>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	3302      	adds	r3, #2
 800b3a6:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomAngle_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	885b      	ldrh	r3, [r3, #2]
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	4b5b      	ldr	r3, [pc, #364]	; (800b520 <Custom_STM_Event_Handler+0x1cc>)
 800b3b2:	88db      	ldrh	r3, [r3, #6]
 800b3b4:	3302      	adds	r3, #2
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d119      	bne.n	800b3ee <Custom_STM_Event_Handler+0x9a>
            return_value = SVCCTL_EvtAckFlowEnable;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 800b3c0:	69bb      	ldr	r3, [r7, #24]
 800b3c2:	7a1b      	ldrb	r3, [r3, #8]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d002      	beq.n	800b3ce <Custom_STM_Event_Handler+0x7a>
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d008      	beq.n	800b3de <Custom_STM_Event_Handler+0x8a>
              break;
 800b3cc:	e09a      	b.n	800b504 <Custom_STM_Event_Handler+0x1b0>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ANGLE_C_NOTIFY_DISABLED_EVT;
 800b3ce:	2304      	movs	r3, #4
 800b3d0:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800b3d2:	f107 0308 	add.w	r3, r7, #8
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f7ff fe22 	bl	800b020 <Custom_STM_App_Notification>
                break;
 800b3dc:	e092      	b.n	800b504 <Custom_STM_Event_Handler+0x1b0>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ANGLE_C_NOTIFY_ENABLED_EVT;
 800b3de:	2303      	movs	r3, #3
 800b3e0:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800b3e2:	f107 0308 	add.w	r3, r7, #8
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7ff fe1a 	bl	800b020 <Custom_STM_App_Notification>
                break;
 800b3ec:	e08a      	b.n	800b504 <Custom_STM_Event_Handler+0x1b0>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomLivedata_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800b3ee:	69bb      	ldr	r3, [r7, #24]
 800b3f0:	885b      	ldrh	r3, [r3, #2]
 800b3f2:	b29b      	uxth	r3, r3
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	4b4a      	ldr	r3, [pc, #296]	; (800b520 <Custom_STM_Event_Handler+0x1cc>)
 800b3f8:	895b      	ldrh	r3, [r3, #10]
 800b3fa:	3302      	adds	r3, #2
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d119      	bne.n	800b434 <Custom_STM_Event_Handler+0xe0>
            return_value = SVCCTL_EvtAckFlowEnable;
 800b400:	2301      	movs	r3, #1
 800b402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	7a1b      	ldrb	r3, [r3, #8]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d002      	beq.n	800b414 <Custom_STM_Event_Handler+0xc0>
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d008      	beq.n	800b424 <Custom_STM_Event_Handler+0xd0>
              break;
 800b412:	e077      	b.n	800b504 <Custom_STM_Event_Handler+0x1b0>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_LIVEDATA_C_NOTIFY_DISABLED_EVT;
 800b414:	2307      	movs	r3, #7
 800b416:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800b418:	f107 0308 	add.w	r3, r7, #8
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7ff fdff 	bl	800b020 <Custom_STM_App_Notification>
                break;
 800b422:	e06f      	b.n	800b504 <Custom_STM_Event_Handler+0x1b0>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_LIVEDATA_C_NOTIFY_ENABLED_EVT;
 800b424:	2306      	movs	r3, #6
 800b426:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800b428:	f107 0308 	add.w	r3, r7, #8
 800b42c:	4618      	mov	r0, r3
 800b42e:	f7ff fdf7 	bl	800b020 <Custom_STM_App_Notification>
                break;
 800b432:	e067      	b.n	800b504 <Custom_STM_Event_Handler+0x1b0>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomConfigflags_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	885b      	ldrh	r3, [r3, #2]
 800b438:	b29b      	uxth	r3, r3
 800b43a:	461a      	mov	r2, r3
 800b43c:	4b38      	ldr	r3, [pc, #224]	; (800b520 <Custom_STM_Event_Handler+0x1cc>)
 800b43e:	89db      	ldrh	r3, [r3, #14]
 800b440:	3302      	adds	r3, #2
 800b442:	429a      	cmp	r2, r3
 800b444:	d119      	bne.n	800b47a <Custom_STM_Event_Handler+0x126>
            return_value = SVCCTL_EvtAckFlowEnable;
 800b446:	2301      	movs	r3, #1
 800b448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 800b44c:	69bb      	ldr	r3, [r7, #24]
 800b44e:	7a1b      	ldrb	r3, [r3, #8]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d002      	beq.n	800b45a <Custom_STM_Event_Handler+0x106>
 800b454:	2b01      	cmp	r3, #1
 800b456:	d008      	beq.n	800b46a <Custom_STM_Event_Handler+0x116>
              break;
 800b458:	e054      	b.n	800b504 <Custom_STM_Event_Handler+0x1b0>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_CONFIGFLAGS_C_NOTIFY_DISABLED_EVT;
 800b45a:	230b      	movs	r3, #11
 800b45c:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800b45e:	f107 0308 	add.w	r3, r7, #8
 800b462:	4618      	mov	r0, r3
 800b464:	f7ff fddc 	bl	800b020 <Custom_STM_App_Notification>
                break;
 800b468:	e04c      	b.n	800b504 <Custom_STM_Event_Handler+0x1b0>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_CONFIGFLAGS_C_NOTIFY_ENABLED_EVT;
 800b46a:	230a      	movs	r3, #10
 800b46c:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800b46e:	f107 0308 	add.w	r3, r7, #8
 800b472:	4618      	mov	r0, r3
 800b474:	f7ff fdd4 	bl	800b020 <Custom_STM_App_Notification>
                break;
 800b478:	e044      	b.n	800b504 <Custom_STM_Event_Handler+0x1b0>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800b47a:	69bb      	ldr	r3, [r7, #24]
 800b47c:	885b      	ldrh	r3, [r3, #2]
 800b47e:	b29b      	uxth	r3, r3
 800b480:	461a      	mov	r2, r3
 800b482:	4b27      	ldr	r3, [pc, #156]	; (800b520 <Custom_STM_Event_Handler+0x1cc>)
 800b484:	885b      	ldrh	r3, [r3, #2]
 800b486:	3301      	adds	r3, #1
 800b488:	429a      	cmp	r2, r3
 800b48a:	d103      	bne.n	800b494 <Custom_STM_Event_Handler+0x140>
            return_value = SVCCTL_EvtAckFlowEnable;
 800b48c:	2301      	movs	r3, #1
 800b48e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800b492:	e03c      	b.n	800b50e <Custom_STM_Event_Handler+0x1ba>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomConfigflags_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800b494:	69bb      	ldr	r3, [r7, #24]
 800b496:	885b      	ldrh	r3, [r3, #2]
 800b498:	b29b      	uxth	r3, r3
 800b49a:	461a      	mov	r2, r3
 800b49c:	4b20      	ldr	r3, [pc, #128]	; (800b520 <Custom_STM_Event_Handler+0x1cc>)
 800b49e:	89db      	ldrh	r3, [r3, #14]
 800b4a0:	3301      	adds	r3, #1
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d112      	bne.n	800b4cc <Custom_STM_Event_Handler+0x178>
            return_value = SVCCTL_EvtAckFlowEnable;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Notification.Custom_Evt_Opcode = CUSTOM_STM_CONFIGFLAGS_C_WRITE_EVT;
 800b4ac:	2309      	movs	r3, #9
 800b4ae:	723b      	strb	r3, [r7, #8]
            Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800b4b0:	69bb      	ldr	r3, [r7, #24]
 800b4b2:	88db      	ldrh	r3, [r3, #6]
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	b2db      	uxtb	r3, r3
 800b4b8:	743b      	strb	r3, [r7, #16]
            Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800b4ba:	69bb      	ldr	r3, [r7, #24]
 800b4bc:	3308      	adds	r3, #8
 800b4be:	60fb      	str	r3, [r7, #12]
			Custom_STM_App_Notification(&Notification);
 800b4c0:	f107 0308 	add.w	r3, r7, #8
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7ff fdab 	bl	800b020 <Custom_STM_App_Notification>
          break;
 800b4ca:	e020      	b.n	800b50e <Custom_STM_Event_Handler+0x1ba>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomControl_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800b4cc:	69bb      	ldr	r3, [r7, #24]
 800b4ce:	885b      	ldrh	r3, [r3, #2]
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	4b12      	ldr	r3, [pc, #72]	; (800b520 <Custom_STM_Event_Handler+0x1cc>)
 800b4d6:	8a9b      	ldrh	r3, [r3, #20]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d117      	bne.n	800b50e <Custom_STM_Event_Handler+0x1ba>
            return_value = SVCCTL_EvtAckFlowEnable;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Notification.Custom_Evt_Opcode = CUSTOM_STM_CONTROL_C_WRITE_EVT;
 800b4e4:	230e      	movs	r3, #14
 800b4e6:	723b      	strb	r3, [r7, #8]
			Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800b4e8:	69bb      	ldr	r3, [r7, #24]
 800b4ea:	88db      	ldrh	r3, [r3, #6]
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	743b      	strb	r3, [r7, #16]
			Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800b4f2:	69bb      	ldr	r3, [r7, #24]
 800b4f4:	3308      	adds	r3, #8
 800b4f6:	60fb      	str	r3, [r7, #12]
			Custom_STM_App_Notification(&Notification);
 800b4f8:	f107 0308 	add.w	r3, r7, #8
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7ff fd8f 	bl	800b020 <Custom_STM_App_Notification>
          break;
 800b502:	e004      	b.n	800b50e <Custom_STM_Event_Handler+0x1ba>
 800b504:	e003      	b.n	800b50e <Custom_STM_Event_Handler+0x1ba>
          break;
 800b506:	bf00      	nop
 800b508:	e004      	b.n	800b514 <Custom_STM_Event_Handler+0x1c0>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800b50a:	bf00      	nop
 800b50c:	e002      	b.n	800b514 <Custom_STM_Event_Handler+0x1c0>
          break;
 800b50e:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b510:	e000      	b.n	800b514 <Custom_STM_Event_Handler+0x1c0>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800b512:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800b514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 800b518:	4618      	mov	r0, r3
 800b51a:	3728      	adds	r7, #40	; 0x28
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	2000016c 	.word	0x2000016c

0800b524 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b08c      	sub	sp, #48	; 0x30
 800b528:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b52a:	2392      	movs	r3, #146	; 0x92
 800b52c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800b52e:	48c1      	ldr	r0, [pc, #772]	; (800b834 <SVCCTL_InitCustomSvc+0x310>)
 800b530:	f7fd f9b2 	bl	8008898 <SVCCTL_RegisterSvcHandler>
   * service_max_attribute_record = 1 for ledService +
   *                                2 for switchCharacteristic +
   *                              = 3
   */

  COPY_LEDSERVICE_UUID(uuid.Char_UUID_128);
 800b534:	2314      	movs	r3, #20
 800b536:	713b      	strb	r3, [r7, #4]
 800b538:	2312      	movs	r3, #18
 800b53a:	717b      	strb	r3, [r7, #5]
 800b53c:	238a      	movs	r3, #138	; 0x8a
 800b53e:	71bb      	strb	r3, [r7, #6]
 800b540:	2376      	movs	r3, #118	; 0x76
 800b542:	71fb      	strb	r3, [r7, #7]
 800b544:	2304      	movs	r3, #4
 800b546:	723b      	strb	r3, [r7, #8]
 800b548:	23d1      	movs	r3, #209	; 0xd1
 800b54a:	727b      	strb	r3, [r7, #9]
 800b54c:	236c      	movs	r3, #108	; 0x6c
 800b54e:	72bb      	strb	r3, [r7, #10]
 800b550:	234f      	movs	r3, #79	; 0x4f
 800b552:	72fb      	strb	r3, [r7, #11]
 800b554:	237e      	movs	r3, #126	; 0x7e
 800b556:	733b      	strb	r3, [r7, #12]
 800b558:	2353      	movs	r3, #83	; 0x53
 800b55a:	737b      	strb	r3, [r7, #13]
 800b55c:	23f2      	movs	r3, #242	; 0xf2
 800b55e:	73bb      	strb	r3, [r7, #14]
 800b560:	23e8      	movs	r3, #232	; 0xe8
 800b562:	73fb      	strb	r3, [r7, #15]
 800b564:	2300      	movs	r3, #0
 800b566:	743b      	strb	r3, [r7, #16]
 800b568:	2300      	movs	r3, #0
 800b56a:	747b      	strb	r3, [r7, #17]
 800b56c:	23b1      	movs	r3, #177	; 0xb1
 800b56e:	74bb      	strb	r3, [r7, #18]
 800b570:	2319      	movs	r3, #25
 800b572:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800b574:	1d39      	adds	r1, r7, #4
 800b576:	4bb0      	ldr	r3, [pc, #704]	; (800b838 <SVCCTL_InitCustomSvc+0x314>)
 800b578:	9300      	str	r3, [sp, #0]
 800b57a:	2303      	movs	r3, #3
 800b57c:	2201      	movs	r2, #1
 800b57e:	2002      	movs	r0, #2
 800b580:	f7fc fc52 	bl	8007e28 <aci_gatt_add_service>
 800b584:	4603      	mov	r3, r0
 800b586:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             3,
                             &(CustomContext.CustomLedsHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800b588:	7dfb      	ldrb	r3, [r7, #23]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d00f      	beq.n	800b5ae <SVCCTL_InitCustomSvc+0x8a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: ledS, error code: 0x%x \n\r", ret);
 800b58e:	48ab      	ldr	r0, [pc, #684]	; (800b83c <SVCCTL_InitCustomSvc+0x318>)
 800b590:	f7fd fff4 	bl	800957c <DbgTraceGetFileName>
 800b594:	4601      	mov	r1, r0
 800b596:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
 800b59a:	4aa9      	ldr	r2, [pc, #676]	; (800b840 <SVCCTL_InitCustomSvc+0x31c>)
 800b59c:	48a9      	ldr	r0, [pc, #676]	; (800b844 <SVCCTL_InitCustomSvc+0x320>)
 800b59e:	f001 fa27 	bl	800c9f0 <iprintf>
 800b5a2:	7dfb      	ldrb	r3, [r7, #23]
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	48a8      	ldr	r0, [pc, #672]	; (800b848 <SVCCTL_InitCustomSvc+0x324>)
 800b5a8:	f001 fa22 	bl	800c9f0 <iprintf>
 800b5ac:	e00c      	b.n	800b5c8 <SVCCTL_InitCustomSvc+0xa4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: ledS \n\r");
 800b5ae:	48a3      	ldr	r0, [pc, #652]	; (800b83c <SVCCTL_InitCustomSvc+0x318>)
 800b5b0:	f7fd ffe4 	bl	800957c <DbgTraceGetFileName>
 800b5b4:	4601      	mov	r1, r0
 800b5b6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b5ba:	4aa1      	ldr	r2, [pc, #644]	; (800b840 <SVCCTL_InitCustomSvc+0x31c>)
 800b5bc:	48a1      	ldr	r0, [pc, #644]	; (800b844 <SVCCTL_InitCustomSvc+0x320>)
 800b5be:	f001 fa17 	bl	800c9f0 <iprintf>
 800b5c2:	48a2      	ldr	r0, [pc, #648]	; (800b84c <SVCCTL_InitCustomSvc+0x328>)
 800b5c4:	f001 fa14 	bl	800c9f0 <iprintf>
  }

  /**
   *  switchCharacteristic
   */
  COPY_SWITCHCHARACTERISTIC_UUID(uuid.Char_UUID_128);
 800b5c8:	2314      	movs	r3, #20
 800b5ca:	713b      	strb	r3, [r7, #4]
 800b5cc:	2312      	movs	r3, #18
 800b5ce:	717b      	strb	r3, [r7, #5]
 800b5d0:	238a      	movs	r3, #138	; 0x8a
 800b5d2:	71bb      	strb	r3, [r7, #6]
 800b5d4:	2376      	movs	r3, #118	; 0x76
 800b5d6:	71fb      	strb	r3, [r7, #7]
 800b5d8:	2304      	movs	r3, #4
 800b5da:	723b      	strb	r3, [r7, #8]
 800b5dc:	23d1      	movs	r3, #209	; 0xd1
 800b5de:	727b      	strb	r3, [r7, #9]
 800b5e0:	236c      	movs	r3, #108	; 0x6c
 800b5e2:	72bb      	strb	r3, [r7, #10]
 800b5e4:	234f      	movs	r3, #79	; 0x4f
 800b5e6:	72fb      	strb	r3, [r7, #11]
 800b5e8:	237e      	movs	r3, #126	; 0x7e
 800b5ea:	733b      	strb	r3, [r7, #12]
 800b5ec:	2353      	movs	r3, #83	; 0x53
 800b5ee:	737b      	strb	r3, [r7, #13]
 800b5f0:	23f2      	movs	r3, #242	; 0xf2
 800b5f2:	73bb      	strb	r3, [r7, #14]
 800b5f4:	23e8      	movs	r3, #232	; 0xe8
 800b5f6:	73fb      	strb	r3, [r7, #15]
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	743b      	strb	r3, [r7, #16]
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	747b      	strb	r3, [r7, #17]
 800b600:	23b1      	movs	r3, #177	; 0xb1
 800b602:	74bb      	strb	r3, [r7, #18]
 800b604:	2319      	movs	r3, #25
 800b606:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomLedsHdle,
 800b608:	4b8b      	ldr	r3, [pc, #556]	; (800b838 <SVCCTL_InitCustomSvc+0x314>)
 800b60a:	8818      	ldrh	r0, [r3, #0]
 800b60c:	4b90      	ldr	r3, [pc, #576]	; (800b850 <SVCCTL_InitCustomSvc+0x32c>)
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	b29b      	uxth	r3, r3
 800b612:	1d3a      	adds	r2, r7, #4
 800b614:	498f      	ldr	r1, [pc, #572]	; (800b854 <SVCCTL_InitCustomSvc+0x330>)
 800b616:	9105      	str	r1, [sp, #20]
 800b618:	2101      	movs	r1, #1
 800b61a:	9104      	str	r1, [sp, #16]
 800b61c:	2110      	movs	r1, #16
 800b61e:	9103      	str	r1, [sp, #12]
 800b620:	2101      	movs	r1, #1
 800b622:	9102      	str	r1, [sp, #8]
 800b624:	2100      	movs	r1, #0
 800b626:	9101      	str	r1, [sp, #4]
 800b628:	2106      	movs	r1, #6
 800b62a:	9100      	str	r1, [sp, #0]
 800b62c:	2102      	movs	r1, #2
 800b62e:	f7fc fcd1 	bl	8007fd4 <aci_gatt_add_char>
 800b632:	4603      	mov	r3, r0
 800b634:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomSwitch_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800b636:	7dfb      	ldrb	r3, [r7, #23]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d00f      	beq.n	800b65c <SVCCTL_InitCustomSvc+0x138>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : SWITCH_C, error code: 0x%x \n\r", ret);
 800b63c:	487f      	ldr	r0, [pc, #508]	; (800b83c <SVCCTL_InitCustomSvc+0x318>)
 800b63e:	f7fd ff9d 	bl	800957c <DbgTraceGetFileName>
 800b642:	4601      	mov	r1, r0
 800b644:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800b648:	4a7d      	ldr	r2, [pc, #500]	; (800b840 <SVCCTL_InitCustomSvc+0x31c>)
 800b64a:	487e      	ldr	r0, [pc, #504]	; (800b844 <SVCCTL_InitCustomSvc+0x320>)
 800b64c:	f001 f9d0 	bl	800c9f0 <iprintf>
 800b650:	7dfb      	ldrb	r3, [r7, #23]
 800b652:	4619      	mov	r1, r3
 800b654:	4880      	ldr	r0, [pc, #512]	; (800b858 <SVCCTL_InitCustomSvc+0x334>)
 800b656:	f001 f9cb 	bl	800c9f0 <iprintf>
 800b65a:	e00c      	b.n	800b676 <SVCCTL_InitCustomSvc+0x152>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : SWITCH_C \n\r");
 800b65c:	4877      	ldr	r0, [pc, #476]	; (800b83c <SVCCTL_InitCustomSvc+0x318>)
 800b65e:	f7fd ff8d 	bl	800957c <DbgTraceGetFileName>
 800b662:	4601      	mov	r1, r0
 800b664:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800b668:	4a75      	ldr	r2, [pc, #468]	; (800b840 <SVCCTL_InitCustomSvc+0x31c>)
 800b66a:	4876      	ldr	r0, [pc, #472]	; (800b844 <SVCCTL_InitCustomSvc+0x320>)
 800b66c:	f001 f9c0 	bl	800c9f0 <iprintf>
 800b670:	487a      	ldr	r0, [pc, #488]	; (800b85c <SVCCTL_InitCustomSvc+0x338>)
 800b672:	f001 f9bd 	bl	800c9f0 <iprintf>
   *                                2 for AngleCharacteristic +
   *                                1 for AngleCharacteristic configuration descriptor +
   *                              = 4
   */

  COPY_ANGLESERVICE_UUID(uuid.Char_UUID_128);
 800b676:	2314      	movs	r3, #20
 800b678:	713b      	strb	r3, [r7, #4]
 800b67a:	2312      	movs	r3, #18
 800b67c:	717b      	strb	r3, [r7, #5]
 800b67e:	238a      	movs	r3, #138	; 0x8a
 800b680:	71bb      	strb	r3, [r7, #6]
 800b682:	2376      	movs	r3, #118	; 0x76
 800b684:	71fb      	strb	r3, [r7, #7]
 800b686:	2304      	movs	r3, #4
 800b688:	723b      	strb	r3, [r7, #8]
 800b68a:	23d1      	movs	r3, #209	; 0xd1
 800b68c:	727b      	strb	r3, [r7, #9]
 800b68e:	236c      	movs	r3, #108	; 0x6c
 800b690:	72bb      	strb	r3, [r7, #10]
 800b692:	234f      	movs	r3, #79	; 0x4f
 800b694:	72fb      	strb	r3, [r7, #11]
 800b696:	237e      	movs	r3, #126	; 0x7e
 800b698:	733b      	strb	r3, [r7, #12]
 800b69a:	2353      	movs	r3, #83	; 0x53
 800b69c:	737b      	strb	r3, [r7, #13]
 800b69e:	23f2      	movs	r3, #242	; 0xf2
 800b6a0:	73bb      	strb	r3, [r7, #14]
 800b6a2:	23e8      	movs	r3, #232	; 0xe8
 800b6a4:	73fb      	strb	r3, [r7, #15]
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	743b      	strb	r3, [r7, #16]
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	747b      	strb	r3, [r7, #17]
 800b6ae:	23b1      	movs	r3, #177	; 0xb1
 800b6b0:	74bb      	strb	r3, [r7, #18]
 800b6b2:	2320      	movs	r3, #32
 800b6b4:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800b6b6:	1d39      	adds	r1, r7, #4
 800b6b8:	4b69      	ldr	r3, [pc, #420]	; (800b860 <SVCCTL_InitCustomSvc+0x33c>)
 800b6ba:	9300      	str	r3, [sp, #0]
 800b6bc:	2304      	movs	r3, #4
 800b6be:	2201      	movs	r2, #1
 800b6c0:	2002      	movs	r0, #2
 800b6c2:	f7fc fbb1 	bl	8007e28 <aci_gatt_add_service>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             4,
                             &(CustomContext.CustomAnglesHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800b6ca:	7dfb      	ldrb	r3, [r7, #23]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d00f      	beq.n	800b6f0 <SVCCTL_InitCustomSvc+0x1cc>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: angleS, error code: 0x%x \n\r", ret);
 800b6d0:	485a      	ldr	r0, [pc, #360]	; (800b83c <SVCCTL_InitCustomSvc+0x318>)
 800b6d2:	f7fd ff53 	bl	800957c <DbgTraceGetFileName>
 800b6d6:	4601      	mov	r1, r0
 800b6d8:	f240 13d5 	movw	r3, #469	; 0x1d5
 800b6dc:	4a58      	ldr	r2, [pc, #352]	; (800b840 <SVCCTL_InitCustomSvc+0x31c>)
 800b6de:	4859      	ldr	r0, [pc, #356]	; (800b844 <SVCCTL_InitCustomSvc+0x320>)
 800b6e0:	f001 f986 	bl	800c9f0 <iprintf>
 800b6e4:	7dfb      	ldrb	r3, [r7, #23]
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	485e      	ldr	r0, [pc, #376]	; (800b864 <SVCCTL_InitCustomSvc+0x340>)
 800b6ea:	f001 f981 	bl	800c9f0 <iprintf>
 800b6ee:	e00c      	b.n	800b70a <SVCCTL_InitCustomSvc+0x1e6>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: angleS \n\r");
 800b6f0:	4852      	ldr	r0, [pc, #328]	; (800b83c <SVCCTL_InitCustomSvc+0x318>)
 800b6f2:	f7fd ff43 	bl	800957c <DbgTraceGetFileName>
 800b6f6:	4601      	mov	r1, r0
 800b6f8:	f240 13d9 	movw	r3, #473	; 0x1d9
 800b6fc:	4a50      	ldr	r2, [pc, #320]	; (800b840 <SVCCTL_InitCustomSvc+0x31c>)
 800b6fe:	4851      	ldr	r0, [pc, #324]	; (800b844 <SVCCTL_InitCustomSvc+0x320>)
 800b700:	f001 f976 	bl	800c9f0 <iprintf>
 800b704:	4858      	ldr	r0, [pc, #352]	; (800b868 <SVCCTL_InitCustomSvc+0x344>)
 800b706:	f001 f973 	bl	800c9f0 <iprintf>
  }

  /**
   *  AngleCharacteristic
   */
  COPY_ANGLECHARACTERISTIC_UUID(uuid.Char_UUID_128);
 800b70a:	2314      	movs	r3, #20
 800b70c:	713b      	strb	r3, [r7, #4]
 800b70e:	2312      	movs	r3, #18
 800b710:	717b      	strb	r3, [r7, #5]
 800b712:	238a      	movs	r3, #138	; 0x8a
 800b714:	71bb      	strb	r3, [r7, #6]
 800b716:	2376      	movs	r3, #118	; 0x76
 800b718:	71fb      	strb	r3, [r7, #7]
 800b71a:	2304      	movs	r3, #4
 800b71c:	723b      	strb	r3, [r7, #8]
 800b71e:	23d1      	movs	r3, #209	; 0xd1
 800b720:	727b      	strb	r3, [r7, #9]
 800b722:	236c      	movs	r3, #108	; 0x6c
 800b724:	72bb      	strb	r3, [r7, #10]
 800b726:	234f      	movs	r3, #79	; 0x4f
 800b728:	72fb      	strb	r3, [r7, #11]
 800b72a:	237e      	movs	r3, #126	; 0x7e
 800b72c:	733b      	strb	r3, [r7, #12]
 800b72e:	2353      	movs	r3, #83	; 0x53
 800b730:	737b      	strb	r3, [r7, #13]
 800b732:	23f2      	movs	r3, #242	; 0xf2
 800b734:	73bb      	strb	r3, [r7, #14]
 800b736:	23e8      	movs	r3, #232	; 0xe8
 800b738:	73fb      	strb	r3, [r7, #15]
 800b73a:	2301      	movs	r3, #1
 800b73c:	743b      	strb	r3, [r7, #16]
 800b73e:	2300      	movs	r3, #0
 800b740:	747b      	strb	r3, [r7, #17]
 800b742:	23b1      	movs	r3, #177	; 0xb1
 800b744:	74bb      	strb	r3, [r7, #18]
 800b746:	2320      	movs	r3, #32
 800b748:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomAnglesHdle,
 800b74a:	4b3b      	ldr	r3, [pc, #236]	; (800b838 <SVCCTL_InitCustomSvc+0x314>)
 800b74c:	8898      	ldrh	r0, [r3, #4]
 800b74e:	4b47      	ldr	r3, [pc, #284]	; (800b86c <SVCCTL_InitCustomSvc+0x348>)
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	b29b      	uxth	r3, r3
 800b754:	1d3a      	adds	r2, r7, #4
 800b756:	4946      	ldr	r1, [pc, #280]	; (800b870 <SVCCTL_InitCustomSvc+0x34c>)
 800b758:	9105      	str	r1, [sp, #20]
 800b75a:	2101      	movs	r1, #1
 800b75c:	9104      	str	r1, [sp, #16]
 800b75e:	2110      	movs	r1, #16
 800b760:	9103      	str	r1, [sp, #12]
 800b762:	2101      	movs	r1, #1
 800b764:	9102      	str	r1, [sp, #8]
 800b766:	2100      	movs	r1, #0
 800b768:	9101      	str	r1, [sp, #4]
 800b76a:	2112      	movs	r1, #18
 800b76c:	9100      	str	r1, [sp, #0]
 800b76e:	2102      	movs	r1, #2
 800b770:	f7fc fc30 	bl	8007fd4 <aci_gatt_add_char>
 800b774:	4603      	mov	r3, r0
 800b776:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomAngle_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800b778:	7dfb      	ldrb	r3, [r7, #23]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d00f      	beq.n	800b79e <SVCCTL_InitCustomSvc+0x27a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ANGLE_C, error code: 0x%x \n\r", ret);
 800b77e:	482f      	ldr	r0, [pc, #188]	; (800b83c <SVCCTL_InitCustomSvc+0x318>)
 800b780:	f7fd fefc 	bl	800957c <DbgTraceGetFileName>
 800b784:	4601      	mov	r1, r0
 800b786:	f240 13eb 	movw	r3, #491	; 0x1eb
 800b78a:	4a2d      	ldr	r2, [pc, #180]	; (800b840 <SVCCTL_InitCustomSvc+0x31c>)
 800b78c:	482d      	ldr	r0, [pc, #180]	; (800b844 <SVCCTL_InitCustomSvc+0x320>)
 800b78e:	f001 f92f 	bl	800c9f0 <iprintf>
 800b792:	7dfb      	ldrb	r3, [r7, #23]
 800b794:	4619      	mov	r1, r3
 800b796:	4837      	ldr	r0, [pc, #220]	; (800b874 <SVCCTL_InitCustomSvc+0x350>)
 800b798:	f001 f92a 	bl	800c9f0 <iprintf>
 800b79c:	e00c      	b.n	800b7b8 <SVCCTL_InitCustomSvc+0x294>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ANGLE_C \n\r");
 800b79e:	4827      	ldr	r0, [pc, #156]	; (800b83c <SVCCTL_InitCustomSvc+0x318>)
 800b7a0:	f7fd feec 	bl	800957c <DbgTraceGetFileName>
 800b7a4:	4601      	mov	r1, r0
 800b7a6:	f240 13ef 	movw	r3, #495	; 0x1ef
 800b7aa:	4a25      	ldr	r2, [pc, #148]	; (800b840 <SVCCTL_InitCustomSvc+0x31c>)
 800b7ac:	4825      	ldr	r0, [pc, #148]	; (800b844 <SVCCTL_InitCustomSvc+0x320>)
 800b7ae:	f001 f91f 	bl	800c9f0 <iprintf>
 800b7b2:	4831      	ldr	r0, [pc, #196]	; (800b878 <SVCCTL_InitCustomSvc+0x354>)
 800b7b4:	f001 f91c 	bl	800c9f0 <iprintf>
   *                                2 for liveDataCharacteristic +
   *                                1 for liveDataCharacteristic configuration descriptor +
   *                              = 4
   */

  COPY_LIVEDATASERVICE_UUID(uuid.Char_UUID_128);
 800b7b8:	2314      	movs	r3, #20
 800b7ba:	713b      	strb	r3, [r7, #4]
 800b7bc:	2312      	movs	r3, #18
 800b7be:	717b      	strb	r3, [r7, #5]
 800b7c0:	238a      	movs	r3, #138	; 0x8a
 800b7c2:	71bb      	strb	r3, [r7, #6]
 800b7c4:	2376      	movs	r3, #118	; 0x76
 800b7c6:	71fb      	strb	r3, [r7, #7]
 800b7c8:	2304      	movs	r3, #4
 800b7ca:	723b      	strb	r3, [r7, #8]
 800b7cc:	23d1      	movs	r3, #209	; 0xd1
 800b7ce:	727b      	strb	r3, [r7, #9]
 800b7d0:	236c      	movs	r3, #108	; 0x6c
 800b7d2:	72bb      	strb	r3, [r7, #10]
 800b7d4:	234f      	movs	r3, #79	; 0x4f
 800b7d6:	72fb      	strb	r3, [r7, #11]
 800b7d8:	237e      	movs	r3, #126	; 0x7e
 800b7da:	733b      	strb	r3, [r7, #12]
 800b7dc:	2353      	movs	r3, #83	; 0x53
 800b7de:	737b      	strb	r3, [r7, #13]
 800b7e0:	23f2      	movs	r3, #242	; 0xf2
 800b7e2:	73bb      	strb	r3, [r7, #14]
 800b7e4:	23e8      	movs	r3, #232	; 0xe8
 800b7e6:	73fb      	strb	r3, [r7, #15]
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	743b      	strb	r3, [r7, #16]
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	747b      	strb	r3, [r7, #17]
 800b7f0:	23b1      	movs	r3, #177	; 0xb1
 800b7f2:	74bb      	strb	r3, [r7, #18]
 800b7f4:	2322      	movs	r3, #34	; 0x22
 800b7f6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800b7f8:	1d39      	adds	r1, r7, #4
 800b7fa:	4b20      	ldr	r3, [pc, #128]	; (800b87c <SVCCTL_InitCustomSvc+0x358>)
 800b7fc:	9300      	str	r3, [sp, #0]
 800b7fe:	2304      	movs	r3, #4
 800b800:	2201      	movs	r2, #1
 800b802:	2002      	movs	r0, #2
 800b804:	f7fc fb10 	bl	8007e28 <aci_gatt_add_service>
 800b808:	4603      	mov	r3, r0
 800b80a:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             4,
                             &(CustomContext.CustomLivedatasHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800b80c:	7dfb      	ldrb	r3, [r7, #23]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d038      	beq.n	800b884 <SVCCTL_InitCustomSvc+0x360>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: liveDataS, error code: 0x%x \n\r", ret);
 800b812:	480a      	ldr	r0, [pc, #40]	; (800b83c <SVCCTL_InitCustomSvc+0x318>)
 800b814:	f7fd feb2 	bl	800957c <DbgTraceGetFileName>
 800b818:	4601      	mov	r1, r0
 800b81a:	f44f 7301 	mov.w	r3, #516	; 0x204
 800b81e:	4a08      	ldr	r2, [pc, #32]	; (800b840 <SVCCTL_InitCustomSvc+0x31c>)
 800b820:	4808      	ldr	r0, [pc, #32]	; (800b844 <SVCCTL_InitCustomSvc+0x320>)
 800b822:	f001 f8e5 	bl	800c9f0 <iprintf>
 800b826:	7dfb      	ldrb	r3, [r7, #23]
 800b828:	4619      	mov	r1, r3
 800b82a:	4815      	ldr	r0, [pc, #84]	; (800b880 <SVCCTL_InitCustomSvc+0x35c>)
 800b82c:	f001 f8e0 	bl	800c9f0 <iprintf>
 800b830:	e035      	b.n	800b89e <SVCCTL_InitCustomSvc+0x37a>
 800b832:	bf00      	nop
 800b834:	0800b355 	.word	0x0800b355
 800b838:	2000016c 	.word	0x2000016c
 800b83c:	0800f1c4 	.word	0x0800f1c4
 800b840:	0800fd98 	.word	0x0800fd98
 800b844:	0800f1e4 	.word	0x0800f1e4
 800b848:	0800f1f8 	.word	0x0800f1f8
 800b84c:	0800f23c 	.word	0x0800f23c
 800b850:	20000023 	.word	0x20000023
 800b854:	2000016e 	.word	0x2000016e
 800b858:	0800f270 	.word	0x0800f270
 800b85c:	0800f2b8 	.word	0x0800f2b8
 800b860:	20000170 	.word	0x20000170
 800b864:	0800f2f0 	.word	0x0800f2f0
 800b868:	0800f338 	.word	0x0800f338
 800b86c:	20000024 	.word	0x20000024
 800b870:	20000172 	.word	0x20000172
 800b874:	0800f36c 	.word	0x0800f36c
 800b878:	0800f3b4 	.word	0x0800f3b4
 800b87c:	20000174 	.word	0x20000174
 800b880:	0800f3e8 	.word	0x0800f3e8
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: liveDataS \n\r");
 800b884:	48a7      	ldr	r0, [pc, #668]	; (800bb24 <SVCCTL_InitCustomSvc+0x600>)
 800b886:	f7fd fe79 	bl	800957c <DbgTraceGetFileName>
 800b88a:	4601      	mov	r1, r0
 800b88c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b890:	4aa5      	ldr	r2, [pc, #660]	; (800bb28 <SVCCTL_InitCustomSvc+0x604>)
 800b892:	48a6      	ldr	r0, [pc, #664]	; (800bb2c <SVCCTL_InitCustomSvc+0x608>)
 800b894:	f001 f8ac 	bl	800c9f0 <iprintf>
 800b898:	48a5      	ldr	r0, [pc, #660]	; (800bb30 <SVCCTL_InitCustomSvc+0x60c>)
 800b89a:	f001 f8a9 	bl	800c9f0 <iprintf>
  }

  /**
   *  liveDataCharacteristic
   */
  COPY_LIVEDATACHARACTERISTIC_UUID(uuid.Char_UUID_128);
 800b89e:	2314      	movs	r3, #20
 800b8a0:	713b      	strb	r3, [r7, #4]
 800b8a2:	2312      	movs	r3, #18
 800b8a4:	717b      	strb	r3, [r7, #5]
 800b8a6:	238a      	movs	r3, #138	; 0x8a
 800b8a8:	71bb      	strb	r3, [r7, #6]
 800b8aa:	2376      	movs	r3, #118	; 0x76
 800b8ac:	71fb      	strb	r3, [r7, #7]
 800b8ae:	2304      	movs	r3, #4
 800b8b0:	723b      	strb	r3, [r7, #8]
 800b8b2:	23d1      	movs	r3, #209	; 0xd1
 800b8b4:	727b      	strb	r3, [r7, #9]
 800b8b6:	236c      	movs	r3, #108	; 0x6c
 800b8b8:	72bb      	strb	r3, [r7, #10]
 800b8ba:	234f      	movs	r3, #79	; 0x4f
 800b8bc:	72fb      	strb	r3, [r7, #11]
 800b8be:	237e      	movs	r3, #126	; 0x7e
 800b8c0:	733b      	strb	r3, [r7, #12]
 800b8c2:	2353      	movs	r3, #83	; 0x53
 800b8c4:	737b      	strb	r3, [r7, #13]
 800b8c6:	23f2      	movs	r3, #242	; 0xf2
 800b8c8:	73bb      	strb	r3, [r7, #14]
 800b8ca:	23e8      	movs	r3, #232	; 0xe8
 800b8cc:	73fb      	strb	r3, [r7, #15]
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	743b      	strb	r3, [r7, #16]
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	747b      	strb	r3, [r7, #17]
 800b8d6:	23b1      	movs	r3, #177	; 0xb1
 800b8d8:	74bb      	strb	r3, [r7, #18]
 800b8da:	2322      	movs	r3, #34	; 0x22
 800b8dc:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomLivedatasHdle,
 800b8de:	4b95      	ldr	r3, [pc, #596]	; (800bb34 <SVCCTL_InitCustomSvc+0x610>)
 800b8e0:	8918      	ldrh	r0, [r3, #8]
 800b8e2:	4b95      	ldr	r3, [pc, #596]	; (800bb38 <SVCCTL_InitCustomSvc+0x614>)
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	1d3a      	adds	r2, r7, #4
 800b8ea:	4994      	ldr	r1, [pc, #592]	; (800bb3c <SVCCTL_InitCustomSvc+0x618>)
 800b8ec:	9105      	str	r1, [sp, #20]
 800b8ee:	2101      	movs	r1, #1
 800b8f0:	9104      	str	r1, [sp, #16]
 800b8f2:	2110      	movs	r1, #16
 800b8f4:	9103      	str	r1, [sp, #12]
 800b8f6:	2101      	movs	r1, #1
 800b8f8:	9102      	str	r1, [sp, #8]
 800b8fa:	2100      	movs	r1, #0
 800b8fc:	9101      	str	r1, [sp, #4]
 800b8fe:	2112      	movs	r1, #18
 800b900:	9100      	str	r1, [sp, #0]
 800b902:	2102      	movs	r1, #2
 800b904:	f7fc fb66 	bl	8007fd4 <aci_gatt_add_char>
 800b908:	4603      	mov	r3, r0
 800b90a:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomLivedata_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800b90c:	7dfb      	ldrb	r3, [r7, #23]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d00f      	beq.n	800b932 <SVCCTL_InitCustomSvc+0x40e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : LIVEDATA_C, error code: 0x%x \n\r", ret);
 800b912:	4884      	ldr	r0, [pc, #528]	; (800bb24 <SVCCTL_InitCustomSvc+0x600>)
 800b914:	f7fd fe32 	bl	800957c <DbgTraceGetFileName>
 800b918:	4601      	mov	r1, r0
 800b91a:	f240 231a 	movw	r3, #538	; 0x21a
 800b91e:	4a82      	ldr	r2, [pc, #520]	; (800bb28 <SVCCTL_InitCustomSvc+0x604>)
 800b920:	4882      	ldr	r0, [pc, #520]	; (800bb2c <SVCCTL_InitCustomSvc+0x608>)
 800b922:	f001 f865 	bl	800c9f0 <iprintf>
 800b926:	7dfb      	ldrb	r3, [r7, #23]
 800b928:	4619      	mov	r1, r3
 800b92a:	4885      	ldr	r0, [pc, #532]	; (800bb40 <SVCCTL_InitCustomSvc+0x61c>)
 800b92c:	f001 f860 	bl	800c9f0 <iprintf>
 800b930:	e00c      	b.n	800b94c <SVCCTL_InitCustomSvc+0x428>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : LIVEDATA_C \n\r");
 800b932:	487c      	ldr	r0, [pc, #496]	; (800bb24 <SVCCTL_InitCustomSvc+0x600>)
 800b934:	f7fd fe22 	bl	800957c <DbgTraceGetFileName>
 800b938:	4601      	mov	r1, r0
 800b93a:	f240 231e 	movw	r3, #542	; 0x21e
 800b93e:	4a7a      	ldr	r2, [pc, #488]	; (800bb28 <SVCCTL_InitCustomSvc+0x604>)
 800b940:	487a      	ldr	r0, [pc, #488]	; (800bb2c <SVCCTL_InitCustomSvc+0x608>)
 800b942:	f001 f855 	bl	800c9f0 <iprintf>
 800b946:	487f      	ldr	r0, [pc, #508]	; (800bb44 <SVCCTL_InitCustomSvc+0x620>)
 800b948:	f001 f852 	bl	800c9f0 <iprintf>
   *                                2 for configFlagsRequestCharacteristic +
   *                                1 for configFlagsCharacteristic configuration descriptor +
   *                              = 6
   */

  COPY_CONFIGSERVICE_UUID(uuid.Char_UUID_128);
 800b94c:	2314      	movs	r3, #20
 800b94e:	713b      	strb	r3, [r7, #4]
 800b950:	2312      	movs	r3, #18
 800b952:	717b      	strb	r3, [r7, #5]
 800b954:	238a      	movs	r3, #138	; 0x8a
 800b956:	71bb      	strb	r3, [r7, #6]
 800b958:	2376      	movs	r3, #118	; 0x76
 800b95a:	71fb      	strb	r3, [r7, #7]
 800b95c:	2304      	movs	r3, #4
 800b95e:	723b      	strb	r3, [r7, #8]
 800b960:	23d1      	movs	r3, #209	; 0xd1
 800b962:	727b      	strb	r3, [r7, #9]
 800b964:	236c      	movs	r3, #108	; 0x6c
 800b966:	72bb      	strb	r3, [r7, #10]
 800b968:	234f      	movs	r3, #79	; 0x4f
 800b96a:	72fb      	strb	r3, [r7, #11]
 800b96c:	237e      	movs	r3, #126	; 0x7e
 800b96e:	733b      	strb	r3, [r7, #12]
 800b970:	2353      	movs	r3, #83	; 0x53
 800b972:	737b      	strb	r3, [r7, #13]
 800b974:	23f2      	movs	r3, #242	; 0xf2
 800b976:	73bb      	strb	r3, [r7, #14]
 800b978:	23e8      	movs	r3, #232	; 0xe8
 800b97a:	73fb      	strb	r3, [r7, #15]
 800b97c:	2300      	movs	r3, #0
 800b97e:	743b      	strb	r3, [r7, #16]
 800b980:	2300      	movs	r3, #0
 800b982:	747b      	strb	r3, [r7, #17]
 800b984:	23b1      	movs	r3, #177	; 0xb1
 800b986:	74bb      	strb	r3, [r7, #18]
 800b988:	2323      	movs	r3, #35	; 0x23
 800b98a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800b98c:	1d39      	adds	r1, r7, #4
 800b98e:	4b6e      	ldr	r3, [pc, #440]	; (800bb48 <SVCCTL_InitCustomSvc+0x624>)
 800b990:	9300      	str	r3, [sp, #0]
 800b992:	2306      	movs	r3, #6
 800b994:	2201      	movs	r2, #1
 800b996:	2002      	movs	r0, #2
 800b998:	f7fc fa46 	bl	8007e28 <aci_gatt_add_service>
 800b99c:	4603      	mov	r3, r0
 800b99e:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             6,
                             &(CustomContext.CustomConfigsHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800b9a0:	7dfb      	ldrb	r3, [r7, #23]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d00f      	beq.n	800b9c6 <SVCCTL_InitCustomSvc+0x4a2>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: configS, error code: 0x%x \n\r", ret);
 800b9a6:	485f      	ldr	r0, [pc, #380]	; (800bb24 <SVCCTL_InitCustomSvc+0x600>)
 800b9a8:	f7fd fde8 	bl	800957c <DbgTraceGetFileName>
 800b9ac:	4601      	mov	r1, r0
 800b9ae:	f44f 730d 	mov.w	r3, #564	; 0x234
 800b9b2:	4a5d      	ldr	r2, [pc, #372]	; (800bb28 <SVCCTL_InitCustomSvc+0x604>)
 800b9b4:	485d      	ldr	r0, [pc, #372]	; (800bb2c <SVCCTL_InitCustomSvc+0x608>)
 800b9b6:	f001 f81b 	bl	800c9f0 <iprintf>
 800b9ba:	7dfb      	ldrb	r3, [r7, #23]
 800b9bc:	4619      	mov	r1, r3
 800b9be:	4863      	ldr	r0, [pc, #396]	; (800bb4c <SVCCTL_InitCustomSvc+0x628>)
 800b9c0:	f001 f816 	bl	800c9f0 <iprintf>
 800b9c4:	e00c      	b.n	800b9e0 <SVCCTL_InitCustomSvc+0x4bc>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: configS \n\r");
 800b9c6:	4857      	ldr	r0, [pc, #348]	; (800bb24 <SVCCTL_InitCustomSvc+0x600>)
 800b9c8:	f7fd fdd8 	bl	800957c <DbgTraceGetFileName>
 800b9cc:	4601      	mov	r1, r0
 800b9ce:	f44f 730e 	mov.w	r3, #568	; 0x238
 800b9d2:	4a55      	ldr	r2, [pc, #340]	; (800bb28 <SVCCTL_InitCustomSvc+0x604>)
 800b9d4:	4855      	ldr	r0, [pc, #340]	; (800bb2c <SVCCTL_InitCustomSvc+0x608>)
 800b9d6:	f001 f80b 	bl	800c9f0 <iprintf>
 800b9da:	485d      	ldr	r0, [pc, #372]	; (800bb50 <SVCCTL_InitCustomSvc+0x62c>)
 800b9dc:	f001 f808 	bl	800c9f0 <iprintf>
  }

  /**
   *  configFlagsCharacteristic
   */
  COPY_CONFIGFLAGSCHARACTERISTIC_UUID(uuid.Char_UUID_128);
 800b9e0:	2314      	movs	r3, #20
 800b9e2:	713b      	strb	r3, [r7, #4]
 800b9e4:	2312      	movs	r3, #18
 800b9e6:	717b      	strb	r3, [r7, #5]
 800b9e8:	238a      	movs	r3, #138	; 0x8a
 800b9ea:	71bb      	strb	r3, [r7, #6]
 800b9ec:	2376      	movs	r3, #118	; 0x76
 800b9ee:	71fb      	strb	r3, [r7, #7]
 800b9f0:	2304      	movs	r3, #4
 800b9f2:	723b      	strb	r3, [r7, #8]
 800b9f4:	23d1      	movs	r3, #209	; 0xd1
 800b9f6:	727b      	strb	r3, [r7, #9]
 800b9f8:	236c      	movs	r3, #108	; 0x6c
 800b9fa:	72bb      	strb	r3, [r7, #10]
 800b9fc:	234f      	movs	r3, #79	; 0x4f
 800b9fe:	72fb      	strb	r3, [r7, #11]
 800ba00:	237e      	movs	r3, #126	; 0x7e
 800ba02:	733b      	strb	r3, [r7, #12]
 800ba04:	2353      	movs	r3, #83	; 0x53
 800ba06:	737b      	strb	r3, [r7, #13]
 800ba08:	23f2      	movs	r3, #242	; 0xf2
 800ba0a:	73bb      	strb	r3, [r7, #14]
 800ba0c:	23e8      	movs	r3, #232	; 0xe8
 800ba0e:	73fb      	strb	r3, [r7, #15]
 800ba10:	2301      	movs	r3, #1
 800ba12:	743b      	strb	r3, [r7, #16]
 800ba14:	2300      	movs	r3, #0
 800ba16:	747b      	strb	r3, [r7, #17]
 800ba18:	23b1      	movs	r3, #177	; 0xb1
 800ba1a:	74bb      	strb	r3, [r7, #18]
 800ba1c:	2323      	movs	r3, #35	; 0x23
 800ba1e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomConfigsHdle,
 800ba20:	4b44      	ldr	r3, [pc, #272]	; (800bb34 <SVCCTL_InitCustomSvc+0x610>)
 800ba22:	8998      	ldrh	r0, [r3, #12]
 800ba24:	4b4b      	ldr	r3, [pc, #300]	; (800bb54 <SVCCTL_InitCustomSvc+0x630>)
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	1d3a      	adds	r2, r7, #4
 800ba2c:	494a      	ldr	r1, [pc, #296]	; (800bb58 <SVCCTL_InitCustomSvc+0x634>)
 800ba2e:	9105      	str	r1, [sp, #20]
 800ba30:	2101      	movs	r1, #1
 800ba32:	9104      	str	r1, [sp, #16]
 800ba34:	2110      	movs	r1, #16
 800ba36:	9103      	str	r1, [sp, #12]
 800ba38:	2101      	movs	r1, #1
 800ba3a:	9102      	str	r1, [sp, #8]
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	9101      	str	r1, [sp, #4]
 800ba40:	211a      	movs	r1, #26
 800ba42:	9100      	str	r1, [sp, #0]
 800ba44:	2102      	movs	r1, #2
 800ba46:	f7fc fac5 	bl	8007fd4 <aci_gatt_add_char>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomConfigflags_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800ba4e:	7dfb      	ldrb	r3, [r7, #23]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d00f      	beq.n	800ba74 <SVCCTL_InitCustomSvc+0x550>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : CONFIGFLAGS_C, error code: 0x%x \n\r", ret);
 800ba54:	4833      	ldr	r0, [pc, #204]	; (800bb24 <SVCCTL_InitCustomSvc+0x600>)
 800ba56:	f7fd fd91 	bl	800957c <DbgTraceGetFileName>
 800ba5a:	4601      	mov	r1, r0
 800ba5c:	f240 234a 	movw	r3, #586	; 0x24a
 800ba60:	4a31      	ldr	r2, [pc, #196]	; (800bb28 <SVCCTL_InitCustomSvc+0x604>)
 800ba62:	4832      	ldr	r0, [pc, #200]	; (800bb2c <SVCCTL_InitCustomSvc+0x608>)
 800ba64:	f000 ffc4 	bl	800c9f0 <iprintf>
 800ba68:	7dfb      	ldrb	r3, [r7, #23]
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	483b      	ldr	r0, [pc, #236]	; (800bb5c <SVCCTL_InitCustomSvc+0x638>)
 800ba6e:	f000 ffbf 	bl	800c9f0 <iprintf>
 800ba72:	e00c      	b.n	800ba8e <SVCCTL_InitCustomSvc+0x56a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : CONFIGFLAGS_C \n\r");
 800ba74:	482b      	ldr	r0, [pc, #172]	; (800bb24 <SVCCTL_InitCustomSvc+0x600>)
 800ba76:	f7fd fd81 	bl	800957c <DbgTraceGetFileName>
 800ba7a:	4601      	mov	r1, r0
 800ba7c:	f240 234e 	movw	r3, #590	; 0x24e
 800ba80:	4a29      	ldr	r2, [pc, #164]	; (800bb28 <SVCCTL_InitCustomSvc+0x604>)
 800ba82:	482a      	ldr	r0, [pc, #168]	; (800bb2c <SVCCTL_InitCustomSvc+0x608>)
 800ba84:	f000 ffb4 	bl	800c9f0 <iprintf>
 800ba88:	4835      	ldr	r0, [pc, #212]	; (800bb60 <SVCCTL_InitCustomSvc+0x63c>)
 800ba8a:	f000 ffb1 	bl	800c9f0 <iprintf>
  }
  /**
   *  configFlagsRequestCharacteristic
   */
  COPY_CONFIGFLAGSREQUESTCHARACTERISTIC_UUID(uuid.Char_UUID_128);
 800ba8e:	2314      	movs	r3, #20
 800ba90:	713b      	strb	r3, [r7, #4]
 800ba92:	2312      	movs	r3, #18
 800ba94:	717b      	strb	r3, [r7, #5]
 800ba96:	238a      	movs	r3, #138	; 0x8a
 800ba98:	71bb      	strb	r3, [r7, #6]
 800ba9a:	2376      	movs	r3, #118	; 0x76
 800ba9c:	71fb      	strb	r3, [r7, #7]
 800ba9e:	2304      	movs	r3, #4
 800baa0:	723b      	strb	r3, [r7, #8]
 800baa2:	23d1      	movs	r3, #209	; 0xd1
 800baa4:	727b      	strb	r3, [r7, #9]
 800baa6:	236c      	movs	r3, #108	; 0x6c
 800baa8:	72bb      	strb	r3, [r7, #10]
 800baaa:	234f      	movs	r3, #79	; 0x4f
 800baac:	72fb      	strb	r3, [r7, #11]
 800baae:	237e      	movs	r3, #126	; 0x7e
 800bab0:	733b      	strb	r3, [r7, #12]
 800bab2:	2353      	movs	r3, #83	; 0x53
 800bab4:	737b      	strb	r3, [r7, #13]
 800bab6:	23f2      	movs	r3, #242	; 0xf2
 800bab8:	73bb      	strb	r3, [r7, #14]
 800baba:	23e8      	movs	r3, #232	; 0xe8
 800babc:	73fb      	strb	r3, [r7, #15]
 800babe:	2302      	movs	r3, #2
 800bac0:	743b      	strb	r3, [r7, #16]
 800bac2:	2300      	movs	r3, #0
 800bac4:	747b      	strb	r3, [r7, #17]
 800bac6:	23b1      	movs	r3, #177	; 0xb1
 800bac8:	74bb      	strb	r3, [r7, #18]
 800baca:	2323      	movs	r3, #35	; 0x23
 800bacc:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomConfigsHdle,
 800bace:	4b19      	ldr	r3, [pc, #100]	; (800bb34 <SVCCTL_InitCustomSvc+0x610>)
 800bad0:	8998      	ldrh	r0, [r3, #12]
 800bad2:	4b24      	ldr	r3, [pc, #144]	; (800bb64 <SVCCTL_InitCustomSvc+0x640>)
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	1d3a      	adds	r2, r7, #4
 800bada:	4923      	ldr	r1, [pc, #140]	; (800bb68 <SVCCTL_InitCustomSvc+0x644>)
 800badc:	9105      	str	r1, [sp, #20]
 800bade:	2101      	movs	r1, #1
 800bae0:	9104      	str	r1, [sp, #16]
 800bae2:	2110      	movs	r1, #16
 800bae4:	9103      	str	r1, [sp, #12]
 800bae6:	2100      	movs	r1, #0
 800bae8:	9102      	str	r1, [sp, #8]
 800baea:	2100      	movs	r1, #0
 800baec:	9101      	str	r1, [sp, #4]
 800baee:	210a      	movs	r1, #10
 800baf0:	9100      	str	r1, [sp, #0]
 800baf2:	2102      	movs	r1, #2
 800baf4:	f7fc fa6e 	bl	8007fd4 <aci_gatt_add_char>
 800baf8:	4603      	mov	r3, r0
 800bafa:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_DONT_NOTIFY_EVENTS,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomConfigflagsreq_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800bafc:	7dfb      	ldrb	r3, [r7, #23]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d036      	beq.n	800bb70 <SVCCTL_InitCustomSvc+0x64c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : CONFIGFLAGSREQ_C, error code: 0x%x \n\r", ret);
 800bb02:	4808      	ldr	r0, [pc, #32]	; (800bb24 <SVCCTL_InitCustomSvc+0x600>)
 800bb04:	f7fd fd3a 	bl	800957c <DbgTraceGetFileName>
 800bb08:	4601      	mov	r1, r0
 800bb0a:	f240 235f 	movw	r3, #607	; 0x25f
 800bb0e:	4a06      	ldr	r2, [pc, #24]	; (800bb28 <SVCCTL_InitCustomSvc+0x604>)
 800bb10:	4806      	ldr	r0, [pc, #24]	; (800bb2c <SVCCTL_InitCustomSvc+0x608>)
 800bb12:	f000 ff6d 	bl	800c9f0 <iprintf>
 800bb16:	7dfb      	ldrb	r3, [r7, #23]
 800bb18:	4619      	mov	r1, r3
 800bb1a:	4814      	ldr	r0, [pc, #80]	; (800bb6c <SVCCTL_InitCustomSvc+0x648>)
 800bb1c:	f000 ff68 	bl	800c9f0 <iprintf>
 800bb20:	e033      	b.n	800bb8a <SVCCTL_InitCustomSvc+0x666>
 800bb22:	bf00      	nop
 800bb24:	0800f1c4 	.word	0x0800f1c4
 800bb28:	0800fd98 	.word	0x0800fd98
 800bb2c:	0800f1e4 	.word	0x0800f1e4
 800bb30:	0800f430 	.word	0x0800f430
 800bb34:	2000016c 	.word	0x2000016c
 800bb38:	20000025 	.word	0x20000025
 800bb3c:	20000176 	.word	0x20000176
 800bb40:	0800f468 	.word	0x0800f468
 800bb44:	0800f4b4 	.word	0x0800f4b4
 800bb48:	20000178 	.word	0x20000178
 800bb4c:	0800f4ec 	.word	0x0800f4ec
 800bb50:	0800f534 	.word	0x0800f534
 800bb54:	20000026 	.word	0x20000026
 800bb58:	2000017a 	.word	0x2000017a
 800bb5c:	0800f568 	.word	0x0800f568
 800bb60:	0800f5b4 	.word	0x0800f5b4
 800bb64:	20000027 	.word	0x20000027
 800bb68:	2000017c 	.word	0x2000017c
 800bb6c:	0800f5f0 	.word	0x0800f5f0
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : CONFIGFLAGSREQ_C \n\r");
 800bb70:	4858      	ldr	r0, [pc, #352]	; (800bcd4 <SVCCTL_InitCustomSvc+0x7b0>)
 800bb72:	f7fd fd03 	bl	800957c <DbgTraceGetFileName>
 800bb76:	4601      	mov	r1, r0
 800bb78:	f240 2363 	movw	r3, #611	; 0x263
 800bb7c:	4a56      	ldr	r2, [pc, #344]	; (800bcd8 <SVCCTL_InitCustomSvc+0x7b4>)
 800bb7e:	4857      	ldr	r0, [pc, #348]	; (800bcdc <SVCCTL_InitCustomSvc+0x7b8>)
 800bb80:	f000 ff36 	bl	800c9f0 <iprintf>
 800bb84:	4856      	ldr	r0, [pc, #344]	; (800bce0 <SVCCTL_InitCustomSvc+0x7bc>)
 800bb86:	f000 ff33 	bl	800c9f0 <iprintf>
   * service_max_attribute_record = 1 for controlService +
   *                                2 for controlCharacteristic +
   *                              = 3
   */

  COPY_CONTROLSERVICE_UUID(uuid.Char_UUID_128);
 800bb8a:	2314      	movs	r3, #20
 800bb8c:	713b      	strb	r3, [r7, #4]
 800bb8e:	2312      	movs	r3, #18
 800bb90:	717b      	strb	r3, [r7, #5]
 800bb92:	238a      	movs	r3, #138	; 0x8a
 800bb94:	71bb      	strb	r3, [r7, #6]
 800bb96:	2376      	movs	r3, #118	; 0x76
 800bb98:	71fb      	strb	r3, [r7, #7]
 800bb9a:	2304      	movs	r3, #4
 800bb9c:	723b      	strb	r3, [r7, #8]
 800bb9e:	23d1      	movs	r3, #209	; 0xd1
 800bba0:	727b      	strb	r3, [r7, #9]
 800bba2:	236c      	movs	r3, #108	; 0x6c
 800bba4:	72bb      	strb	r3, [r7, #10]
 800bba6:	234f      	movs	r3, #79	; 0x4f
 800bba8:	72fb      	strb	r3, [r7, #11]
 800bbaa:	237e      	movs	r3, #126	; 0x7e
 800bbac:	733b      	strb	r3, [r7, #12]
 800bbae:	2353      	movs	r3, #83	; 0x53
 800bbb0:	737b      	strb	r3, [r7, #13]
 800bbb2:	23f2      	movs	r3, #242	; 0xf2
 800bbb4:	73bb      	strb	r3, [r7, #14]
 800bbb6:	23e8      	movs	r3, #232	; 0xe8
 800bbb8:	73fb      	strb	r3, [r7, #15]
 800bbba:	2300      	movs	r3, #0
 800bbbc:	743b      	strb	r3, [r7, #16]
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	747b      	strb	r3, [r7, #17]
 800bbc2:	23b1      	movs	r3, #177	; 0xb1
 800bbc4:	74bb      	strb	r3, [r7, #18]
 800bbc6:	2328      	movs	r3, #40	; 0x28
 800bbc8:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800bbca:	1d39      	adds	r1, r7, #4
 800bbcc:	4b45      	ldr	r3, [pc, #276]	; (800bce4 <SVCCTL_InitCustomSvc+0x7c0>)
 800bbce:	9300      	str	r3, [sp, #0]
 800bbd0:	2303      	movs	r3, #3
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	2002      	movs	r0, #2
 800bbd6:	f7fc f927 	bl	8007e28 <aci_gatt_add_service>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             3,
                             &(CustomContext.CustomControlsHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800bbde:	7dfb      	ldrb	r3, [r7, #23]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d00f      	beq.n	800bc04 <SVCCTL_InitCustomSvc+0x6e0>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: controlS, error code: 0x%x \n\r", ret);
 800bbe4:	483b      	ldr	r0, [pc, #236]	; (800bcd4 <SVCCTL_InitCustomSvc+0x7b0>)
 800bbe6:	f7fd fcc9 	bl	800957c <DbgTraceGetFileName>
 800bbea:	4601      	mov	r1, r0
 800bbec:	f240 2377 	movw	r3, #631	; 0x277
 800bbf0:	4a39      	ldr	r2, [pc, #228]	; (800bcd8 <SVCCTL_InitCustomSvc+0x7b4>)
 800bbf2:	483a      	ldr	r0, [pc, #232]	; (800bcdc <SVCCTL_InitCustomSvc+0x7b8>)
 800bbf4:	f000 fefc 	bl	800c9f0 <iprintf>
 800bbf8:	7dfb      	ldrb	r3, [r7, #23]
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	483a      	ldr	r0, [pc, #232]	; (800bce8 <SVCCTL_InitCustomSvc+0x7c4>)
 800bbfe:	f000 fef7 	bl	800c9f0 <iprintf>
 800bc02:	e00c      	b.n	800bc1e <SVCCTL_InitCustomSvc+0x6fa>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: controlS \n\r");
 800bc04:	4833      	ldr	r0, [pc, #204]	; (800bcd4 <SVCCTL_InitCustomSvc+0x7b0>)
 800bc06:	f7fd fcb9 	bl	800957c <DbgTraceGetFileName>
 800bc0a:	4601      	mov	r1, r0
 800bc0c:	f240 237b 	movw	r3, #635	; 0x27b
 800bc10:	4a31      	ldr	r2, [pc, #196]	; (800bcd8 <SVCCTL_InitCustomSvc+0x7b4>)
 800bc12:	4832      	ldr	r0, [pc, #200]	; (800bcdc <SVCCTL_InitCustomSvc+0x7b8>)
 800bc14:	f000 feec 	bl	800c9f0 <iprintf>
 800bc18:	4834      	ldr	r0, [pc, #208]	; (800bcec <SVCCTL_InitCustomSvc+0x7c8>)
 800bc1a:	f000 fee9 	bl	800c9f0 <iprintf>
  }

  /**
   *  controlCharacteristic
   */
  COPY_CONTROLCHARACTERISTIC_UUID(uuid.Char_UUID_128);
 800bc1e:	2314      	movs	r3, #20
 800bc20:	713b      	strb	r3, [r7, #4]
 800bc22:	2312      	movs	r3, #18
 800bc24:	717b      	strb	r3, [r7, #5]
 800bc26:	238a      	movs	r3, #138	; 0x8a
 800bc28:	71bb      	strb	r3, [r7, #6]
 800bc2a:	2376      	movs	r3, #118	; 0x76
 800bc2c:	71fb      	strb	r3, [r7, #7]
 800bc2e:	2304      	movs	r3, #4
 800bc30:	723b      	strb	r3, [r7, #8]
 800bc32:	23d1      	movs	r3, #209	; 0xd1
 800bc34:	727b      	strb	r3, [r7, #9]
 800bc36:	236c      	movs	r3, #108	; 0x6c
 800bc38:	72bb      	strb	r3, [r7, #10]
 800bc3a:	234f      	movs	r3, #79	; 0x4f
 800bc3c:	72fb      	strb	r3, [r7, #11]
 800bc3e:	237e      	movs	r3, #126	; 0x7e
 800bc40:	733b      	strb	r3, [r7, #12]
 800bc42:	2353      	movs	r3, #83	; 0x53
 800bc44:	737b      	strb	r3, [r7, #13]
 800bc46:	23f2      	movs	r3, #242	; 0xf2
 800bc48:	73bb      	strb	r3, [r7, #14]
 800bc4a:	23e8      	movs	r3, #232	; 0xe8
 800bc4c:	73fb      	strb	r3, [r7, #15]
 800bc4e:	2301      	movs	r3, #1
 800bc50:	743b      	strb	r3, [r7, #16]
 800bc52:	2300      	movs	r3, #0
 800bc54:	747b      	strb	r3, [r7, #17]
 800bc56:	23b1      	movs	r3, #177	; 0xb1
 800bc58:	74bb      	strb	r3, [r7, #18]
 800bc5a:	2328      	movs	r3, #40	; 0x28
 800bc5c:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomControlsHdle,
 800bc5e:	4b24      	ldr	r3, [pc, #144]	; (800bcf0 <SVCCTL_InitCustomSvc+0x7cc>)
 800bc60:	8a58      	ldrh	r0, [r3, #18]
 800bc62:	4b24      	ldr	r3, [pc, #144]	; (800bcf4 <SVCCTL_InitCustomSvc+0x7d0>)
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	1d3a      	adds	r2, r7, #4
 800bc6a:	4923      	ldr	r1, [pc, #140]	; (800bcf8 <SVCCTL_InitCustomSvc+0x7d4>)
 800bc6c:	9105      	str	r1, [sp, #20]
 800bc6e:	2101      	movs	r1, #1
 800bc70:	9104      	str	r1, [sp, #16]
 800bc72:	2110      	movs	r1, #16
 800bc74:	9103      	str	r1, [sp, #12]
 800bc76:	2101      	movs	r1, #1
 800bc78:	9102      	str	r1, [sp, #8]
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	9101      	str	r1, [sp, #4]
 800bc7e:	2108      	movs	r1, #8
 800bc80:	9100      	str	r1, [sp, #0]
 800bc82:	2102      	movs	r1, #2
 800bc84:	f7fc f9a6 	bl	8007fd4 <aci_gatt_add_char>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomControl_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800bc8c:	7dfb      	ldrb	r3, [r7, #23]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00f      	beq.n	800bcb2 <SVCCTL_InitCustomSvc+0x78e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : CONTROL_C, error code: 0x%x \n\r", ret);
 800bc92:	4810      	ldr	r0, [pc, #64]	; (800bcd4 <SVCCTL_InitCustomSvc+0x7b0>)
 800bc94:	f7fd fc72 	bl	800957c <DbgTraceGetFileName>
 800bc98:	4601      	mov	r1, r0
 800bc9a:	f240 238d 	movw	r3, #653	; 0x28d
 800bc9e:	4a0e      	ldr	r2, [pc, #56]	; (800bcd8 <SVCCTL_InitCustomSvc+0x7b4>)
 800bca0:	480e      	ldr	r0, [pc, #56]	; (800bcdc <SVCCTL_InitCustomSvc+0x7b8>)
 800bca2:	f000 fea5 	bl	800c9f0 <iprintf>
 800bca6:	7dfb      	ldrb	r3, [r7, #23]
 800bca8:	4619      	mov	r1, r3
 800bcaa:	4814      	ldr	r0, [pc, #80]	; (800bcfc <SVCCTL_InitCustomSvc+0x7d8>)
 800bcac:	f000 fea0 	bl	800c9f0 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800bcb0:	e00d      	b.n	800bcce <SVCCTL_InitCustomSvc+0x7aa>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : CONTROL_C \n\r");
 800bcb2:	4808      	ldr	r0, [pc, #32]	; (800bcd4 <SVCCTL_InitCustomSvc+0x7b0>)
 800bcb4:	f7fd fc62 	bl	800957c <DbgTraceGetFileName>
 800bcb8:	4601      	mov	r1, r0
 800bcba:	f240 2391 	movw	r3, #657	; 0x291
 800bcbe:	4a06      	ldr	r2, [pc, #24]	; (800bcd8 <SVCCTL_InitCustomSvc+0x7b4>)
 800bcc0:	4806      	ldr	r0, [pc, #24]	; (800bcdc <SVCCTL_InitCustomSvc+0x7b8>)
 800bcc2:	f000 fe95 	bl	800c9f0 <iprintf>
 800bcc6:	480e      	ldr	r0, [pc, #56]	; (800bd00 <SVCCTL_InitCustomSvc+0x7dc>)
 800bcc8:	f000 fe92 	bl	800c9f0 <iprintf>
  return;
 800bccc:	bf00      	nop
}
 800bcce:	3718      	adds	r7, #24
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	0800f1c4 	.word	0x0800f1c4
 800bcd8:	0800fd98 	.word	0x0800fd98
 800bcdc:	0800f1e4 	.word	0x0800f1e4
 800bce0:	0800f640 	.word	0x0800f640
 800bce4:	2000017e 	.word	0x2000017e
 800bce8:	0800f680 	.word	0x0800f680
 800bcec:	0800f6c8 	.word	0x0800f6c8
 800bcf0:	2000016c 	.word	0x2000016c
 800bcf4:	20000028 	.word	0x20000028
 800bcf8:	20000180 	.word	0x20000180
 800bcfc:	0800f700 	.word	0x0800f700
 800bd00:	0800f748 	.word	0x0800f748

0800bd04 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b086      	sub	sp, #24
 800bd08:	af02      	add	r7, sp, #8
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	6039      	str	r1, [r7, #0]
 800bd0e:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bd10:	2392      	movs	r3, #146	; 0x92
 800bd12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800bd14:	79fb      	ldrb	r3, [r7, #7]
 800bd16:	2b05      	cmp	r3, #5
 800bd18:	f200 812a 	bhi.w	800bf70 <Custom_STM_App_Update_Char+0x26c>
 800bd1c:	a201      	add	r2, pc, #4	; (adr r2, 800bd24 <Custom_STM_App_Update_Char+0x20>)
 800bd1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd22:	bf00      	nop
 800bd24:	0800bd3d 	.word	0x0800bd3d
 800bd28:	0800bd9b 	.word	0x0800bd9b
 800bd2c:	0800bdf9 	.word	0x0800bdf9
 800bd30:	0800be57 	.word	0x0800be57
 800bd34:	0800beb5 	.word	0x0800beb5
 800bd38:	0800bf13 	.word	0x0800bf13
  {

    case CUSTOM_STM_SWITCH_C:
      ret = aci_gatt_update_char_value(CustomContext.CustomLedsHdle,
 800bd3c:	4b8f      	ldr	r3, [pc, #572]	; (800bf7c <Custom_STM_App_Update_Char+0x278>)
 800bd3e:	8818      	ldrh	r0, [r3, #0]
 800bd40:	4b8e      	ldr	r3, [pc, #568]	; (800bf7c <Custom_STM_App_Update_Char+0x278>)
 800bd42:	8859      	ldrh	r1, [r3, #2]
 800bd44:	4b8e      	ldr	r3, [pc, #568]	; (800bf80 <Custom_STM_App_Update_Char+0x27c>)
 800bd46:	781a      	ldrb	r2, [r3, #0]
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	9300      	str	r3, [sp, #0]
 800bd4c:	4613      	mov	r3, r2
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f7fc fa48 	bl	80081e4 <aci_gatt_update_char_value>
 800bd54:	4603      	mov	r3, r0
 800bd56:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomSwitch_CHdle,
                                       0, /* charValOffset */
                                       SizeSwitch_C, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800bd58:	7bfb      	ldrb	r3, [r7, #15]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d00f      	beq.n	800bd7e <Custom_STM_App_Update_Char+0x7a>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value SWITCH_C command, result : 0x%x \n\r", ret);
 800bd5e:	4889      	ldr	r0, [pc, #548]	; (800bf84 <Custom_STM_App_Update_Char+0x280>)
 800bd60:	f7fd fc0c 	bl	800957c <DbgTraceGetFileName>
 800bd64:	4601      	mov	r1, r0
 800bd66:	f240 23b3 	movw	r3, #691	; 0x2b3
 800bd6a:	4a87      	ldr	r2, [pc, #540]	; (800bf88 <Custom_STM_App_Update_Char+0x284>)
 800bd6c:	4887      	ldr	r0, [pc, #540]	; (800bf8c <Custom_STM_App_Update_Char+0x288>)
 800bd6e:	f000 fe3f 	bl	800c9f0 <iprintf>
 800bd72:	7bfb      	ldrb	r3, [r7, #15]
 800bd74:	4619      	mov	r1, r3
 800bd76:	4886      	ldr	r0, [pc, #536]	; (800bf90 <Custom_STM_App_Update_Char+0x28c>)
 800bd78:	f000 fe3a 	bl	800c9f0 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value SWITCH_C command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 800bd7c:	e0f9      	b.n	800bf72 <Custom_STM_App_Update_Char+0x26e>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value SWITCH_C command\n\r");
 800bd7e:	4881      	ldr	r0, [pc, #516]	; (800bf84 <Custom_STM_App_Update_Char+0x280>)
 800bd80:	f7fd fbfc 	bl	800957c <DbgTraceGetFileName>
 800bd84:	4601      	mov	r1, r0
 800bd86:	f240 23b7 	movw	r3, #695	; 0x2b7
 800bd8a:	4a7f      	ldr	r2, [pc, #508]	; (800bf88 <Custom_STM_App_Update_Char+0x284>)
 800bd8c:	487f      	ldr	r0, [pc, #508]	; (800bf8c <Custom_STM_App_Update_Char+0x288>)
 800bd8e:	f000 fe2f 	bl	800c9f0 <iprintf>
 800bd92:	4880      	ldr	r0, [pc, #512]	; (800bf94 <Custom_STM_App_Update_Char+0x290>)
 800bd94:	f000 fe2c 	bl	800c9f0 <iprintf>
      break;
 800bd98:	e0eb      	b.n	800bf72 <Custom_STM_App_Update_Char+0x26e>

    case CUSTOM_STM_ANGLE_C:
      ret = aci_gatt_update_char_value(CustomContext.CustomAnglesHdle,
 800bd9a:	4b78      	ldr	r3, [pc, #480]	; (800bf7c <Custom_STM_App_Update_Char+0x278>)
 800bd9c:	8898      	ldrh	r0, [r3, #4]
 800bd9e:	4b77      	ldr	r3, [pc, #476]	; (800bf7c <Custom_STM_App_Update_Char+0x278>)
 800bda0:	88d9      	ldrh	r1, [r3, #6]
 800bda2:	4b7d      	ldr	r3, [pc, #500]	; (800bf98 <Custom_STM_App_Update_Char+0x294>)
 800bda4:	781a      	ldrb	r2, [r3, #0]
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	9300      	str	r3, [sp, #0]
 800bdaa:	4613      	mov	r3, r2
 800bdac:	2200      	movs	r2, #0
 800bdae:	f7fc fa19 	bl	80081e4 <aci_gatt_update_char_value>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomAngle_CHdle,
                                       0, /* charValOffset */
                                       SizeAngle_C, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800bdb6:	7bfb      	ldrb	r3, [r7, #15]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d00f      	beq.n	800bddc <Custom_STM_App_Update_Char+0xd8>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ANGLE_C command, result : 0x%x \n\r", ret);
 800bdbc:	4871      	ldr	r0, [pc, #452]	; (800bf84 <Custom_STM_App_Update_Char+0x280>)
 800bdbe:	f7fd fbdd 	bl	800957c <DbgTraceGetFileName>
 800bdc2:	4601      	mov	r1, r0
 800bdc4:	f240 23c6 	movw	r3, #710	; 0x2c6
 800bdc8:	4a6f      	ldr	r2, [pc, #444]	; (800bf88 <Custom_STM_App_Update_Char+0x284>)
 800bdca:	4870      	ldr	r0, [pc, #448]	; (800bf8c <Custom_STM_App_Update_Char+0x288>)
 800bdcc:	f000 fe10 	bl	800c9f0 <iprintf>
 800bdd0:	7bfb      	ldrb	r3, [r7, #15]
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	4871      	ldr	r0, [pc, #452]	; (800bf9c <Custom_STM_App_Update_Char+0x298>)
 800bdd6:	f000 fe0b 	bl	800c9f0 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ANGLE_C command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_1*/
      break;
 800bdda:	e0ca      	b.n	800bf72 <Custom_STM_App_Update_Char+0x26e>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ANGLE_C command\n\r");
 800bddc:	4869      	ldr	r0, [pc, #420]	; (800bf84 <Custom_STM_App_Update_Char+0x280>)
 800bdde:	f7fd fbcd 	bl	800957c <DbgTraceGetFileName>
 800bde2:	4601      	mov	r1, r0
 800bde4:	f240 23ca 	movw	r3, #714	; 0x2ca
 800bde8:	4a67      	ldr	r2, [pc, #412]	; (800bf88 <Custom_STM_App_Update_Char+0x284>)
 800bdea:	4868      	ldr	r0, [pc, #416]	; (800bf8c <Custom_STM_App_Update_Char+0x288>)
 800bdec:	f000 fe00 	bl	800c9f0 <iprintf>
 800bdf0:	486b      	ldr	r0, [pc, #428]	; (800bfa0 <Custom_STM_App_Update_Char+0x29c>)
 800bdf2:	f000 fdfd 	bl	800c9f0 <iprintf>
      break;
 800bdf6:	e0bc      	b.n	800bf72 <Custom_STM_App_Update_Char+0x26e>

    case CUSTOM_STM_LIVEDATA_C:
      ret = aci_gatt_update_char_value(CustomContext.CustomLivedatasHdle,
 800bdf8:	4b60      	ldr	r3, [pc, #384]	; (800bf7c <Custom_STM_App_Update_Char+0x278>)
 800bdfa:	8918      	ldrh	r0, [r3, #8]
 800bdfc:	4b5f      	ldr	r3, [pc, #380]	; (800bf7c <Custom_STM_App_Update_Char+0x278>)
 800bdfe:	8959      	ldrh	r1, [r3, #10]
 800be00:	4b68      	ldr	r3, [pc, #416]	; (800bfa4 <Custom_STM_App_Update_Char+0x2a0>)
 800be02:	781a      	ldrb	r2, [r3, #0]
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	9300      	str	r3, [sp, #0]
 800be08:	4613      	mov	r3, r2
 800be0a:	2200      	movs	r2, #0
 800be0c:	f7fc f9ea 	bl	80081e4 <aci_gatt_update_char_value>
 800be10:	4603      	mov	r3, r0
 800be12:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomLivedata_CHdle,
                                       0, /* charValOffset */
                                       SizeLivedata_C, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800be14:	7bfb      	ldrb	r3, [r7, #15]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d00f      	beq.n	800be3a <Custom_STM_App_Update_Char+0x136>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value LIVEDATA_C command, result : 0x%x \n\r", ret);
 800be1a:	485a      	ldr	r0, [pc, #360]	; (800bf84 <Custom_STM_App_Update_Char+0x280>)
 800be1c:	f7fd fbae 	bl	800957c <DbgTraceGetFileName>
 800be20:	4601      	mov	r1, r0
 800be22:	f240 23d9 	movw	r3, #729	; 0x2d9
 800be26:	4a58      	ldr	r2, [pc, #352]	; (800bf88 <Custom_STM_App_Update_Char+0x284>)
 800be28:	4858      	ldr	r0, [pc, #352]	; (800bf8c <Custom_STM_App_Update_Char+0x288>)
 800be2a:	f000 fde1 	bl	800c9f0 <iprintf>
 800be2e:	7bfb      	ldrb	r3, [r7, #15]
 800be30:	4619      	mov	r1, r3
 800be32:	485d      	ldr	r0, [pc, #372]	; (800bfa8 <Custom_STM_App_Update_Char+0x2a4>)
 800be34:	f000 fddc 	bl	800c9f0 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value LIVEDATA_C command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_3_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_3_Char_1*/
      break;
 800be38:	e09b      	b.n	800bf72 <Custom_STM_App_Update_Char+0x26e>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value LIVEDATA_C command\n\r");
 800be3a:	4852      	ldr	r0, [pc, #328]	; (800bf84 <Custom_STM_App_Update_Char+0x280>)
 800be3c:	f7fd fb9e 	bl	800957c <DbgTraceGetFileName>
 800be40:	4601      	mov	r1, r0
 800be42:	f240 23dd 	movw	r3, #733	; 0x2dd
 800be46:	4a50      	ldr	r2, [pc, #320]	; (800bf88 <Custom_STM_App_Update_Char+0x284>)
 800be48:	4850      	ldr	r0, [pc, #320]	; (800bf8c <Custom_STM_App_Update_Char+0x288>)
 800be4a:	f000 fdd1 	bl	800c9f0 <iprintf>
 800be4e:	4857      	ldr	r0, [pc, #348]	; (800bfac <Custom_STM_App_Update_Char+0x2a8>)
 800be50:	f000 fdce 	bl	800c9f0 <iprintf>
      break;
 800be54:	e08d      	b.n	800bf72 <Custom_STM_App_Update_Char+0x26e>

    case CUSTOM_STM_CONFIGFLAGS_C:
      ret = aci_gatt_update_char_value(CustomContext.CustomConfigsHdle,
 800be56:	4b49      	ldr	r3, [pc, #292]	; (800bf7c <Custom_STM_App_Update_Char+0x278>)
 800be58:	8998      	ldrh	r0, [r3, #12]
 800be5a:	4b48      	ldr	r3, [pc, #288]	; (800bf7c <Custom_STM_App_Update_Char+0x278>)
 800be5c:	89d9      	ldrh	r1, [r3, #14]
 800be5e:	4b54      	ldr	r3, [pc, #336]	; (800bfb0 <Custom_STM_App_Update_Char+0x2ac>)
 800be60:	781a      	ldrb	r2, [r3, #0]
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	9300      	str	r3, [sp, #0]
 800be66:	4613      	mov	r3, r2
 800be68:	2200      	movs	r2, #0
 800be6a:	f7fc f9bb 	bl	80081e4 <aci_gatt_update_char_value>
 800be6e:	4603      	mov	r3, r0
 800be70:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomConfigflags_CHdle,
                                       0, /* charValOffset */
                                       SizeConfigflags_C, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800be72:	7bfb      	ldrb	r3, [r7, #15]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d00f      	beq.n	800be98 <Custom_STM_App_Update_Char+0x194>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value CONFIGFLAGS_C command, result : 0x%x \n\r", ret);
 800be78:	4842      	ldr	r0, [pc, #264]	; (800bf84 <Custom_STM_App_Update_Char+0x280>)
 800be7a:	f7fd fb7f 	bl	800957c <DbgTraceGetFileName>
 800be7e:	4601      	mov	r1, r0
 800be80:	f44f 733b 	mov.w	r3, #748	; 0x2ec
 800be84:	4a40      	ldr	r2, [pc, #256]	; (800bf88 <Custom_STM_App_Update_Char+0x284>)
 800be86:	4841      	ldr	r0, [pc, #260]	; (800bf8c <Custom_STM_App_Update_Char+0x288>)
 800be88:	f000 fdb2 	bl	800c9f0 <iprintf>
 800be8c:	7bfb      	ldrb	r3, [r7, #15]
 800be8e:	4619      	mov	r1, r3
 800be90:	4848      	ldr	r0, [pc, #288]	; (800bfb4 <Custom_STM_App_Update_Char+0x2b0>)
 800be92:	f000 fdad 	bl	800c9f0 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value CONFIGFLAGS_C command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_4_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_4_Char_1*/
      break;
 800be96:	e06c      	b.n	800bf72 <Custom_STM_App_Update_Char+0x26e>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value CONFIGFLAGS_C command\n\r");
 800be98:	483a      	ldr	r0, [pc, #232]	; (800bf84 <Custom_STM_App_Update_Char+0x280>)
 800be9a:	f7fd fb6f 	bl	800957c <DbgTraceGetFileName>
 800be9e:	4601      	mov	r1, r0
 800bea0:	f44f 733c 	mov.w	r3, #752	; 0x2f0
 800bea4:	4a38      	ldr	r2, [pc, #224]	; (800bf88 <Custom_STM_App_Update_Char+0x284>)
 800bea6:	4839      	ldr	r0, [pc, #228]	; (800bf8c <Custom_STM_App_Update_Char+0x288>)
 800bea8:	f000 fda2 	bl	800c9f0 <iprintf>
 800beac:	4842      	ldr	r0, [pc, #264]	; (800bfb8 <Custom_STM_App_Update_Char+0x2b4>)
 800beae:	f000 fd9f 	bl	800c9f0 <iprintf>
      break;
 800beb2:	e05e      	b.n	800bf72 <Custom_STM_App_Update_Char+0x26e>

    case CUSTOM_STM_CONFIGFLAGSREQ_C:
      ret = aci_gatt_update_char_value(CustomContext.CustomConfigsHdle,
 800beb4:	4b31      	ldr	r3, [pc, #196]	; (800bf7c <Custom_STM_App_Update_Char+0x278>)
 800beb6:	8998      	ldrh	r0, [r3, #12]
 800beb8:	4b30      	ldr	r3, [pc, #192]	; (800bf7c <Custom_STM_App_Update_Char+0x278>)
 800beba:	8a19      	ldrh	r1, [r3, #16]
 800bebc:	4b3f      	ldr	r3, [pc, #252]	; (800bfbc <Custom_STM_App_Update_Char+0x2b8>)
 800bebe:	781a      	ldrb	r2, [r3, #0]
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	9300      	str	r3, [sp, #0]
 800bec4:	4613      	mov	r3, r2
 800bec6:	2200      	movs	r2, #0
 800bec8:	f7fc f98c 	bl	80081e4 <aci_gatt_update_char_value>
 800becc:	4603      	mov	r3, r0
 800bece:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomConfigflagsreq_CHdle,
                                       0, /* charValOffset */
                                       SizeConfigflagsreq_C, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800bed0:	7bfb      	ldrb	r3, [r7, #15]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d00f      	beq.n	800bef6 <Custom_STM_App_Update_Char+0x1f2>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value CONFIGFLAGSREQ_C command, result : 0x%x \n\r", ret);
 800bed6:	482b      	ldr	r0, [pc, #172]	; (800bf84 <Custom_STM_App_Update_Char+0x280>)
 800bed8:	f7fd fb50 	bl	800957c <DbgTraceGetFileName>
 800bedc:	4601      	mov	r1, r0
 800bede:	f240 23ff 	movw	r3, #767	; 0x2ff
 800bee2:	4a29      	ldr	r2, [pc, #164]	; (800bf88 <Custom_STM_App_Update_Char+0x284>)
 800bee4:	4829      	ldr	r0, [pc, #164]	; (800bf8c <Custom_STM_App_Update_Char+0x288>)
 800bee6:	f000 fd83 	bl	800c9f0 <iprintf>
 800beea:	7bfb      	ldrb	r3, [r7, #15]
 800beec:	4619      	mov	r1, r3
 800beee:	4834      	ldr	r0, [pc, #208]	; (800bfc0 <Custom_STM_App_Update_Char+0x2bc>)
 800bef0:	f000 fd7e 	bl	800c9f0 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value CONFIGFLAGSREQ_C command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_4_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_4_Char_2*/
      break;
 800bef4:	e03d      	b.n	800bf72 <Custom_STM_App_Update_Char+0x26e>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value CONFIGFLAGSREQ_C command\n\r");
 800bef6:	4823      	ldr	r0, [pc, #140]	; (800bf84 <Custom_STM_App_Update_Char+0x280>)
 800bef8:	f7fd fb40 	bl	800957c <DbgTraceGetFileName>
 800befc:	4601      	mov	r1, r0
 800befe:	f240 3303 	movw	r3, #771	; 0x303
 800bf02:	4a21      	ldr	r2, [pc, #132]	; (800bf88 <Custom_STM_App_Update_Char+0x284>)
 800bf04:	4821      	ldr	r0, [pc, #132]	; (800bf8c <Custom_STM_App_Update_Char+0x288>)
 800bf06:	f000 fd73 	bl	800c9f0 <iprintf>
 800bf0a:	482e      	ldr	r0, [pc, #184]	; (800bfc4 <Custom_STM_App_Update_Char+0x2c0>)
 800bf0c:	f000 fd70 	bl	800c9f0 <iprintf>
      break;
 800bf10:	e02f      	b.n	800bf72 <Custom_STM_App_Update_Char+0x26e>

    case CUSTOM_STM_CONTROL_C:
      ret = aci_gatt_update_char_value(CustomContext.CustomControlsHdle,
 800bf12:	4b1a      	ldr	r3, [pc, #104]	; (800bf7c <Custom_STM_App_Update_Char+0x278>)
 800bf14:	8a58      	ldrh	r0, [r3, #18]
 800bf16:	4b19      	ldr	r3, [pc, #100]	; (800bf7c <Custom_STM_App_Update_Char+0x278>)
 800bf18:	8a99      	ldrh	r1, [r3, #20]
 800bf1a:	4b2b      	ldr	r3, [pc, #172]	; (800bfc8 <Custom_STM_App_Update_Char+0x2c4>)
 800bf1c:	781a      	ldrb	r2, [r3, #0]
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	9300      	str	r3, [sp, #0]
 800bf22:	4613      	mov	r3, r2
 800bf24:	2200      	movs	r2, #0
 800bf26:	f7fc f95d 	bl	80081e4 <aci_gatt_update_char_value>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomControl_CHdle,
                                       0, /* charValOffset */
                                       SizeControl_C, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800bf2e:	7bfb      	ldrb	r3, [r7, #15]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d00f      	beq.n	800bf54 <Custom_STM_App_Update_Char+0x250>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value CONTROL_C command, result : 0x%x \n\r", ret);
 800bf34:	4813      	ldr	r0, [pc, #76]	; (800bf84 <Custom_STM_App_Update_Char+0x280>)
 800bf36:	f7fd fb21 	bl	800957c <DbgTraceGetFileName>
 800bf3a:	4601      	mov	r1, r0
 800bf3c:	f240 3312 	movw	r3, #786	; 0x312
 800bf40:	4a11      	ldr	r2, [pc, #68]	; (800bf88 <Custom_STM_App_Update_Char+0x284>)
 800bf42:	4812      	ldr	r0, [pc, #72]	; (800bf8c <Custom_STM_App_Update_Char+0x288>)
 800bf44:	f000 fd54 	bl	800c9f0 <iprintf>
 800bf48:	7bfb      	ldrb	r3, [r7, #15]
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	481f      	ldr	r0, [pc, #124]	; (800bfcc <Custom_STM_App_Update_Char+0x2c8>)
 800bf4e:	f000 fd4f 	bl	800c9f0 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value CONTROL_C command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_5_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_5_Char_1*/
      break;
 800bf52:	e00e      	b.n	800bf72 <Custom_STM_App_Update_Char+0x26e>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value CONTROL_C command\n\r");
 800bf54:	480b      	ldr	r0, [pc, #44]	; (800bf84 <Custom_STM_App_Update_Char+0x280>)
 800bf56:	f7fd fb11 	bl	800957c <DbgTraceGetFileName>
 800bf5a:	4601      	mov	r1, r0
 800bf5c:	f240 3316 	movw	r3, #790	; 0x316
 800bf60:	4a09      	ldr	r2, [pc, #36]	; (800bf88 <Custom_STM_App_Update_Char+0x284>)
 800bf62:	480a      	ldr	r0, [pc, #40]	; (800bf8c <Custom_STM_App_Update_Char+0x288>)
 800bf64:	f000 fd44 	bl	800c9f0 <iprintf>
 800bf68:	4819      	ldr	r0, [pc, #100]	; (800bfd0 <Custom_STM_App_Update_Char+0x2cc>)
 800bf6a:	f000 fd41 	bl	800c9f0 <iprintf>
      break;
 800bf6e:	e000      	b.n	800bf72 <Custom_STM_App_Update_Char+0x26e>

    default:
      break;
 800bf70:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800bf72:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3710      	adds	r7, #16
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}
 800bf7c:	2000016c 	.word	0x2000016c
 800bf80:	20000023 	.word	0x20000023
 800bf84:	0800f1c4 	.word	0x0800f1c4
 800bf88:	0800fdb0 	.word	0x0800fdb0
 800bf8c:	0800f1e4 	.word	0x0800f1e4
 800bf90:	0800f780 	.word	0x0800f780
 800bf94:	0800f7cc 	.word	0x0800f7cc
 800bf98:	20000024 	.word	0x20000024
 800bf9c:	0800f808 	.word	0x0800f808
 800bfa0:	0800f850 	.word	0x0800f850
 800bfa4:	20000025 	.word	0x20000025
 800bfa8:	0800f888 	.word	0x0800f888
 800bfac:	0800f8d4 	.word	0x0800f8d4
 800bfb0:	20000026 	.word	0x20000026
 800bfb4:	0800f910 	.word	0x0800f910
 800bfb8:	0800f960 	.word	0x0800f960
 800bfbc:	20000027 	.word	0x20000027
 800bfc0:	0800f9a0 	.word	0x0800f9a0
 800bfc4:	0800f9f4 	.word	0x0800f9f4
 800bfc8:	20000028 	.word	0x20000028
 800bfcc:	0800fa38 	.word	0x0800fa38
 800bfd0:	0800fa84 	.word	0x0800fa84

0800bfd4 <LL_PWR_EnableBootC2>:
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800bfd8:	4b05      	ldr	r3, [pc, #20]	; (800bff0 <LL_PWR_EnableBootC2+0x1c>)
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	4a04      	ldr	r2, [pc, #16]	; (800bff0 <LL_PWR_EnableBootC2+0x1c>)
 800bfde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bfe2:	60d3      	str	r3, [r2, #12]
}
 800bfe4:	bf00      	nop
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop
 800bff0:	58000400 	.word	0x58000400

0800bff4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800bff4:	b480      	push	{r7}
 800bff6:	b083      	sub	sp, #12
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800bffc:	4b06      	ldr	r3, [pc, #24]	; (800c018 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800bffe:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800c002:	4905      	ldr	r1, [pc, #20]	; (800c018 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	4313      	orrs	r3, r2
 800c008:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800c00c:	bf00      	nop
 800c00e:	370c      	adds	r7, #12
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr
 800c018:	58000800 	.word	0x58000800

0800c01c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b083      	sub	sp, #12
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800c024:	4b05      	ldr	r3, [pc, #20]	; (800c03c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c026:	6a1a      	ldr	r2, [r3, #32]
 800c028:	4904      	ldr	r1, [pc, #16]	; (800c03c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	4313      	orrs	r3, r2
 800c02e:	620b      	str	r3, [r1, #32]
}
 800c030:	bf00      	nop
 800c032:	370c      	adds	r7, #12
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr
 800c03c:	58000800 	.word	0x58000800

0800c040 <LL_AHB3_GRP1_EnableClock>:
{
 800c040:	b480      	push	{r7}
 800c042:	b085      	sub	sp, #20
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800c048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c04c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c04e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	4313      	orrs	r3, r2
 800c056:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800c058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c05c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	4013      	ands	r3, r2
 800c062:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c064:	68fb      	ldr	r3, [r7, #12]
}
 800c066:	bf00      	nop
 800c068:	3714      	adds	r7, #20
 800c06a:	46bd      	mov	sp, r7
 800c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c070:	4770      	bx	lr

0800c072 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800c072:	b480      	push	{r7}
 800c074:	b085      	sub	sp, #20
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800c07a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c07e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800c082:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	4313      	orrs	r3, r2
 800c08a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800c08e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c092:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	4013      	ands	r3, r2
 800c09a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c09c:	68fb      	ldr	r3, [r7, #12]
}
 800c09e:	bf00      	nop
 800c0a0:	3714      	adds	r7, #20
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a8:	4770      	bx	lr

0800c0aa <LL_C1_IPCC_EnableIT_TXF>:
{
 800c0aa:	b480      	push	{r7}
 800c0ac:	b083      	sub	sp, #12
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	601a      	str	r2, [r3, #0]
}
 800c0be:	bf00      	nop
 800c0c0:	370c      	adds	r7, #12
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr

0800c0ca <LL_C1_IPCC_EnableIT_RXO>:
{
 800c0ca:	b480      	push	{r7}
 800c0cc:	b083      	sub	sp, #12
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f043 0201 	orr.w	r2, r3, #1
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	601a      	str	r2, [r3, #0]
}
 800c0de:	bf00      	nop
 800c0e0:	370c      	adds	r7, #12
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr

0800c0ea <LL_C1_IPCC_EnableTransmitChannel>:
{
 800c0ea:	b480      	push	{r7}
 800c0ec:	b083      	sub	sp, #12
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
 800c0f2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	685a      	ldr	r2, [r3, #4]
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	041b      	lsls	r3, r3, #16
 800c0fc:	43db      	mvns	r3, r3
 800c0fe:	401a      	ands	r2, r3
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	605a      	str	r2, [r3, #4]
}
 800c104:	bf00      	nop
 800c106:	370c      	adds	r7, #12
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr

0800c110 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800c110:	b480      	push	{r7}
 800c112:	b083      	sub	sp, #12
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	685a      	ldr	r2, [r3, #4]
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	041b      	lsls	r3, r3, #16
 800c122:	431a      	orrs	r2, r3
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	605a      	str	r2, [r3, #4]
}
 800c128:	bf00      	nop
 800c12a:	370c      	adds	r7, #12
 800c12c:	46bd      	mov	sp, r7
 800c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c132:	4770      	bx	lr

0800c134 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800c134:	b480      	push	{r7}
 800c136:	b083      	sub	sp, #12
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	685a      	ldr	r2, [r3, #4]
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	43db      	mvns	r3, r3
 800c146:	401a      	ands	r2, r3
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	605a      	str	r2, [r3, #4]
}
 800c14c:	bf00      	nop
 800c14e:	370c      	adds	r7, #12
 800c150:	46bd      	mov	sp, r7
 800c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c156:	4770      	bx	lr

0800c158 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800c158:	b480      	push	{r7}
 800c15a:	b083      	sub	sp, #12
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	683a      	ldr	r2, [r7, #0]
 800c166:	609a      	str	r2, [r3, #8]
}
 800c168:	bf00      	nop
 800c16a:	370c      	adds	r7, #12
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr

0800c174 <LL_C1_IPCC_SetFlag_CHx>:
{
 800c174:	b480      	push	{r7}
 800c176:	b083      	sub	sp, #12
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	041a      	lsls	r2, r3, #16
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	609a      	str	r2, [r3, #8]
}
 800c186:	bf00      	nop
 800c188:	370c      	adds	r7, #12
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr

0800c192 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800c192:	b480      	push	{r7}
 800c194:	b083      	sub	sp, #12
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
 800c19a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	68da      	ldr	r2, [r3, #12]
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	4013      	ands	r3, r2
 800c1a4:	683a      	ldr	r2, [r7, #0]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d101      	bne.n	800c1ae <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	e000      	b.n	800c1b0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800c1ae:	2300      	movs	r3, #0
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	370c      	adds	r7, #12
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr

0800c1bc <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	69da      	ldr	r2, [r3, #28]
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	4013      	ands	r3, r2
 800c1ce:	683a      	ldr	r2, [r7, #0]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d101      	bne.n	800c1d8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	e000      	b.n	800c1da <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800c1d8:	2300      	movs	r3, #0
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	370c      	adds	r7, #12
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr
	...

0800c1e8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800c1ec:	2102      	movs	r1, #2
 800c1ee:	4819      	ldr	r0, [pc, #100]	; (800c254 <HW_IPCC_Rx_Handler+0x6c>)
 800c1f0:	f7ff ffe4 	bl	800c1bc <LL_C2_IPCC_IsActiveFlag_CHx>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d009      	beq.n	800c20e <HW_IPCC_Rx_Handler+0x26>
 800c1fa:	4b16      	ldr	r3, [pc, #88]	; (800c254 <HW_IPCC_Rx_Handler+0x6c>)
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	43db      	mvns	r3, r3
 800c200:	f003 0302 	and.w	r3, r3, #2
 800c204:	2b00      	cmp	r3, #0
 800c206:	d002      	beq.n	800c20e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800c208:	f000 f8da 	bl	800c3c0 <HW_IPCC_SYS_EvtHandler>
 800c20c:	e01f      	b.n	800c24e <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800c20e:	2101      	movs	r1, #1
 800c210:	4810      	ldr	r0, [pc, #64]	; (800c254 <HW_IPCC_Rx_Handler+0x6c>)
 800c212:	f7ff ffd3 	bl	800c1bc <LL_C2_IPCC_IsActiveFlag_CHx>
 800c216:	4603      	mov	r3, r0
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d008      	beq.n	800c22e <HW_IPCC_Rx_Handler+0x46>
 800c21c:	4b0d      	ldr	r3, [pc, #52]	; (800c254 <HW_IPCC_Rx_Handler+0x6c>)
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	f003 0301 	and.w	r3, r3, #1
 800c224:	2b00      	cmp	r3, #0
 800c226:	d102      	bne.n	800c22e <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800c228:	f000 f88e 	bl	800c348 <HW_IPCC_BLE_EvtHandler>
 800c22c:	e00f      	b.n	800c24e <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800c22e:	2108      	movs	r1, #8
 800c230:	4808      	ldr	r0, [pc, #32]	; (800c254 <HW_IPCC_Rx_Handler+0x6c>)
 800c232:	f7ff ffc3 	bl	800c1bc <LL_C2_IPCC_IsActiveFlag_CHx>
 800c236:	4603      	mov	r3, r0
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d009      	beq.n	800c250 <HW_IPCC_Rx_Handler+0x68>
 800c23c:	4b05      	ldr	r3, [pc, #20]	; (800c254 <HW_IPCC_Rx_Handler+0x6c>)
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	43db      	mvns	r3, r3
 800c242:	f003 0308 	and.w	r3, r3, #8
 800c246:	2b00      	cmp	r3, #0
 800c248:	d002      	beq.n	800c250 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800c24a:	f000 f905 	bl	800c458 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800c24e:	bf00      	nop
 800c250:	bf00      	nop
}
 800c252:	bd80      	pop	{r7, pc}
 800c254:	58000c00 	.word	0x58000c00

0800c258 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800c25c:	2102      	movs	r1, #2
 800c25e:	481a      	ldr	r0, [pc, #104]	; (800c2c8 <HW_IPCC_Tx_Handler+0x70>)
 800c260:	f7ff ff97 	bl	800c192 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c264:	4603      	mov	r3, r0
 800c266:	2b00      	cmp	r3, #0
 800c268:	d109      	bne.n	800c27e <HW_IPCC_Tx_Handler+0x26>
 800c26a:	4b17      	ldr	r3, [pc, #92]	; (800c2c8 <HW_IPCC_Tx_Handler+0x70>)
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	43db      	mvns	r3, r3
 800c270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c274:	2b00      	cmp	r3, #0
 800c276:	d002      	beq.n	800c27e <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800c278:	f000 f896 	bl	800c3a8 <HW_IPCC_SYS_CmdEvtHandler>
 800c27c:	e020      	b.n	800c2c0 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800c27e:	2108      	movs	r1, #8
 800c280:	4811      	ldr	r0, [pc, #68]	; (800c2c8 <HW_IPCC_Tx_Handler+0x70>)
 800c282:	f7ff ff86 	bl	800c192 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c286:	4603      	mov	r3, r0
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d109      	bne.n	800c2a0 <HW_IPCC_Tx_Handler+0x48>
 800c28c:	4b0e      	ldr	r3, [pc, #56]	; (800c2c8 <HW_IPCC_Tx_Handler+0x70>)
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	43db      	mvns	r3, r3
 800c292:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c296:	2b00      	cmp	r3, #0
 800c298:	d002      	beq.n	800c2a0 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 800c29a:	f000 f8bf 	bl	800c41c <HW_IPCC_MM_FreeBufHandler>
 800c29e:	e00f      	b.n	800c2c0 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800c2a0:	2120      	movs	r1, #32
 800c2a2:	4809      	ldr	r0, [pc, #36]	; (800c2c8 <HW_IPCC_Tx_Handler+0x70>)
 800c2a4:	f7ff ff75 	bl	800c192 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d109      	bne.n	800c2c2 <HW_IPCC_Tx_Handler+0x6a>
 800c2ae:	4b06      	ldr	r3, [pc, #24]	; (800c2c8 <HW_IPCC_Tx_Handler+0x70>)
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	43db      	mvns	r3, r3
 800c2b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d002      	beq.n	800c2c2 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800c2bc:	f000 f850 	bl	800c360 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800c2c0:	bf00      	nop
 800c2c2:	bf00      	nop
}
 800c2c4:	bd80      	pop	{r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	58000c00 	.word	0x58000c00

0800c2cc <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800c2d0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c2d4:	f7ff fecd 	bl	800c072 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800c2d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c2dc:	f7ff fe9e 	bl	800c01c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800c2e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c2e4:	f7ff fe86 	bl	800bff4 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800c2e8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800c2ea:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800c2ec:	f7ff fe72 	bl	800bfd4 <LL_PWR_EnableBootC2>

  return;
 800c2f0:	bf00      	nop
}
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800c2f8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c2fc:	f7ff fea0 	bl	800c040 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800c300:	4806      	ldr	r0, [pc, #24]	; (800c31c <HW_IPCC_Init+0x28>)
 800c302:	f7ff fee2 	bl	800c0ca <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800c306:	4805      	ldr	r0, [pc, #20]	; (800c31c <HW_IPCC_Init+0x28>)
 800c308:	f7ff fecf 	bl	800c0aa <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800c30c:	202c      	movs	r0, #44	; 0x2c
 800c30e:	f7f7 f9da 	bl	80036c6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800c312:	202d      	movs	r0, #45	; 0x2d
 800c314:	f7f7 f9d7 	bl	80036c6 <HAL_NVIC_EnableIRQ>

  return;
 800c318:	bf00      	nop
}
 800c31a:	bd80      	pop	{r7, pc}
 800c31c:	58000c00 	.word	0x58000c00

0800c320 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800c320:	b580      	push	{r7, lr}
 800c322:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c324:	2101      	movs	r1, #1
 800c326:	4802      	ldr	r0, [pc, #8]	; (800c330 <HW_IPCC_BLE_Init+0x10>)
 800c328:	f7ff ff04 	bl	800c134 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c32c:	bf00      	nop
}
 800c32e:	bd80      	pop	{r7, pc}
 800c330:	58000c00 	.word	0x58000c00

0800c334 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800c334:	b580      	push	{r7, lr}
 800c336:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800c338:	2101      	movs	r1, #1
 800c33a:	4802      	ldr	r0, [pc, #8]	; (800c344 <HW_IPCC_BLE_SendCmd+0x10>)
 800c33c:	f7ff ff1a 	bl	800c174 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c340:	bf00      	nop
}
 800c342:	bd80      	pop	{r7, pc}
 800c344:	58000c00 	.word	0x58000c00

0800c348 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800c34c:	f7fc ff5e 	bl	800920c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c350:	2101      	movs	r1, #1
 800c352:	4802      	ldr	r0, [pc, #8]	; (800c35c <HW_IPCC_BLE_EvtHandler+0x14>)
 800c354:	f7ff ff00 	bl	800c158 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c358:	bf00      	nop
}
 800c35a:	bd80      	pop	{r7, pc}
 800c35c:	58000c00 	.word	0x58000c00

0800c360 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800c360:	b580      	push	{r7, lr}
 800c362:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800c364:	2120      	movs	r1, #32
 800c366:	4803      	ldr	r0, [pc, #12]	; (800c374 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800c368:	f7ff fed2 	bl	800c110 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800c36c:	f7fc ff7e 	bl	800926c <HW_IPCC_BLE_AclDataAckNot>

  return;
 800c370:	bf00      	nop
}
 800c372:	bd80      	pop	{r7, pc}
 800c374:	58000c00 	.word	0x58000c00

0800c378 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c37c:	2102      	movs	r1, #2
 800c37e:	4802      	ldr	r0, [pc, #8]	; (800c388 <HW_IPCC_SYS_Init+0x10>)
 800c380:	f7ff fed8 	bl	800c134 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c384:	bf00      	nop
}
 800c386:	bd80      	pop	{r7, pc}
 800c388:	58000c00 	.word	0x58000c00

0800c38c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c390:	2102      	movs	r1, #2
 800c392:	4804      	ldr	r0, [pc, #16]	; (800c3a4 <HW_IPCC_SYS_SendCmd+0x18>)
 800c394:	f7ff feee 	bl	800c174 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c398:	2102      	movs	r1, #2
 800c39a:	4802      	ldr	r0, [pc, #8]	; (800c3a4 <HW_IPCC_SYS_SendCmd+0x18>)
 800c39c:	f7ff fea5 	bl	800c0ea <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800c3a0:	bf00      	nop
}
 800c3a2:	bd80      	pop	{r7, pc}
 800c3a4:	58000c00 	.word	0x58000c00

0800c3a8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c3ac:	2102      	movs	r1, #2
 800c3ae:	4803      	ldr	r0, [pc, #12]	; (800c3bc <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800c3b0:	f7ff feae 	bl	800c110 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800c3b4:	f7fc ffaa 	bl	800930c <HW_IPCC_SYS_CmdEvtNot>

  return;
 800c3b8:	bf00      	nop
}
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	58000c00 	.word	0x58000c00

0800c3c0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800c3c4:	f7fc ffb8 	bl	8009338 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c3c8:	2102      	movs	r1, #2
 800c3ca:	4802      	ldr	r0, [pc, #8]	; (800c3d4 <HW_IPCC_SYS_EvtHandler+0x14>)
 800c3cc:	f7ff fec4 	bl	800c158 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c3d0:	bf00      	nop
}
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	58000c00 	.word	0x58000c00

0800c3d8 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800c3e0:	2108      	movs	r1, #8
 800c3e2:	480c      	ldr	r0, [pc, #48]	; (800c414 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c3e4:	f7ff fed5 	bl	800c192 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d007      	beq.n	800c3fe <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800c3ee:	4a0a      	ldr	r2, [pc, #40]	; (800c418 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c3f4:	2108      	movs	r1, #8
 800c3f6:	4807      	ldr	r0, [pc, #28]	; (800c414 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c3f8:	f7ff fe77 	bl	800c0ea <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800c3fc:	e006      	b.n	800c40c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c402:	2108      	movs	r1, #8
 800c404:	4803      	ldr	r0, [pc, #12]	; (800c414 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c406:	f7ff feb5 	bl	800c174 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800c40a:	bf00      	nop
}
 800c40c:	3708      	adds	r7, #8
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop
 800c414:	58000c00 	.word	0x58000c00
 800c418:	20001638 	.word	0x20001638

0800c41c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c420:	2108      	movs	r1, #8
 800c422:	4806      	ldr	r0, [pc, #24]	; (800c43c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c424:	f7ff fe74 	bl	800c110 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800c428:	4b05      	ldr	r3, [pc, #20]	; (800c440 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c42e:	2108      	movs	r1, #8
 800c430:	4802      	ldr	r0, [pc, #8]	; (800c43c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c432:	f7ff fe9f 	bl	800c174 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c436:	bf00      	nop
}
 800c438:	bd80      	pop	{r7, pc}
 800c43a:	bf00      	nop
 800c43c:	58000c00 	.word	0x58000c00
 800c440:	20001638 	.word	0x20001638

0800c444 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800c444:	b580      	push	{r7, lr}
 800c446:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c448:	2108      	movs	r1, #8
 800c44a:	4802      	ldr	r0, [pc, #8]	; (800c454 <HW_IPCC_TRACES_Init+0x10>)
 800c44c:	f7ff fe72 	bl	800c134 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c450:	bf00      	nop
}
 800c452:	bd80      	pop	{r7, pc}
 800c454:	58000c00 	.word	0x58000c00

0800c458 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800c45c:	f7fd f814 	bl	8009488 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c460:	2108      	movs	r1, #8
 800c462:	4802      	ldr	r0, [pc, #8]	; (800c46c <HW_IPCC_TRACES_EvtHandler+0x14>)
 800c464:	f7ff fe78 	bl	800c158 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c468:	bf00      	nop
}
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	58000c00 	.word	0x58000c00

0800c470 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800c470:	b480      	push	{r7}
 800c472:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800c474:	4b05      	ldr	r3, [pc, #20]	; (800c48c <UTIL_LPM_Init+0x1c>)
 800c476:	2200      	movs	r2, #0
 800c478:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800c47a:	4b05      	ldr	r3, [pc, #20]	; (800c490 <UTIL_LPM_Init+0x20>)
 800c47c:	2200      	movs	r2, #0
 800c47e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800c480:	bf00      	nop
 800c482:	46bd      	mov	sp, r7
 800c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c488:	4770      	bx	lr
 800c48a:	bf00      	nop
 800c48c:	2000163c 	.word	0x2000163c
 800c490:	20001640 	.word	0x20001640

0800c494 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800c494:	b480      	push	{r7}
 800c496:	b087      	sub	sp, #28
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	460b      	mov	r3, r1
 800c49e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c4a0:	f3ef 8310 	mrs	r3, PRIMASK
 800c4a4:	613b      	str	r3, [r7, #16]
  return(result);
 800c4a6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800c4a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c4aa:	b672      	cpsid	i
}
 800c4ac:	bf00      	nop
  
  switch(state)
 800c4ae:	78fb      	ldrb	r3, [r7, #3]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d008      	beq.n	800c4c6 <UTIL_LPM_SetOffMode+0x32>
 800c4b4:	2b01      	cmp	r3, #1
 800c4b6:	d10e      	bne.n	800c4d6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800c4b8:	4b0d      	ldr	r3, [pc, #52]	; (800c4f0 <UTIL_LPM_SetOffMode+0x5c>)
 800c4ba:	681a      	ldr	r2, [r3, #0]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	4a0b      	ldr	r2, [pc, #44]	; (800c4f0 <UTIL_LPM_SetOffMode+0x5c>)
 800c4c2:	6013      	str	r3, [r2, #0]
      break;
 800c4c4:	e008      	b.n	800c4d8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	43da      	mvns	r2, r3
 800c4ca:	4b09      	ldr	r3, [pc, #36]	; (800c4f0 <UTIL_LPM_SetOffMode+0x5c>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	4013      	ands	r3, r2
 800c4d0:	4a07      	ldr	r2, [pc, #28]	; (800c4f0 <UTIL_LPM_SetOffMode+0x5c>)
 800c4d2:	6013      	str	r3, [r2, #0]
      break;
 800c4d4:	e000      	b.n	800c4d8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800c4d6:	bf00      	nop
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f383 8810 	msr	PRIMASK, r3
}
 800c4e2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800c4e4:	bf00      	nop
 800c4e6:	371c      	adds	r7, #28
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr
 800c4f0:	20001640 	.word	0x20001640

0800c4f4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b090      	sub	sp, #64	; 0x40
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800c4fc:	4b73      	ldr	r3, [pc, #460]	; (800c6cc <UTIL_SEQ_Run+0x1d8>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800c502:	4b72      	ldr	r3, [pc, #456]	; (800c6cc <UTIL_SEQ_Run+0x1d8>)
 800c504:	681a      	ldr	r2, [r3, #0]
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	4013      	ands	r3, r2
 800c50a:	4a70      	ldr	r2, [pc, #448]	; (800c6cc <UTIL_SEQ_Run+0x1d8>)
 800c50c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800c50e:	4b70      	ldr	r3, [pc, #448]	; (800c6d0 <UTIL_SEQ_Run+0x1dc>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c514:	4b6f      	ldr	r3, [pc, #444]	; (800c6d4 <UTIL_SEQ_Run+0x1e0>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c51a:	4b6f      	ldr	r3, [pc, #444]	; (800c6d8 <UTIL_SEQ_Run+0x1e4>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800c520:	4b6e      	ldr	r3, [pc, #440]	; (800c6dc <UTIL_SEQ_Run+0x1e8>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c526:	e08d      	b.n	800c644 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800c528:	2300      	movs	r3, #0
 800c52a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c52c:	e002      	b.n	800c534 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800c52e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c530:	3301      	adds	r3, #1
 800c532:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c534:	4a6a      	ldr	r2, [pc, #424]	; (800c6e0 <UTIL_SEQ_Run+0x1ec>)
 800c536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c538:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53e:	401a      	ands	r2, r3
 800c540:	4b62      	ldr	r3, [pc, #392]	; (800c6cc <UTIL_SEQ_Run+0x1d8>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4013      	ands	r3, r2
 800c546:	2b00      	cmp	r3, #0
 800c548:	d0f1      	beq.n	800c52e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800c54a:	4a65      	ldr	r2, [pc, #404]	; (800c6e0 <UTIL_SEQ_Run+0x1ec>)
 800c54c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c54e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c554:	401a      	ands	r2, r3
 800c556:	4b5d      	ldr	r3, [pc, #372]	; (800c6cc <UTIL_SEQ_Run+0x1d8>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	4013      	ands	r3, r2
 800c55c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800c55e:	4a60      	ldr	r2, [pc, #384]	; (800c6e0 <UTIL_SEQ_Run+0x1ec>)
 800c560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c562:	00db      	lsls	r3, r3, #3
 800c564:	4413      	add	r3, r2
 800c566:	685a      	ldr	r2, [r3, #4]
 800c568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56a:	4013      	ands	r3, r2
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d106      	bne.n	800c57e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800c570:	4a5b      	ldr	r2, [pc, #364]	; (800c6e0 <UTIL_SEQ_Run+0x1ec>)
 800c572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c574:	00db      	lsls	r3, r3, #3
 800c576:	4413      	add	r3, r2
 800c578:	f04f 32ff 	mov.w	r2, #4294967295
 800c57c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c57e:	4a58      	ldr	r2, [pc, #352]	; (800c6e0 <UTIL_SEQ_Run+0x1ec>)
 800c580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c582:	00db      	lsls	r3, r3, #3
 800c584:	4413      	add	r3, r2
 800c586:	685a      	ldr	r2, [r3, #4]
 800c588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58a:	4013      	ands	r3, r2
 800c58c:	4618      	mov	r0, r3
 800c58e:	f000 f9b3 	bl	800c8f8 <SEQ_BitPosition>
 800c592:	4603      	mov	r3, r0
 800c594:	461a      	mov	r2, r3
 800c596:	4b53      	ldr	r3, [pc, #332]	; (800c6e4 <UTIL_SEQ_Run+0x1f0>)
 800c598:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800c59a:	4a51      	ldr	r2, [pc, #324]	; (800c6e0 <UTIL_SEQ_Run+0x1ec>)
 800c59c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c59e:	00db      	lsls	r3, r3, #3
 800c5a0:	4413      	add	r3, r2
 800c5a2:	685a      	ldr	r2, [r3, #4]
 800c5a4:	4b4f      	ldr	r3, [pc, #316]	; (800c6e4 <UTIL_SEQ_Run+0x1f0>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	2101      	movs	r1, #1
 800c5aa:	fa01 f303 	lsl.w	r3, r1, r3
 800c5ae:	43db      	mvns	r3, r3
 800c5b0:	401a      	ands	r2, r3
 800c5b2:	494b      	ldr	r1, [pc, #300]	; (800c6e0 <UTIL_SEQ_Run+0x1ec>)
 800c5b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5b6:	00db      	lsls	r3, r3, #3
 800c5b8:	440b      	add	r3, r1
 800c5ba:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c5bc:	f3ef 8310 	mrs	r3, PRIMASK
 800c5c0:	61bb      	str	r3, [r7, #24]
  return(result);
 800c5c2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c5c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800c5c6:	b672      	cpsid	i
}
 800c5c8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800c5ca:	4b46      	ldr	r3, [pc, #280]	; (800c6e4 <UTIL_SEQ_Run+0x1f0>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	fa02 f303 	lsl.w	r3, r2, r3
 800c5d4:	43da      	mvns	r2, r3
 800c5d6:	4b3e      	ldr	r3, [pc, #248]	; (800c6d0 <UTIL_SEQ_Run+0x1dc>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4013      	ands	r3, r2
 800c5dc:	4a3c      	ldr	r2, [pc, #240]	; (800c6d0 <UTIL_SEQ_Run+0x1dc>)
 800c5de:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c5e0:	2302      	movs	r3, #2
 800c5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5e4:	e013      	b.n	800c60e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800c5e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5e8:	3b01      	subs	r3, #1
 800c5ea:	4a3d      	ldr	r2, [pc, #244]	; (800c6e0 <UTIL_SEQ_Run+0x1ec>)
 800c5ec:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c5f0:	4b3c      	ldr	r3, [pc, #240]	; (800c6e4 <UTIL_SEQ_Run+0x1f0>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	fa02 f303 	lsl.w	r3, r2, r3
 800c5fa:	43da      	mvns	r2, r3
 800c5fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5fe:	3b01      	subs	r3, #1
 800c600:	400a      	ands	r2, r1
 800c602:	4937      	ldr	r1, [pc, #220]	; (800c6e0 <UTIL_SEQ_Run+0x1ec>)
 800c604:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c60a:	3b01      	subs	r3, #1
 800c60c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c60e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c610:	2b00      	cmp	r3, #0
 800c612:	d1e8      	bne.n	800c5e6 <UTIL_SEQ_Run+0xf2>
 800c614:	6a3b      	ldr	r3, [r7, #32]
 800c616:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	f383 8810 	msr	PRIMASK, r3
}
 800c61e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800c620:	4b30      	ldr	r3, [pc, #192]	; (800c6e4 <UTIL_SEQ_Run+0x1f0>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	4a30      	ldr	r2, [pc, #192]	; (800c6e8 <UTIL_SEQ_Run+0x1f4>)
 800c626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c62a:	4798      	blx	r3

    local_taskset = TaskSet;
 800c62c:	4b28      	ldr	r3, [pc, #160]	; (800c6d0 <UTIL_SEQ_Run+0x1dc>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800c632:	4b28      	ldr	r3, [pc, #160]	; (800c6d4 <UTIL_SEQ_Run+0x1e0>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800c638:	4b27      	ldr	r3, [pc, #156]	; (800c6d8 <UTIL_SEQ_Run+0x1e4>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800c63e:	4b27      	ldr	r3, [pc, #156]	; (800c6dc <UTIL_SEQ_Run+0x1e8>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c648:	401a      	ands	r2, r3
 800c64a:	4b20      	ldr	r3, [pc, #128]	; (800c6cc <UTIL_SEQ_Run+0x1d8>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4013      	ands	r3, r2
 800c650:	2b00      	cmp	r3, #0
 800c652:	d005      	beq.n	800c660 <UTIL_SEQ_Run+0x16c>
 800c654:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c658:	4013      	ands	r3, r2
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	f43f af64 	beq.w	800c528 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800c660:	4b20      	ldr	r3, [pc, #128]	; (800c6e4 <UTIL_SEQ_Run+0x1f0>)
 800c662:	f04f 32ff 	mov.w	r2, #4294967295
 800c666:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800c668:	f000 f938 	bl	800c8dc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c66c:	f3ef 8310 	mrs	r3, PRIMASK
 800c670:	613b      	str	r3, [r7, #16]
  return(result);
 800c672:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800c674:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c676:	b672      	cpsid	i
}
 800c678:	bf00      	nop
  local_taskset = TaskSet;
 800c67a:	4b15      	ldr	r3, [pc, #84]	; (800c6d0 <UTIL_SEQ_Run+0x1dc>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c680:	4b14      	ldr	r3, [pc, #80]	; (800c6d4 <UTIL_SEQ_Run+0x1e0>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c686:	4b14      	ldr	r3, [pc, #80]	; (800c6d8 <UTIL_SEQ_Run+0x1e4>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800c68c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c690:	401a      	ands	r2, r3
 800c692:	4b0e      	ldr	r3, [pc, #56]	; (800c6cc <UTIL_SEQ_Run+0x1d8>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4013      	ands	r3, r2
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d107      	bne.n	800c6ac <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800c69c:	4b0f      	ldr	r3, [pc, #60]	; (800c6dc <UTIL_SEQ_Run+0x1e8>)
 800c69e:	681a      	ldr	r2, [r3, #0]
 800c6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6a2:	4013      	ands	r3, r2
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d101      	bne.n	800c6ac <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800c6a8:	f7f4 ff84 	bl	80015b4 <UTIL_SEQ_Idle>
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	f383 8810 	msr	PRIMASK, r3
}
 800c6b6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800c6b8:	f000 f917 	bl	800c8ea <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800c6bc:	4a03      	ldr	r2, [pc, #12]	; (800c6cc <UTIL_SEQ_Run+0x1d8>)
 800c6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c0:	6013      	str	r3, [r2, #0]

  return;
 800c6c2:	bf00      	nop
}
 800c6c4:	3740      	adds	r7, #64	; 0x40
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}
 800c6ca:	bf00      	nop
 800c6cc:	20000030 	.word	0x20000030
 800c6d0:	20001644 	.word	0x20001644
 800c6d4:	20001648 	.word	0x20001648
 800c6d8:	2000002c 	.word	0x2000002c
 800c6dc:	2000164c 	.word	0x2000164c
 800c6e0:	200016d4 	.word	0x200016d4
 800c6e4:	20001650 	.word	0x20001650
 800c6e8:	20001654 	.word	0x20001654

0800c6ec <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b088      	sub	sp, #32
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	60f8      	str	r0, [r7, #12]
 800c6f4:	60b9      	str	r1, [r7, #8]
 800c6f6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6f8:	f3ef 8310 	mrs	r3, PRIMASK
 800c6fc:	617b      	str	r3, [r7, #20]
  return(result);
 800c6fe:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800c700:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c702:	b672      	cpsid	i
}
 800c704:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c706:	68f8      	ldr	r0, [r7, #12]
 800c708:	f000 f8f6 	bl	800c8f8 <SEQ_BitPosition>
 800c70c:	4603      	mov	r3, r0
 800c70e:	4619      	mov	r1, r3
 800c710:	4a06      	ldr	r2, [pc, #24]	; (800c72c <UTIL_SEQ_RegTask+0x40>)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c718:	69fb      	ldr	r3, [r7, #28]
 800c71a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c71c:	69bb      	ldr	r3, [r7, #24]
 800c71e:	f383 8810 	msr	PRIMASK, r3
}
 800c722:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800c724:	bf00      	nop
}
 800c726:	3720      	adds	r7, #32
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	20001654 	.word	0x20001654

0800c730 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800c730:	b480      	push	{r7}
 800c732:	b087      	sub	sp, #28
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c73a:	f3ef 8310 	mrs	r3, PRIMASK
 800c73e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c740:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c742:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c744:	b672      	cpsid	i
}
 800c746:	bf00      	nop

  TaskSet |= TaskId_bm;
 800c748:	4b0d      	ldr	r3, [pc, #52]	; (800c780 <UTIL_SEQ_SetTask+0x50>)
 800c74a:	681a      	ldr	r2, [r3, #0]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	4313      	orrs	r3, r2
 800c750:	4a0b      	ldr	r2, [pc, #44]	; (800c780 <UTIL_SEQ_SetTask+0x50>)
 800c752:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800c754:	4a0b      	ldr	r2, [pc, #44]	; (800c784 <UTIL_SEQ_SetTask+0x54>)
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	431a      	orrs	r2, r3
 800c760:	4908      	ldr	r1, [pc, #32]	; (800c784 <UTIL_SEQ_SetTask+0x54>)
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	f383 8810 	msr	PRIMASK, r3
}
 800c772:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c774:	bf00      	nop
}
 800c776:	371c      	adds	r7, #28
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr
 800c780:	20001644 	.word	0x20001644
 800c784:	200016d4 	.word	0x200016d4

0800c788 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c788:	b480      	push	{r7}
 800c78a:	b087      	sub	sp, #28
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c790:	f3ef 8310 	mrs	r3, PRIMASK
 800c794:	60fb      	str	r3, [r7, #12]
  return(result);
 800c796:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c798:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c79a:	b672      	cpsid	i
}
 800c79c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	43da      	mvns	r2, r3
 800c7a2:	4b08      	ldr	r3, [pc, #32]	; (800c7c4 <UTIL_SEQ_PauseTask+0x3c>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	4013      	ands	r3, r2
 800c7a8:	4a06      	ldr	r2, [pc, #24]	; (800c7c4 <UTIL_SEQ_PauseTask+0x3c>)
 800c7aa:	6013      	str	r3, [r2, #0]
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	f383 8810 	msr	PRIMASK, r3
}
 800c7b6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c7b8:	bf00      	nop
}
 800c7ba:	371c      	adds	r7, #28
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr
 800c7c4:	2000002c 	.word	0x2000002c

0800c7c8 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b087      	sub	sp, #28
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c7d0:	f3ef 8310 	mrs	r3, PRIMASK
 800c7d4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c7d6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c7d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c7da:	b672      	cpsid	i
}
 800c7dc:	bf00      	nop

  TaskMask |= TaskId_bm;
 800c7de:	4b09      	ldr	r3, [pc, #36]	; (800c804 <UTIL_SEQ_ResumeTask+0x3c>)
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	4a07      	ldr	r2, [pc, #28]	; (800c804 <UTIL_SEQ_ResumeTask+0x3c>)
 800c7e8:	6013      	str	r3, [r2, #0]
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	f383 8810 	msr	PRIMASK, r3
}
 800c7f4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c7f6:	bf00      	nop
}
 800c7f8:	371c      	adds	r7, #28
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c800:	4770      	bx	lr
 800c802:	bf00      	nop
 800c804:	2000002c 	.word	0x2000002c

0800c808 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800c808:	b480      	push	{r7}
 800c80a:	b087      	sub	sp, #28
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c810:	f3ef 8310 	mrs	r3, PRIMASK
 800c814:	60fb      	str	r3, [r7, #12]
  return(result);
 800c816:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c818:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c81a:	b672      	cpsid	i
}
 800c81c:	bf00      	nop

  EvtSet |= EvtId_bm;
 800c81e:	4b09      	ldr	r3, [pc, #36]	; (800c844 <UTIL_SEQ_SetEvt+0x3c>)
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	4313      	orrs	r3, r2
 800c826:	4a07      	ldr	r2, [pc, #28]	; (800c844 <UTIL_SEQ_SetEvt+0x3c>)
 800c828:	6013      	str	r3, [r2, #0]
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	f383 8810 	msr	PRIMASK, r3
}
 800c834:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c836:	bf00      	nop
}
 800c838:	371c      	adds	r7, #28
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr
 800c842:	bf00      	nop
 800c844:	20001648 	.word	0x20001648

0800c848 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b088      	sub	sp, #32
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800c850:	4b1f      	ldr	r3, [pc, #124]	; (800c8d0 <UTIL_SEQ_WaitEvt+0x88>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800c856:	4b1e      	ldr	r3, [pc, #120]	; (800c8d0 <UTIL_SEQ_WaitEvt+0x88>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c85e:	d102      	bne.n	800c866 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800c860:	2300      	movs	r3, #0
 800c862:	61fb      	str	r3, [r7, #28]
 800c864:	e005      	b.n	800c872 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800c866:	4b1a      	ldr	r3, [pc, #104]	; (800c8d0 <UTIL_SEQ_WaitEvt+0x88>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	2201      	movs	r2, #1
 800c86c:	fa02 f303 	lsl.w	r3, r2, r3
 800c870:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800c872:	4b18      	ldr	r3, [pc, #96]	; (800c8d4 <UTIL_SEQ_WaitEvt+0x8c>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800c878:	4a16      	ldr	r2, [pc, #88]	; (800c8d4 <UTIL_SEQ_WaitEvt+0x8c>)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800c87e:	e003      	b.n	800c888 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800c880:	6879      	ldr	r1, [r7, #4]
 800c882:	69f8      	ldr	r0, [r7, #28]
 800c884:	f7f4 fe9d 	bl	80015c2 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800c888:	4b13      	ldr	r3, [pc, #76]	; (800c8d8 <UTIL_SEQ_WaitEvt+0x90>)
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	4013      	ands	r3, r2
 800c890:	2b00      	cmp	r3, #0
 800c892:	d0f5      	beq.n	800c880 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800c894:	4a0e      	ldr	r2, [pc, #56]	; (800c8d0 <UTIL_SEQ_WaitEvt+0x88>)
 800c896:	69bb      	ldr	r3, [r7, #24]
 800c898:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c89a:	f3ef 8310 	mrs	r3, PRIMASK
 800c89e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c8a0:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c8a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c8a4:	b672      	cpsid	i
}
 800c8a6:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	43da      	mvns	r2, r3
 800c8ac:	4b0a      	ldr	r3, [pc, #40]	; (800c8d8 <UTIL_SEQ_WaitEvt+0x90>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4013      	ands	r3, r2
 800c8b2:	4a09      	ldr	r2, [pc, #36]	; (800c8d8 <UTIL_SEQ_WaitEvt+0x90>)
 800c8b4:	6013      	str	r3, [r2, #0]
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	f383 8810 	msr	PRIMASK, r3
}
 800c8c0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800c8c2:	4a04      	ldr	r2, [pc, #16]	; (800c8d4 <UTIL_SEQ_WaitEvt+0x8c>)
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	6013      	str	r3, [r2, #0]
  return;
 800c8c8:	bf00      	nop
}
 800c8ca:	3720      	adds	r7, #32
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	20001650 	.word	0x20001650
 800c8d4:	2000164c 	.word	0x2000164c
 800c8d8:	20001648 	.word	0x20001648

0800c8dc <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800c8dc:	b480      	push	{r7}
 800c8de:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c8e0:	bf00      	nop
}
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e8:	4770      	bx	lr

0800c8ea <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800c8ea:	b480      	push	{r7}
 800c8ec:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c8ee:	bf00      	nop
}
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr

0800c8f8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b085      	sub	sp, #20
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800c900:	2300      	movs	r3, #0
 800c902:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	0c1b      	lsrs	r3, r3, #16
 800c90c:	041b      	lsls	r3, r3, #16
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d104      	bne.n	800c91c <SEQ_BitPosition+0x24>
 800c912:	2310      	movs	r3, #16
 800c914:	73fb      	strb	r3, [r7, #15]
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	041b      	lsls	r3, r3, #16
 800c91a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c922:	2b00      	cmp	r3, #0
 800c924:	d105      	bne.n	800c932 <SEQ_BitPosition+0x3a>
 800c926:	7bfb      	ldrb	r3, [r7, #15]
 800c928:	3308      	adds	r3, #8
 800c92a:	73fb      	strb	r3, [r7, #15]
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	021b      	lsls	r3, r3, #8
 800c930:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d105      	bne.n	800c948 <SEQ_BitPosition+0x50>
 800c93c:	7bfb      	ldrb	r3, [r7, #15]
 800c93e:	3304      	adds	r3, #4
 800c940:	73fb      	strb	r3, [r7, #15]
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	011b      	lsls	r3, r3, #4
 800c946:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	0f1b      	lsrs	r3, r3, #28
 800c94c:	4a07      	ldr	r2, [pc, #28]	; (800c96c <SEQ_BitPosition+0x74>)
 800c94e:	5cd2      	ldrb	r2, [r2, r3]
 800c950:	7bfb      	ldrb	r3, [r7, #15]
 800c952:	4413      	add	r3, r2
 800c954:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800c956:	7bfb      	ldrb	r3, [r7, #15]
 800c958:	f1c3 031f 	rsb	r3, r3, #31
 800c95c:	b2db      	uxtb	r3, r3
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3714      	adds	r7, #20
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	0800fdcc 	.word	0x0800fdcc

0800c970 <__errno>:
 800c970:	4b01      	ldr	r3, [pc, #4]	; (800c978 <__errno+0x8>)
 800c972:	6818      	ldr	r0, [r3, #0]
 800c974:	4770      	bx	lr
 800c976:	bf00      	nop
 800c978:	20000034 	.word	0x20000034

0800c97c <__libc_init_array>:
 800c97c:	b570      	push	{r4, r5, r6, lr}
 800c97e:	4d0d      	ldr	r5, [pc, #52]	; (800c9b4 <__libc_init_array+0x38>)
 800c980:	4c0d      	ldr	r4, [pc, #52]	; (800c9b8 <__libc_init_array+0x3c>)
 800c982:	1b64      	subs	r4, r4, r5
 800c984:	10a4      	asrs	r4, r4, #2
 800c986:	2600      	movs	r6, #0
 800c988:	42a6      	cmp	r6, r4
 800c98a:	d109      	bne.n	800c9a0 <__libc_init_array+0x24>
 800c98c:	4d0b      	ldr	r5, [pc, #44]	; (800c9bc <__libc_init_array+0x40>)
 800c98e:	4c0c      	ldr	r4, [pc, #48]	; (800c9c0 <__libc_init_array+0x44>)
 800c990:	f001 fa86 	bl	800dea0 <_init>
 800c994:	1b64      	subs	r4, r4, r5
 800c996:	10a4      	asrs	r4, r4, #2
 800c998:	2600      	movs	r6, #0
 800c99a:	42a6      	cmp	r6, r4
 800c99c:	d105      	bne.n	800c9aa <__libc_init_array+0x2e>
 800c99e:	bd70      	pop	{r4, r5, r6, pc}
 800c9a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9a4:	4798      	blx	r3
 800c9a6:	3601      	adds	r6, #1
 800c9a8:	e7ee      	b.n	800c988 <__libc_init_array+0xc>
 800c9aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9ae:	4798      	blx	r3
 800c9b0:	3601      	adds	r6, #1
 800c9b2:	e7f2      	b.n	800c99a <__libc_init_array+0x1e>
 800c9b4:	0800fe7c 	.word	0x0800fe7c
 800c9b8:	0800fe7c 	.word	0x0800fe7c
 800c9bc:	0800fe7c 	.word	0x0800fe7c
 800c9c0:	0800fe80 	.word	0x0800fe80

0800c9c4 <memcpy>:
 800c9c4:	440a      	add	r2, r1
 800c9c6:	4291      	cmp	r1, r2
 800c9c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c9cc:	d100      	bne.n	800c9d0 <memcpy+0xc>
 800c9ce:	4770      	bx	lr
 800c9d0:	b510      	push	{r4, lr}
 800c9d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9da:	4291      	cmp	r1, r2
 800c9dc:	d1f9      	bne.n	800c9d2 <memcpy+0xe>
 800c9de:	bd10      	pop	{r4, pc}

0800c9e0 <memset>:
 800c9e0:	4402      	add	r2, r0
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d100      	bne.n	800c9ea <memset+0xa>
 800c9e8:	4770      	bx	lr
 800c9ea:	f803 1b01 	strb.w	r1, [r3], #1
 800c9ee:	e7f9      	b.n	800c9e4 <memset+0x4>

0800c9f0 <iprintf>:
 800c9f0:	b40f      	push	{r0, r1, r2, r3}
 800c9f2:	4b0a      	ldr	r3, [pc, #40]	; (800ca1c <iprintf+0x2c>)
 800c9f4:	b513      	push	{r0, r1, r4, lr}
 800c9f6:	681c      	ldr	r4, [r3, #0]
 800c9f8:	b124      	cbz	r4, 800ca04 <iprintf+0x14>
 800c9fa:	69a3      	ldr	r3, [r4, #24]
 800c9fc:	b913      	cbnz	r3, 800ca04 <iprintf+0x14>
 800c9fe:	4620      	mov	r0, r4
 800ca00:	f000 fab0 	bl	800cf64 <__sinit>
 800ca04:	ab05      	add	r3, sp, #20
 800ca06:	9a04      	ldr	r2, [sp, #16]
 800ca08:	68a1      	ldr	r1, [r4, #8]
 800ca0a:	9301      	str	r3, [sp, #4]
 800ca0c:	4620      	mov	r0, r4
 800ca0e:	f000 fe15 	bl	800d63c <_vfiprintf_r>
 800ca12:	b002      	add	sp, #8
 800ca14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca18:	b004      	add	sp, #16
 800ca1a:	4770      	bx	lr
 800ca1c:	20000034 	.word	0x20000034

0800ca20 <putchar>:
 800ca20:	4b09      	ldr	r3, [pc, #36]	; (800ca48 <putchar+0x28>)
 800ca22:	b513      	push	{r0, r1, r4, lr}
 800ca24:	681c      	ldr	r4, [r3, #0]
 800ca26:	4601      	mov	r1, r0
 800ca28:	b134      	cbz	r4, 800ca38 <putchar+0x18>
 800ca2a:	69a3      	ldr	r3, [r4, #24]
 800ca2c:	b923      	cbnz	r3, 800ca38 <putchar+0x18>
 800ca2e:	9001      	str	r0, [sp, #4]
 800ca30:	4620      	mov	r0, r4
 800ca32:	f000 fa97 	bl	800cf64 <__sinit>
 800ca36:	9901      	ldr	r1, [sp, #4]
 800ca38:	68a2      	ldr	r2, [r4, #8]
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	b002      	add	sp, #8
 800ca3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca42:	f001 b8bf 	b.w	800dbc4 <_putc_r>
 800ca46:	bf00      	nop
 800ca48:	20000034 	.word	0x20000034

0800ca4c <_puts_r>:
 800ca4c:	b570      	push	{r4, r5, r6, lr}
 800ca4e:	460e      	mov	r6, r1
 800ca50:	4605      	mov	r5, r0
 800ca52:	b118      	cbz	r0, 800ca5c <_puts_r+0x10>
 800ca54:	6983      	ldr	r3, [r0, #24]
 800ca56:	b90b      	cbnz	r3, 800ca5c <_puts_r+0x10>
 800ca58:	f000 fa84 	bl	800cf64 <__sinit>
 800ca5c:	69ab      	ldr	r3, [r5, #24]
 800ca5e:	68ac      	ldr	r4, [r5, #8]
 800ca60:	b913      	cbnz	r3, 800ca68 <_puts_r+0x1c>
 800ca62:	4628      	mov	r0, r5
 800ca64:	f000 fa7e 	bl	800cf64 <__sinit>
 800ca68:	4b2c      	ldr	r3, [pc, #176]	; (800cb1c <_puts_r+0xd0>)
 800ca6a:	429c      	cmp	r4, r3
 800ca6c:	d120      	bne.n	800cab0 <_puts_r+0x64>
 800ca6e:	686c      	ldr	r4, [r5, #4]
 800ca70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca72:	07db      	lsls	r3, r3, #31
 800ca74:	d405      	bmi.n	800ca82 <_puts_r+0x36>
 800ca76:	89a3      	ldrh	r3, [r4, #12]
 800ca78:	0598      	lsls	r0, r3, #22
 800ca7a:	d402      	bmi.n	800ca82 <_puts_r+0x36>
 800ca7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca7e:	f000 fb0f 	bl	800d0a0 <__retarget_lock_acquire_recursive>
 800ca82:	89a3      	ldrh	r3, [r4, #12]
 800ca84:	0719      	lsls	r1, r3, #28
 800ca86:	d51d      	bpl.n	800cac4 <_puts_r+0x78>
 800ca88:	6923      	ldr	r3, [r4, #16]
 800ca8a:	b1db      	cbz	r3, 800cac4 <_puts_r+0x78>
 800ca8c:	3e01      	subs	r6, #1
 800ca8e:	68a3      	ldr	r3, [r4, #8]
 800ca90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ca94:	3b01      	subs	r3, #1
 800ca96:	60a3      	str	r3, [r4, #8]
 800ca98:	bb39      	cbnz	r1, 800caea <_puts_r+0x9e>
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	da38      	bge.n	800cb10 <_puts_r+0xc4>
 800ca9e:	4622      	mov	r2, r4
 800caa0:	210a      	movs	r1, #10
 800caa2:	4628      	mov	r0, r5
 800caa4:	f000 f884 	bl	800cbb0 <__swbuf_r>
 800caa8:	3001      	adds	r0, #1
 800caaa:	d011      	beq.n	800cad0 <_puts_r+0x84>
 800caac:	250a      	movs	r5, #10
 800caae:	e011      	b.n	800cad4 <_puts_r+0x88>
 800cab0:	4b1b      	ldr	r3, [pc, #108]	; (800cb20 <_puts_r+0xd4>)
 800cab2:	429c      	cmp	r4, r3
 800cab4:	d101      	bne.n	800caba <_puts_r+0x6e>
 800cab6:	68ac      	ldr	r4, [r5, #8]
 800cab8:	e7da      	b.n	800ca70 <_puts_r+0x24>
 800caba:	4b1a      	ldr	r3, [pc, #104]	; (800cb24 <_puts_r+0xd8>)
 800cabc:	429c      	cmp	r4, r3
 800cabe:	bf08      	it	eq
 800cac0:	68ec      	ldreq	r4, [r5, #12]
 800cac2:	e7d5      	b.n	800ca70 <_puts_r+0x24>
 800cac4:	4621      	mov	r1, r4
 800cac6:	4628      	mov	r0, r5
 800cac8:	f000 f8c4 	bl	800cc54 <__swsetup_r>
 800cacc:	2800      	cmp	r0, #0
 800cace:	d0dd      	beq.n	800ca8c <_puts_r+0x40>
 800cad0:	f04f 35ff 	mov.w	r5, #4294967295
 800cad4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cad6:	07da      	lsls	r2, r3, #31
 800cad8:	d405      	bmi.n	800cae6 <_puts_r+0x9a>
 800cada:	89a3      	ldrh	r3, [r4, #12]
 800cadc:	059b      	lsls	r3, r3, #22
 800cade:	d402      	bmi.n	800cae6 <_puts_r+0x9a>
 800cae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cae2:	f000 fade 	bl	800d0a2 <__retarget_lock_release_recursive>
 800cae6:	4628      	mov	r0, r5
 800cae8:	bd70      	pop	{r4, r5, r6, pc}
 800caea:	2b00      	cmp	r3, #0
 800caec:	da04      	bge.n	800caf8 <_puts_r+0xac>
 800caee:	69a2      	ldr	r2, [r4, #24]
 800caf0:	429a      	cmp	r2, r3
 800caf2:	dc06      	bgt.n	800cb02 <_puts_r+0xb6>
 800caf4:	290a      	cmp	r1, #10
 800caf6:	d004      	beq.n	800cb02 <_puts_r+0xb6>
 800caf8:	6823      	ldr	r3, [r4, #0]
 800cafa:	1c5a      	adds	r2, r3, #1
 800cafc:	6022      	str	r2, [r4, #0]
 800cafe:	7019      	strb	r1, [r3, #0]
 800cb00:	e7c5      	b.n	800ca8e <_puts_r+0x42>
 800cb02:	4622      	mov	r2, r4
 800cb04:	4628      	mov	r0, r5
 800cb06:	f000 f853 	bl	800cbb0 <__swbuf_r>
 800cb0a:	3001      	adds	r0, #1
 800cb0c:	d1bf      	bne.n	800ca8e <_puts_r+0x42>
 800cb0e:	e7df      	b.n	800cad0 <_puts_r+0x84>
 800cb10:	6823      	ldr	r3, [r4, #0]
 800cb12:	250a      	movs	r5, #10
 800cb14:	1c5a      	adds	r2, r3, #1
 800cb16:	6022      	str	r2, [r4, #0]
 800cb18:	701d      	strb	r5, [r3, #0]
 800cb1a:	e7db      	b.n	800cad4 <_puts_r+0x88>
 800cb1c:	0800fe00 	.word	0x0800fe00
 800cb20:	0800fe20 	.word	0x0800fe20
 800cb24:	0800fde0 	.word	0x0800fde0

0800cb28 <puts>:
 800cb28:	4b02      	ldr	r3, [pc, #8]	; (800cb34 <puts+0xc>)
 800cb2a:	4601      	mov	r1, r0
 800cb2c:	6818      	ldr	r0, [r3, #0]
 800cb2e:	f7ff bf8d 	b.w	800ca4c <_puts_r>
 800cb32:	bf00      	nop
 800cb34:	20000034 	.word	0x20000034

0800cb38 <siprintf>:
 800cb38:	b40e      	push	{r1, r2, r3}
 800cb3a:	b500      	push	{lr}
 800cb3c:	b09c      	sub	sp, #112	; 0x70
 800cb3e:	ab1d      	add	r3, sp, #116	; 0x74
 800cb40:	9002      	str	r0, [sp, #8]
 800cb42:	9006      	str	r0, [sp, #24]
 800cb44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cb48:	4809      	ldr	r0, [pc, #36]	; (800cb70 <siprintf+0x38>)
 800cb4a:	9107      	str	r1, [sp, #28]
 800cb4c:	9104      	str	r1, [sp, #16]
 800cb4e:	4909      	ldr	r1, [pc, #36]	; (800cb74 <siprintf+0x3c>)
 800cb50:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb54:	9105      	str	r1, [sp, #20]
 800cb56:	6800      	ldr	r0, [r0, #0]
 800cb58:	9301      	str	r3, [sp, #4]
 800cb5a:	a902      	add	r1, sp, #8
 800cb5c:	f000 fc44 	bl	800d3e8 <_svfiprintf_r>
 800cb60:	9b02      	ldr	r3, [sp, #8]
 800cb62:	2200      	movs	r2, #0
 800cb64:	701a      	strb	r2, [r3, #0]
 800cb66:	b01c      	add	sp, #112	; 0x70
 800cb68:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb6c:	b003      	add	sp, #12
 800cb6e:	4770      	bx	lr
 800cb70:	20000034 	.word	0x20000034
 800cb74:	ffff0208 	.word	0xffff0208

0800cb78 <strcpy>:
 800cb78:	4603      	mov	r3, r0
 800cb7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb7e:	f803 2b01 	strb.w	r2, [r3], #1
 800cb82:	2a00      	cmp	r2, #0
 800cb84:	d1f9      	bne.n	800cb7a <strcpy+0x2>
 800cb86:	4770      	bx	lr

0800cb88 <strrchr>:
 800cb88:	b538      	push	{r3, r4, r5, lr}
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	460c      	mov	r4, r1
 800cb8e:	b969      	cbnz	r1, 800cbac <strrchr+0x24>
 800cb90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb94:	f001 b8b1 	b.w	800dcfa <strchr>
 800cb98:	1c43      	adds	r3, r0, #1
 800cb9a:	4605      	mov	r5, r0
 800cb9c:	4621      	mov	r1, r4
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f001 f8ab 	bl	800dcfa <strchr>
 800cba4:	2800      	cmp	r0, #0
 800cba6:	d1f7      	bne.n	800cb98 <strrchr+0x10>
 800cba8:	4628      	mov	r0, r5
 800cbaa:	bd38      	pop	{r3, r4, r5, pc}
 800cbac:	2500      	movs	r5, #0
 800cbae:	e7f5      	b.n	800cb9c <strrchr+0x14>

0800cbb0 <__swbuf_r>:
 800cbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbb2:	460e      	mov	r6, r1
 800cbb4:	4614      	mov	r4, r2
 800cbb6:	4605      	mov	r5, r0
 800cbb8:	b118      	cbz	r0, 800cbc2 <__swbuf_r+0x12>
 800cbba:	6983      	ldr	r3, [r0, #24]
 800cbbc:	b90b      	cbnz	r3, 800cbc2 <__swbuf_r+0x12>
 800cbbe:	f000 f9d1 	bl	800cf64 <__sinit>
 800cbc2:	4b21      	ldr	r3, [pc, #132]	; (800cc48 <__swbuf_r+0x98>)
 800cbc4:	429c      	cmp	r4, r3
 800cbc6:	d12b      	bne.n	800cc20 <__swbuf_r+0x70>
 800cbc8:	686c      	ldr	r4, [r5, #4]
 800cbca:	69a3      	ldr	r3, [r4, #24]
 800cbcc:	60a3      	str	r3, [r4, #8]
 800cbce:	89a3      	ldrh	r3, [r4, #12]
 800cbd0:	071a      	lsls	r2, r3, #28
 800cbd2:	d52f      	bpl.n	800cc34 <__swbuf_r+0x84>
 800cbd4:	6923      	ldr	r3, [r4, #16]
 800cbd6:	b36b      	cbz	r3, 800cc34 <__swbuf_r+0x84>
 800cbd8:	6923      	ldr	r3, [r4, #16]
 800cbda:	6820      	ldr	r0, [r4, #0]
 800cbdc:	1ac0      	subs	r0, r0, r3
 800cbde:	6963      	ldr	r3, [r4, #20]
 800cbe0:	b2f6      	uxtb	r6, r6
 800cbe2:	4283      	cmp	r3, r0
 800cbe4:	4637      	mov	r7, r6
 800cbe6:	dc04      	bgt.n	800cbf2 <__swbuf_r+0x42>
 800cbe8:	4621      	mov	r1, r4
 800cbea:	4628      	mov	r0, r5
 800cbec:	f000 f926 	bl	800ce3c <_fflush_r>
 800cbf0:	bb30      	cbnz	r0, 800cc40 <__swbuf_r+0x90>
 800cbf2:	68a3      	ldr	r3, [r4, #8]
 800cbf4:	3b01      	subs	r3, #1
 800cbf6:	60a3      	str	r3, [r4, #8]
 800cbf8:	6823      	ldr	r3, [r4, #0]
 800cbfa:	1c5a      	adds	r2, r3, #1
 800cbfc:	6022      	str	r2, [r4, #0]
 800cbfe:	701e      	strb	r6, [r3, #0]
 800cc00:	6963      	ldr	r3, [r4, #20]
 800cc02:	3001      	adds	r0, #1
 800cc04:	4283      	cmp	r3, r0
 800cc06:	d004      	beq.n	800cc12 <__swbuf_r+0x62>
 800cc08:	89a3      	ldrh	r3, [r4, #12]
 800cc0a:	07db      	lsls	r3, r3, #31
 800cc0c:	d506      	bpl.n	800cc1c <__swbuf_r+0x6c>
 800cc0e:	2e0a      	cmp	r6, #10
 800cc10:	d104      	bne.n	800cc1c <__swbuf_r+0x6c>
 800cc12:	4621      	mov	r1, r4
 800cc14:	4628      	mov	r0, r5
 800cc16:	f000 f911 	bl	800ce3c <_fflush_r>
 800cc1a:	b988      	cbnz	r0, 800cc40 <__swbuf_r+0x90>
 800cc1c:	4638      	mov	r0, r7
 800cc1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc20:	4b0a      	ldr	r3, [pc, #40]	; (800cc4c <__swbuf_r+0x9c>)
 800cc22:	429c      	cmp	r4, r3
 800cc24:	d101      	bne.n	800cc2a <__swbuf_r+0x7a>
 800cc26:	68ac      	ldr	r4, [r5, #8]
 800cc28:	e7cf      	b.n	800cbca <__swbuf_r+0x1a>
 800cc2a:	4b09      	ldr	r3, [pc, #36]	; (800cc50 <__swbuf_r+0xa0>)
 800cc2c:	429c      	cmp	r4, r3
 800cc2e:	bf08      	it	eq
 800cc30:	68ec      	ldreq	r4, [r5, #12]
 800cc32:	e7ca      	b.n	800cbca <__swbuf_r+0x1a>
 800cc34:	4621      	mov	r1, r4
 800cc36:	4628      	mov	r0, r5
 800cc38:	f000 f80c 	bl	800cc54 <__swsetup_r>
 800cc3c:	2800      	cmp	r0, #0
 800cc3e:	d0cb      	beq.n	800cbd8 <__swbuf_r+0x28>
 800cc40:	f04f 37ff 	mov.w	r7, #4294967295
 800cc44:	e7ea      	b.n	800cc1c <__swbuf_r+0x6c>
 800cc46:	bf00      	nop
 800cc48:	0800fe00 	.word	0x0800fe00
 800cc4c:	0800fe20 	.word	0x0800fe20
 800cc50:	0800fde0 	.word	0x0800fde0

0800cc54 <__swsetup_r>:
 800cc54:	4b32      	ldr	r3, [pc, #200]	; (800cd20 <__swsetup_r+0xcc>)
 800cc56:	b570      	push	{r4, r5, r6, lr}
 800cc58:	681d      	ldr	r5, [r3, #0]
 800cc5a:	4606      	mov	r6, r0
 800cc5c:	460c      	mov	r4, r1
 800cc5e:	b125      	cbz	r5, 800cc6a <__swsetup_r+0x16>
 800cc60:	69ab      	ldr	r3, [r5, #24]
 800cc62:	b913      	cbnz	r3, 800cc6a <__swsetup_r+0x16>
 800cc64:	4628      	mov	r0, r5
 800cc66:	f000 f97d 	bl	800cf64 <__sinit>
 800cc6a:	4b2e      	ldr	r3, [pc, #184]	; (800cd24 <__swsetup_r+0xd0>)
 800cc6c:	429c      	cmp	r4, r3
 800cc6e:	d10f      	bne.n	800cc90 <__swsetup_r+0x3c>
 800cc70:	686c      	ldr	r4, [r5, #4]
 800cc72:	89a3      	ldrh	r3, [r4, #12]
 800cc74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc78:	0719      	lsls	r1, r3, #28
 800cc7a:	d42c      	bmi.n	800ccd6 <__swsetup_r+0x82>
 800cc7c:	06dd      	lsls	r5, r3, #27
 800cc7e:	d411      	bmi.n	800cca4 <__swsetup_r+0x50>
 800cc80:	2309      	movs	r3, #9
 800cc82:	6033      	str	r3, [r6, #0]
 800cc84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cc88:	81a3      	strh	r3, [r4, #12]
 800cc8a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc8e:	e03e      	b.n	800cd0e <__swsetup_r+0xba>
 800cc90:	4b25      	ldr	r3, [pc, #148]	; (800cd28 <__swsetup_r+0xd4>)
 800cc92:	429c      	cmp	r4, r3
 800cc94:	d101      	bne.n	800cc9a <__swsetup_r+0x46>
 800cc96:	68ac      	ldr	r4, [r5, #8]
 800cc98:	e7eb      	b.n	800cc72 <__swsetup_r+0x1e>
 800cc9a:	4b24      	ldr	r3, [pc, #144]	; (800cd2c <__swsetup_r+0xd8>)
 800cc9c:	429c      	cmp	r4, r3
 800cc9e:	bf08      	it	eq
 800cca0:	68ec      	ldreq	r4, [r5, #12]
 800cca2:	e7e6      	b.n	800cc72 <__swsetup_r+0x1e>
 800cca4:	0758      	lsls	r0, r3, #29
 800cca6:	d512      	bpl.n	800ccce <__swsetup_r+0x7a>
 800cca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccaa:	b141      	cbz	r1, 800ccbe <__swsetup_r+0x6a>
 800ccac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccb0:	4299      	cmp	r1, r3
 800ccb2:	d002      	beq.n	800ccba <__swsetup_r+0x66>
 800ccb4:	4630      	mov	r0, r6
 800ccb6:	f000 fa5b 	bl	800d170 <_free_r>
 800ccba:	2300      	movs	r3, #0
 800ccbc:	6363      	str	r3, [r4, #52]	; 0x34
 800ccbe:	89a3      	ldrh	r3, [r4, #12]
 800ccc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ccc4:	81a3      	strh	r3, [r4, #12]
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	6063      	str	r3, [r4, #4]
 800ccca:	6923      	ldr	r3, [r4, #16]
 800cccc:	6023      	str	r3, [r4, #0]
 800ccce:	89a3      	ldrh	r3, [r4, #12]
 800ccd0:	f043 0308 	orr.w	r3, r3, #8
 800ccd4:	81a3      	strh	r3, [r4, #12]
 800ccd6:	6923      	ldr	r3, [r4, #16]
 800ccd8:	b94b      	cbnz	r3, 800ccee <__swsetup_r+0x9a>
 800ccda:	89a3      	ldrh	r3, [r4, #12]
 800ccdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cce4:	d003      	beq.n	800ccee <__swsetup_r+0x9a>
 800cce6:	4621      	mov	r1, r4
 800cce8:	4630      	mov	r0, r6
 800ccea:	f000 fa01 	bl	800d0f0 <__smakebuf_r>
 800ccee:	89a0      	ldrh	r0, [r4, #12]
 800ccf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ccf4:	f010 0301 	ands.w	r3, r0, #1
 800ccf8:	d00a      	beq.n	800cd10 <__swsetup_r+0xbc>
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	60a3      	str	r3, [r4, #8]
 800ccfe:	6963      	ldr	r3, [r4, #20]
 800cd00:	425b      	negs	r3, r3
 800cd02:	61a3      	str	r3, [r4, #24]
 800cd04:	6923      	ldr	r3, [r4, #16]
 800cd06:	b943      	cbnz	r3, 800cd1a <__swsetup_r+0xc6>
 800cd08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cd0c:	d1ba      	bne.n	800cc84 <__swsetup_r+0x30>
 800cd0e:	bd70      	pop	{r4, r5, r6, pc}
 800cd10:	0781      	lsls	r1, r0, #30
 800cd12:	bf58      	it	pl
 800cd14:	6963      	ldrpl	r3, [r4, #20]
 800cd16:	60a3      	str	r3, [r4, #8]
 800cd18:	e7f4      	b.n	800cd04 <__swsetup_r+0xb0>
 800cd1a:	2000      	movs	r0, #0
 800cd1c:	e7f7      	b.n	800cd0e <__swsetup_r+0xba>
 800cd1e:	bf00      	nop
 800cd20:	20000034 	.word	0x20000034
 800cd24:	0800fe00 	.word	0x0800fe00
 800cd28:	0800fe20 	.word	0x0800fe20
 800cd2c:	0800fde0 	.word	0x0800fde0

0800cd30 <__sflush_r>:
 800cd30:	898a      	ldrh	r2, [r1, #12]
 800cd32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd36:	4605      	mov	r5, r0
 800cd38:	0710      	lsls	r0, r2, #28
 800cd3a:	460c      	mov	r4, r1
 800cd3c:	d458      	bmi.n	800cdf0 <__sflush_r+0xc0>
 800cd3e:	684b      	ldr	r3, [r1, #4]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	dc05      	bgt.n	800cd50 <__sflush_r+0x20>
 800cd44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	dc02      	bgt.n	800cd50 <__sflush_r+0x20>
 800cd4a:	2000      	movs	r0, #0
 800cd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd52:	2e00      	cmp	r6, #0
 800cd54:	d0f9      	beq.n	800cd4a <__sflush_r+0x1a>
 800cd56:	2300      	movs	r3, #0
 800cd58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cd5c:	682f      	ldr	r7, [r5, #0]
 800cd5e:	602b      	str	r3, [r5, #0]
 800cd60:	d032      	beq.n	800cdc8 <__sflush_r+0x98>
 800cd62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd64:	89a3      	ldrh	r3, [r4, #12]
 800cd66:	075a      	lsls	r2, r3, #29
 800cd68:	d505      	bpl.n	800cd76 <__sflush_r+0x46>
 800cd6a:	6863      	ldr	r3, [r4, #4]
 800cd6c:	1ac0      	subs	r0, r0, r3
 800cd6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd70:	b10b      	cbz	r3, 800cd76 <__sflush_r+0x46>
 800cd72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd74:	1ac0      	subs	r0, r0, r3
 800cd76:	2300      	movs	r3, #0
 800cd78:	4602      	mov	r2, r0
 800cd7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd7c:	6a21      	ldr	r1, [r4, #32]
 800cd7e:	4628      	mov	r0, r5
 800cd80:	47b0      	blx	r6
 800cd82:	1c43      	adds	r3, r0, #1
 800cd84:	89a3      	ldrh	r3, [r4, #12]
 800cd86:	d106      	bne.n	800cd96 <__sflush_r+0x66>
 800cd88:	6829      	ldr	r1, [r5, #0]
 800cd8a:	291d      	cmp	r1, #29
 800cd8c:	d82c      	bhi.n	800cde8 <__sflush_r+0xb8>
 800cd8e:	4a2a      	ldr	r2, [pc, #168]	; (800ce38 <__sflush_r+0x108>)
 800cd90:	40ca      	lsrs	r2, r1
 800cd92:	07d6      	lsls	r6, r2, #31
 800cd94:	d528      	bpl.n	800cde8 <__sflush_r+0xb8>
 800cd96:	2200      	movs	r2, #0
 800cd98:	6062      	str	r2, [r4, #4]
 800cd9a:	04d9      	lsls	r1, r3, #19
 800cd9c:	6922      	ldr	r2, [r4, #16]
 800cd9e:	6022      	str	r2, [r4, #0]
 800cda0:	d504      	bpl.n	800cdac <__sflush_r+0x7c>
 800cda2:	1c42      	adds	r2, r0, #1
 800cda4:	d101      	bne.n	800cdaa <__sflush_r+0x7a>
 800cda6:	682b      	ldr	r3, [r5, #0]
 800cda8:	b903      	cbnz	r3, 800cdac <__sflush_r+0x7c>
 800cdaa:	6560      	str	r0, [r4, #84]	; 0x54
 800cdac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdae:	602f      	str	r7, [r5, #0]
 800cdb0:	2900      	cmp	r1, #0
 800cdb2:	d0ca      	beq.n	800cd4a <__sflush_r+0x1a>
 800cdb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cdb8:	4299      	cmp	r1, r3
 800cdba:	d002      	beq.n	800cdc2 <__sflush_r+0x92>
 800cdbc:	4628      	mov	r0, r5
 800cdbe:	f000 f9d7 	bl	800d170 <_free_r>
 800cdc2:	2000      	movs	r0, #0
 800cdc4:	6360      	str	r0, [r4, #52]	; 0x34
 800cdc6:	e7c1      	b.n	800cd4c <__sflush_r+0x1c>
 800cdc8:	6a21      	ldr	r1, [r4, #32]
 800cdca:	2301      	movs	r3, #1
 800cdcc:	4628      	mov	r0, r5
 800cdce:	47b0      	blx	r6
 800cdd0:	1c41      	adds	r1, r0, #1
 800cdd2:	d1c7      	bne.n	800cd64 <__sflush_r+0x34>
 800cdd4:	682b      	ldr	r3, [r5, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d0c4      	beq.n	800cd64 <__sflush_r+0x34>
 800cdda:	2b1d      	cmp	r3, #29
 800cddc:	d001      	beq.n	800cde2 <__sflush_r+0xb2>
 800cdde:	2b16      	cmp	r3, #22
 800cde0:	d101      	bne.n	800cde6 <__sflush_r+0xb6>
 800cde2:	602f      	str	r7, [r5, #0]
 800cde4:	e7b1      	b.n	800cd4a <__sflush_r+0x1a>
 800cde6:	89a3      	ldrh	r3, [r4, #12]
 800cde8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdec:	81a3      	strh	r3, [r4, #12]
 800cdee:	e7ad      	b.n	800cd4c <__sflush_r+0x1c>
 800cdf0:	690f      	ldr	r7, [r1, #16]
 800cdf2:	2f00      	cmp	r7, #0
 800cdf4:	d0a9      	beq.n	800cd4a <__sflush_r+0x1a>
 800cdf6:	0793      	lsls	r3, r2, #30
 800cdf8:	680e      	ldr	r6, [r1, #0]
 800cdfa:	bf08      	it	eq
 800cdfc:	694b      	ldreq	r3, [r1, #20]
 800cdfe:	600f      	str	r7, [r1, #0]
 800ce00:	bf18      	it	ne
 800ce02:	2300      	movne	r3, #0
 800ce04:	eba6 0807 	sub.w	r8, r6, r7
 800ce08:	608b      	str	r3, [r1, #8]
 800ce0a:	f1b8 0f00 	cmp.w	r8, #0
 800ce0e:	dd9c      	ble.n	800cd4a <__sflush_r+0x1a>
 800ce10:	6a21      	ldr	r1, [r4, #32]
 800ce12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ce14:	4643      	mov	r3, r8
 800ce16:	463a      	mov	r2, r7
 800ce18:	4628      	mov	r0, r5
 800ce1a:	47b0      	blx	r6
 800ce1c:	2800      	cmp	r0, #0
 800ce1e:	dc06      	bgt.n	800ce2e <__sflush_r+0xfe>
 800ce20:	89a3      	ldrh	r3, [r4, #12]
 800ce22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce26:	81a3      	strh	r3, [r4, #12]
 800ce28:	f04f 30ff 	mov.w	r0, #4294967295
 800ce2c:	e78e      	b.n	800cd4c <__sflush_r+0x1c>
 800ce2e:	4407      	add	r7, r0
 800ce30:	eba8 0800 	sub.w	r8, r8, r0
 800ce34:	e7e9      	b.n	800ce0a <__sflush_r+0xda>
 800ce36:	bf00      	nop
 800ce38:	20400001 	.word	0x20400001

0800ce3c <_fflush_r>:
 800ce3c:	b538      	push	{r3, r4, r5, lr}
 800ce3e:	690b      	ldr	r3, [r1, #16]
 800ce40:	4605      	mov	r5, r0
 800ce42:	460c      	mov	r4, r1
 800ce44:	b913      	cbnz	r3, 800ce4c <_fflush_r+0x10>
 800ce46:	2500      	movs	r5, #0
 800ce48:	4628      	mov	r0, r5
 800ce4a:	bd38      	pop	{r3, r4, r5, pc}
 800ce4c:	b118      	cbz	r0, 800ce56 <_fflush_r+0x1a>
 800ce4e:	6983      	ldr	r3, [r0, #24]
 800ce50:	b90b      	cbnz	r3, 800ce56 <_fflush_r+0x1a>
 800ce52:	f000 f887 	bl	800cf64 <__sinit>
 800ce56:	4b14      	ldr	r3, [pc, #80]	; (800cea8 <_fflush_r+0x6c>)
 800ce58:	429c      	cmp	r4, r3
 800ce5a:	d11b      	bne.n	800ce94 <_fflush_r+0x58>
 800ce5c:	686c      	ldr	r4, [r5, #4]
 800ce5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d0ef      	beq.n	800ce46 <_fflush_r+0xa>
 800ce66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ce68:	07d0      	lsls	r0, r2, #31
 800ce6a:	d404      	bmi.n	800ce76 <_fflush_r+0x3a>
 800ce6c:	0599      	lsls	r1, r3, #22
 800ce6e:	d402      	bmi.n	800ce76 <_fflush_r+0x3a>
 800ce70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce72:	f000 f915 	bl	800d0a0 <__retarget_lock_acquire_recursive>
 800ce76:	4628      	mov	r0, r5
 800ce78:	4621      	mov	r1, r4
 800ce7a:	f7ff ff59 	bl	800cd30 <__sflush_r>
 800ce7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce80:	07da      	lsls	r2, r3, #31
 800ce82:	4605      	mov	r5, r0
 800ce84:	d4e0      	bmi.n	800ce48 <_fflush_r+0xc>
 800ce86:	89a3      	ldrh	r3, [r4, #12]
 800ce88:	059b      	lsls	r3, r3, #22
 800ce8a:	d4dd      	bmi.n	800ce48 <_fflush_r+0xc>
 800ce8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce8e:	f000 f908 	bl	800d0a2 <__retarget_lock_release_recursive>
 800ce92:	e7d9      	b.n	800ce48 <_fflush_r+0xc>
 800ce94:	4b05      	ldr	r3, [pc, #20]	; (800ceac <_fflush_r+0x70>)
 800ce96:	429c      	cmp	r4, r3
 800ce98:	d101      	bne.n	800ce9e <_fflush_r+0x62>
 800ce9a:	68ac      	ldr	r4, [r5, #8]
 800ce9c:	e7df      	b.n	800ce5e <_fflush_r+0x22>
 800ce9e:	4b04      	ldr	r3, [pc, #16]	; (800ceb0 <_fflush_r+0x74>)
 800cea0:	429c      	cmp	r4, r3
 800cea2:	bf08      	it	eq
 800cea4:	68ec      	ldreq	r4, [r5, #12]
 800cea6:	e7da      	b.n	800ce5e <_fflush_r+0x22>
 800cea8:	0800fe00 	.word	0x0800fe00
 800ceac:	0800fe20 	.word	0x0800fe20
 800ceb0:	0800fde0 	.word	0x0800fde0

0800ceb4 <std>:
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	b510      	push	{r4, lr}
 800ceb8:	4604      	mov	r4, r0
 800ceba:	e9c0 3300 	strd	r3, r3, [r0]
 800cebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cec2:	6083      	str	r3, [r0, #8]
 800cec4:	8181      	strh	r1, [r0, #12]
 800cec6:	6643      	str	r3, [r0, #100]	; 0x64
 800cec8:	81c2      	strh	r2, [r0, #14]
 800ceca:	6183      	str	r3, [r0, #24]
 800cecc:	4619      	mov	r1, r3
 800cece:	2208      	movs	r2, #8
 800ced0:	305c      	adds	r0, #92	; 0x5c
 800ced2:	f7ff fd85 	bl	800c9e0 <memset>
 800ced6:	4b05      	ldr	r3, [pc, #20]	; (800ceec <std+0x38>)
 800ced8:	6263      	str	r3, [r4, #36]	; 0x24
 800ceda:	4b05      	ldr	r3, [pc, #20]	; (800cef0 <std+0x3c>)
 800cedc:	62a3      	str	r3, [r4, #40]	; 0x28
 800cede:	4b05      	ldr	r3, [pc, #20]	; (800cef4 <std+0x40>)
 800cee0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cee2:	4b05      	ldr	r3, [pc, #20]	; (800cef8 <std+0x44>)
 800cee4:	6224      	str	r4, [r4, #32]
 800cee6:	6323      	str	r3, [r4, #48]	; 0x30
 800cee8:	bd10      	pop	{r4, pc}
 800ceea:	bf00      	nop
 800ceec:	0800dc75 	.word	0x0800dc75
 800cef0:	0800dc97 	.word	0x0800dc97
 800cef4:	0800dccf 	.word	0x0800dccf
 800cef8:	0800dcf3 	.word	0x0800dcf3

0800cefc <_cleanup_r>:
 800cefc:	4901      	ldr	r1, [pc, #4]	; (800cf04 <_cleanup_r+0x8>)
 800cefe:	f000 b8af 	b.w	800d060 <_fwalk_reent>
 800cf02:	bf00      	nop
 800cf04:	0800ce3d 	.word	0x0800ce3d

0800cf08 <__sfmoreglue>:
 800cf08:	b570      	push	{r4, r5, r6, lr}
 800cf0a:	2268      	movs	r2, #104	; 0x68
 800cf0c:	1e4d      	subs	r5, r1, #1
 800cf0e:	4355      	muls	r5, r2
 800cf10:	460e      	mov	r6, r1
 800cf12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cf16:	f000 f997 	bl	800d248 <_malloc_r>
 800cf1a:	4604      	mov	r4, r0
 800cf1c:	b140      	cbz	r0, 800cf30 <__sfmoreglue+0x28>
 800cf1e:	2100      	movs	r1, #0
 800cf20:	e9c0 1600 	strd	r1, r6, [r0]
 800cf24:	300c      	adds	r0, #12
 800cf26:	60a0      	str	r0, [r4, #8]
 800cf28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cf2c:	f7ff fd58 	bl	800c9e0 <memset>
 800cf30:	4620      	mov	r0, r4
 800cf32:	bd70      	pop	{r4, r5, r6, pc}

0800cf34 <__sfp_lock_acquire>:
 800cf34:	4801      	ldr	r0, [pc, #4]	; (800cf3c <__sfp_lock_acquire+0x8>)
 800cf36:	f000 b8b3 	b.w	800d0a0 <__retarget_lock_acquire_recursive>
 800cf3a:	bf00      	nop
 800cf3c:	200016e5 	.word	0x200016e5

0800cf40 <__sfp_lock_release>:
 800cf40:	4801      	ldr	r0, [pc, #4]	; (800cf48 <__sfp_lock_release+0x8>)
 800cf42:	f000 b8ae 	b.w	800d0a2 <__retarget_lock_release_recursive>
 800cf46:	bf00      	nop
 800cf48:	200016e5 	.word	0x200016e5

0800cf4c <__sinit_lock_acquire>:
 800cf4c:	4801      	ldr	r0, [pc, #4]	; (800cf54 <__sinit_lock_acquire+0x8>)
 800cf4e:	f000 b8a7 	b.w	800d0a0 <__retarget_lock_acquire_recursive>
 800cf52:	bf00      	nop
 800cf54:	200016e6 	.word	0x200016e6

0800cf58 <__sinit_lock_release>:
 800cf58:	4801      	ldr	r0, [pc, #4]	; (800cf60 <__sinit_lock_release+0x8>)
 800cf5a:	f000 b8a2 	b.w	800d0a2 <__retarget_lock_release_recursive>
 800cf5e:	bf00      	nop
 800cf60:	200016e6 	.word	0x200016e6

0800cf64 <__sinit>:
 800cf64:	b510      	push	{r4, lr}
 800cf66:	4604      	mov	r4, r0
 800cf68:	f7ff fff0 	bl	800cf4c <__sinit_lock_acquire>
 800cf6c:	69a3      	ldr	r3, [r4, #24]
 800cf6e:	b11b      	cbz	r3, 800cf78 <__sinit+0x14>
 800cf70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf74:	f7ff bff0 	b.w	800cf58 <__sinit_lock_release>
 800cf78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cf7c:	6523      	str	r3, [r4, #80]	; 0x50
 800cf7e:	4b13      	ldr	r3, [pc, #76]	; (800cfcc <__sinit+0x68>)
 800cf80:	4a13      	ldr	r2, [pc, #76]	; (800cfd0 <__sinit+0x6c>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	62a2      	str	r2, [r4, #40]	; 0x28
 800cf86:	42a3      	cmp	r3, r4
 800cf88:	bf04      	itt	eq
 800cf8a:	2301      	moveq	r3, #1
 800cf8c:	61a3      	streq	r3, [r4, #24]
 800cf8e:	4620      	mov	r0, r4
 800cf90:	f000 f820 	bl	800cfd4 <__sfp>
 800cf94:	6060      	str	r0, [r4, #4]
 800cf96:	4620      	mov	r0, r4
 800cf98:	f000 f81c 	bl	800cfd4 <__sfp>
 800cf9c:	60a0      	str	r0, [r4, #8]
 800cf9e:	4620      	mov	r0, r4
 800cfa0:	f000 f818 	bl	800cfd4 <__sfp>
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	60e0      	str	r0, [r4, #12]
 800cfa8:	2104      	movs	r1, #4
 800cfaa:	6860      	ldr	r0, [r4, #4]
 800cfac:	f7ff ff82 	bl	800ceb4 <std>
 800cfb0:	68a0      	ldr	r0, [r4, #8]
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	2109      	movs	r1, #9
 800cfb6:	f7ff ff7d 	bl	800ceb4 <std>
 800cfba:	68e0      	ldr	r0, [r4, #12]
 800cfbc:	2202      	movs	r2, #2
 800cfbe:	2112      	movs	r1, #18
 800cfc0:	f7ff ff78 	bl	800ceb4 <std>
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	61a3      	str	r3, [r4, #24]
 800cfc8:	e7d2      	b.n	800cf70 <__sinit+0xc>
 800cfca:	bf00      	nop
 800cfcc:	0800fddc 	.word	0x0800fddc
 800cfd0:	0800cefd 	.word	0x0800cefd

0800cfd4 <__sfp>:
 800cfd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfd6:	4607      	mov	r7, r0
 800cfd8:	f7ff ffac 	bl	800cf34 <__sfp_lock_acquire>
 800cfdc:	4b1e      	ldr	r3, [pc, #120]	; (800d058 <__sfp+0x84>)
 800cfde:	681e      	ldr	r6, [r3, #0]
 800cfe0:	69b3      	ldr	r3, [r6, #24]
 800cfe2:	b913      	cbnz	r3, 800cfea <__sfp+0x16>
 800cfe4:	4630      	mov	r0, r6
 800cfe6:	f7ff ffbd 	bl	800cf64 <__sinit>
 800cfea:	3648      	adds	r6, #72	; 0x48
 800cfec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cff0:	3b01      	subs	r3, #1
 800cff2:	d503      	bpl.n	800cffc <__sfp+0x28>
 800cff4:	6833      	ldr	r3, [r6, #0]
 800cff6:	b30b      	cbz	r3, 800d03c <__sfp+0x68>
 800cff8:	6836      	ldr	r6, [r6, #0]
 800cffa:	e7f7      	b.n	800cfec <__sfp+0x18>
 800cffc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d000:	b9d5      	cbnz	r5, 800d038 <__sfp+0x64>
 800d002:	4b16      	ldr	r3, [pc, #88]	; (800d05c <__sfp+0x88>)
 800d004:	60e3      	str	r3, [r4, #12]
 800d006:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d00a:	6665      	str	r5, [r4, #100]	; 0x64
 800d00c:	f000 f847 	bl	800d09e <__retarget_lock_init_recursive>
 800d010:	f7ff ff96 	bl	800cf40 <__sfp_lock_release>
 800d014:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d018:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d01c:	6025      	str	r5, [r4, #0]
 800d01e:	61a5      	str	r5, [r4, #24]
 800d020:	2208      	movs	r2, #8
 800d022:	4629      	mov	r1, r5
 800d024:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d028:	f7ff fcda 	bl	800c9e0 <memset>
 800d02c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d030:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d034:	4620      	mov	r0, r4
 800d036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d038:	3468      	adds	r4, #104	; 0x68
 800d03a:	e7d9      	b.n	800cff0 <__sfp+0x1c>
 800d03c:	2104      	movs	r1, #4
 800d03e:	4638      	mov	r0, r7
 800d040:	f7ff ff62 	bl	800cf08 <__sfmoreglue>
 800d044:	4604      	mov	r4, r0
 800d046:	6030      	str	r0, [r6, #0]
 800d048:	2800      	cmp	r0, #0
 800d04a:	d1d5      	bne.n	800cff8 <__sfp+0x24>
 800d04c:	f7ff ff78 	bl	800cf40 <__sfp_lock_release>
 800d050:	230c      	movs	r3, #12
 800d052:	603b      	str	r3, [r7, #0]
 800d054:	e7ee      	b.n	800d034 <__sfp+0x60>
 800d056:	bf00      	nop
 800d058:	0800fddc 	.word	0x0800fddc
 800d05c:	ffff0001 	.word	0xffff0001

0800d060 <_fwalk_reent>:
 800d060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d064:	4606      	mov	r6, r0
 800d066:	4688      	mov	r8, r1
 800d068:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d06c:	2700      	movs	r7, #0
 800d06e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d072:	f1b9 0901 	subs.w	r9, r9, #1
 800d076:	d505      	bpl.n	800d084 <_fwalk_reent+0x24>
 800d078:	6824      	ldr	r4, [r4, #0]
 800d07a:	2c00      	cmp	r4, #0
 800d07c:	d1f7      	bne.n	800d06e <_fwalk_reent+0xe>
 800d07e:	4638      	mov	r0, r7
 800d080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d084:	89ab      	ldrh	r3, [r5, #12]
 800d086:	2b01      	cmp	r3, #1
 800d088:	d907      	bls.n	800d09a <_fwalk_reent+0x3a>
 800d08a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d08e:	3301      	adds	r3, #1
 800d090:	d003      	beq.n	800d09a <_fwalk_reent+0x3a>
 800d092:	4629      	mov	r1, r5
 800d094:	4630      	mov	r0, r6
 800d096:	47c0      	blx	r8
 800d098:	4307      	orrs	r7, r0
 800d09a:	3568      	adds	r5, #104	; 0x68
 800d09c:	e7e9      	b.n	800d072 <_fwalk_reent+0x12>

0800d09e <__retarget_lock_init_recursive>:
 800d09e:	4770      	bx	lr

0800d0a0 <__retarget_lock_acquire_recursive>:
 800d0a0:	4770      	bx	lr

0800d0a2 <__retarget_lock_release_recursive>:
 800d0a2:	4770      	bx	lr

0800d0a4 <__swhatbuf_r>:
 800d0a4:	b570      	push	{r4, r5, r6, lr}
 800d0a6:	460e      	mov	r6, r1
 800d0a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0ac:	2900      	cmp	r1, #0
 800d0ae:	b096      	sub	sp, #88	; 0x58
 800d0b0:	4614      	mov	r4, r2
 800d0b2:	461d      	mov	r5, r3
 800d0b4:	da08      	bge.n	800d0c8 <__swhatbuf_r+0x24>
 800d0b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	602a      	str	r2, [r5, #0]
 800d0be:	061a      	lsls	r2, r3, #24
 800d0c0:	d410      	bmi.n	800d0e4 <__swhatbuf_r+0x40>
 800d0c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0c6:	e00e      	b.n	800d0e6 <__swhatbuf_r+0x42>
 800d0c8:	466a      	mov	r2, sp
 800d0ca:	f000 fe45 	bl	800dd58 <_fstat_r>
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	dbf1      	blt.n	800d0b6 <__swhatbuf_r+0x12>
 800d0d2:	9a01      	ldr	r2, [sp, #4]
 800d0d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d0d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d0dc:	425a      	negs	r2, r3
 800d0de:	415a      	adcs	r2, r3
 800d0e0:	602a      	str	r2, [r5, #0]
 800d0e2:	e7ee      	b.n	800d0c2 <__swhatbuf_r+0x1e>
 800d0e4:	2340      	movs	r3, #64	; 0x40
 800d0e6:	2000      	movs	r0, #0
 800d0e8:	6023      	str	r3, [r4, #0]
 800d0ea:	b016      	add	sp, #88	; 0x58
 800d0ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d0f0 <__smakebuf_r>:
 800d0f0:	898b      	ldrh	r3, [r1, #12]
 800d0f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d0f4:	079d      	lsls	r5, r3, #30
 800d0f6:	4606      	mov	r6, r0
 800d0f8:	460c      	mov	r4, r1
 800d0fa:	d507      	bpl.n	800d10c <__smakebuf_r+0x1c>
 800d0fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d100:	6023      	str	r3, [r4, #0]
 800d102:	6123      	str	r3, [r4, #16]
 800d104:	2301      	movs	r3, #1
 800d106:	6163      	str	r3, [r4, #20]
 800d108:	b002      	add	sp, #8
 800d10a:	bd70      	pop	{r4, r5, r6, pc}
 800d10c:	ab01      	add	r3, sp, #4
 800d10e:	466a      	mov	r2, sp
 800d110:	f7ff ffc8 	bl	800d0a4 <__swhatbuf_r>
 800d114:	9900      	ldr	r1, [sp, #0]
 800d116:	4605      	mov	r5, r0
 800d118:	4630      	mov	r0, r6
 800d11a:	f000 f895 	bl	800d248 <_malloc_r>
 800d11e:	b948      	cbnz	r0, 800d134 <__smakebuf_r+0x44>
 800d120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d124:	059a      	lsls	r2, r3, #22
 800d126:	d4ef      	bmi.n	800d108 <__smakebuf_r+0x18>
 800d128:	f023 0303 	bic.w	r3, r3, #3
 800d12c:	f043 0302 	orr.w	r3, r3, #2
 800d130:	81a3      	strh	r3, [r4, #12]
 800d132:	e7e3      	b.n	800d0fc <__smakebuf_r+0xc>
 800d134:	4b0d      	ldr	r3, [pc, #52]	; (800d16c <__smakebuf_r+0x7c>)
 800d136:	62b3      	str	r3, [r6, #40]	; 0x28
 800d138:	89a3      	ldrh	r3, [r4, #12]
 800d13a:	6020      	str	r0, [r4, #0]
 800d13c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d140:	81a3      	strh	r3, [r4, #12]
 800d142:	9b00      	ldr	r3, [sp, #0]
 800d144:	6163      	str	r3, [r4, #20]
 800d146:	9b01      	ldr	r3, [sp, #4]
 800d148:	6120      	str	r0, [r4, #16]
 800d14a:	b15b      	cbz	r3, 800d164 <__smakebuf_r+0x74>
 800d14c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d150:	4630      	mov	r0, r6
 800d152:	f000 fe13 	bl	800dd7c <_isatty_r>
 800d156:	b128      	cbz	r0, 800d164 <__smakebuf_r+0x74>
 800d158:	89a3      	ldrh	r3, [r4, #12]
 800d15a:	f023 0303 	bic.w	r3, r3, #3
 800d15e:	f043 0301 	orr.w	r3, r3, #1
 800d162:	81a3      	strh	r3, [r4, #12]
 800d164:	89a0      	ldrh	r0, [r4, #12]
 800d166:	4305      	orrs	r5, r0
 800d168:	81a5      	strh	r5, [r4, #12]
 800d16a:	e7cd      	b.n	800d108 <__smakebuf_r+0x18>
 800d16c:	0800cefd 	.word	0x0800cefd

0800d170 <_free_r>:
 800d170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d172:	2900      	cmp	r1, #0
 800d174:	d044      	beq.n	800d200 <_free_r+0x90>
 800d176:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d17a:	9001      	str	r0, [sp, #4]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	f1a1 0404 	sub.w	r4, r1, #4
 800d182:	bfb8      	it	lt
 800d184:	18e4      	addlt	r4, r4, r3
 800d186:	f000 fe35 	bl	800ddf4 <__malloc_lock>
 800d18a:	4a1e      	ldr	r2, [pc, #120]	; (800d204 <_free_r+0x94>)
 800d18c:	9801      	ldr	r0, [sp, #4]
 800d18e:	6813      	ldr	r3, [r2, #0]
 800d190:	b933      	cbnz	r3, 800d1a0 <_free_r+0x30>
 800d192:	6063      	str	r3, [r4, #4]
 800d194:	6014      	str	r4, [r2, #0]
 800d196:	b003      	add	sp, #12
 800d198:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d19c:	f000 be30 	b.w	800de00 <__malloc_unlock>
 800d1a0:	42a3      	cmp	r3, r4
 800d1a2:	d908      	bls.n	800d1b6 <_free_r+0x46>
 800d1a4:	6825      	ldr	r5, [r4, #0]
 800d1a6:	1961      	adds	r1, r4, r5
 800d1a8:	428b      	cmp	r3, r1
 800d1aa:	bf01      	itttt	eq
 800d1ac:	6819      	ldreq	r1, [r3, #0]
 800d1ae:	685b      	ldreq	r3, [r3, #4]
 800d1b0:	1949      	addeq	r1, r1, r5
 800d1b2:	6021      	streq	r1, [r4, #0]
 800d1b4:	e7ed      	b.n	800d192 <_free_r+0x22>
 800d1b6:	461a      	mov	r2, r3
 800d1b8:	685b      	ldr	r3, [r3, #4]
 800d1ba:	b10b      	cbz	r3, 800d1c0 <_free_r+0x50>
 800d1bc:	42a3      	cmp	r3, r4
 800d1be:	d9fa      	bls.n	800d1b6 <_free_r+0x46>
 800d1c0:	6811      	ldr	r1, [r2, #0]
 800d1c2:	1855      	adds	r5, r2, r1
 800d1c4:	42a5      	cmp	r5, r4
 800d1c6:	d10b      	bne.n	800d1e0 <_free_r+0x70>
 800d1c8:	6824      	ldr	r4, [r4, #0]
 800d1ca:	4421      	add	r1, r4
 800d1cc:	1854      	adds	r4, r2, r1
 800d1ce:	42a3      	cmp	r3, r4
 800d1d0:	6011      	str	r1, [r2, #0]
 800d1d2:	d1e0      	bne.n	800d196 <_free_r+0x26>
 800d1d4:	681c      	ldr	r4, [r3, #0]
 800d1d6:	685b      	ldr	r3, [r3, #4]
 800d1d8:	6053      	str	r3, [r2, #4]
 800d1da:	4421      	add	r1, r4
 800d1dc:	6011      	str	r1, [r2, #0]
 800d1de:	e7da      	b.n	800d196 <_free_r+0x26>
 800d1e0:	d902      	bls.n	800d1e8 <_free_r+0x78>
 800d1e2:	230c      	movs	r3, #12
 800d1e4:	6003      	str	r3, [r0, #0]
 800d1e6:	e7d6      	b.n	800d196 <_free_r+0x26>
 800d1e8:	6825      	ldr	r5, [r4, #0]
 800d1ea:	1961      	adds	r1, r4, r5
 800d1ec:	428b      	cmp	r3, r1
 800d1ee:	bf04      	itt	eq
 800d1f0:	6819      	ldreq	r1, [r3, #0]
 800d1f2:	685b      	ldreq	r3, [r3, #4]
 800d1f4:	6063      	str	r3, [r4, #4]
 800d1f6:	bf04      	itt	eq
 800d1f8:	1949      	addeq	r1, r1, r5
 800d1fa:	6021      	streq	r1, [r4, #0]
 800d1fc:	6054      	str	r4, [r2, #4]
 800d1fe:	e7ca      	b.n	800d196 <_free_r+0x26>
 800d200:	b003      	add	sp, #12
 800d202:	bd30      	pop	{r4, r5, pc}
 800d204:	200016e8 	.word	0x200016e8

0800d208 <sbrk_aligned>:
 800d208:	b570      	push	{r4, r5, r6, lr}
 800d20a:	4e0e      	ldr	r6, [pc, #56]	; (800d244 <sbrk_aligned+0x3c>)
 800d20c:	460c      	mov	r4, r1
 800d20e:	6831      	ldr	r1, [r6, #0]
 800d210:	4605      	mov	r5, r0
 800d212:	b911      	cbnz	r1, 800d21a <sbrk_aligned+0x12>
 800d214:	f000 fd1e 	bl	800dc54 <_sbrk_r>
 800d218:	6030      	str	r0, [r6, #0]
 800d21a:	4621      	mov	r1, r4
 800d21c:	4628      	mov	r0, r5
 800d21e:	f000 fd19 	bl	800dc54 <_sbrk_r>
 800d222:	1c43      	adds	r3, r0, #1
 800d224:	d00a      	beq.n	800d23c <sbrk_aligned+0x34>
 800d226:	1cc4      	adds	r4, r0, #3
 800d228:	f024 0403 	bic.w	r4, r4, #3
 800d22c:	42a0      	cmp	r0, r4
 800d22e:	d007      	beq.n	800d240 <sbrk_aligned+0x38>
 800d230:	1a21      	subs	r1, r4, r0
 800d232:	4628      	mov	r0, r5
 800d234:	f000 fd0e 	bl	800dc54 <_sbrk_r>
 800d238:	3001      	adds	r0, #1
 800d23a:	d101      	bne.n	800d240 <sbrk_aligned+0x38>
 800d23c:	f04f 34ff 	mov.w	r4, #4294967295
 800d240:	4620      	mov	r0, r4
 800d242:	bd70      	pop	{r4, r5, r6, pc}
 800d244:	200016ec 	.word	0x200016ec

0800d248 <_malloc_r>:
 800d248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d24c:	1ccd      	adds	r5, r1, #3
 800d24e:	f025 0503 	bic.w	r5, r5, #3
 800d252:	3508      	adds	r5, #8
 800d254:	2d0c      	cmp	r5, #12
 800d256:	bf38      	it	cc
 800d258:	250c      	movcc	r5, #12
 800d25a:	2d00      	cmp	r5, #0
 800d25c:	4607      	mov	r7, r0
 800d25e:	db01      	blt.n	800d264 <_malloc_r+0x1c>
 800d260:	42a9      	cmp	r1, r5
 800d262:	d905      	bls.n	800d270 <_malloc_r+0x28>
 800d264:	230c      	movs	r3, #12
 800d266:	603b      	str	r3, [r7, #0]
 800d268:	2600      	movs	r6, #0
 800d26a:	4630      	mov	r0, r6
 800d26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d270:	4e2e      	ldr	r6, [pc, #184]	; (800d32c <_malloc_r+0xe4>)
 800d272:	f000 fdbf 	bl	800ddf4 <__malloc_lock>
 800d276:	6833      	ldr	r3, [r6, #0]
 800d278:	461c      	mov	r4, r3
 800d27a:	bb34      	cbnz	r4, 800d2ca <_malloc_r+0x82>
 800d27c:	4629      	mov	r1, r5
 800d27e:	4638      	mov	r0, r7
 800d280:	f7ff ffc2 	bl	800d208 <sbrk_aligned>
 800d284:	1c43      	adds	r3, r0, #1
 800d286:	4604      	mov	r4, r0
 800d288:	d14d      	bne.n	800d326 <_malloc_r+0xde>
 800d28a:	6834      	ldr	r4, [r6, #0]
 800d28c:	4626      	mov	r6, r4
 800d28e:	2e00      	cmp	r6, #0
 800d290:	d140      	bne.n	800d314 <_malloc_r+0xcc>
 800d292:	6823      	ldr	r3, [r4, #0]
 800d294:	4631      	mov	r1, r6
 800d296:	4638      	mov	r0, r7
 800d298:	eb04 0803 	add.w	r8, r4, r3
 800d29c:	f000 fcda 	bl	800dc54 <_sbrk_r>
 800d2a0:	4580      	cmp	r8, r0
 800d2a2:	d13a      	bne.n	800d31a <_malloc_r+0xd2>
 800d2a4:	6821      	ldr	r1, [r4, #0]
 800d2a6:	3503      	adds	r5, #3
 800d2a8:	1a6d      	subs	r5, r5, r1
 800d2aa:	f025 0503 	bic.w	r5, r5, #3
 800d2ae:	3508      	adds	r5, #8
 800d2b0:	2d0c      	cmp	r5, #12
 800d2b2:	bf38      	it	cc
 800d2b4:	250c      	movcc	r5, #12
 800d2b6:	4629      	mov	r1, r5
 800d2b8:	4638      	mov	r0, r7
 800d2ba:	f7ff ffa5 	bl	800d208 <sbrk_aligned>
 800d2be:	3001      	adds	r0, #1
 800d2c0:	d02b      	beq.n	800d31a <_malloc_r+0xd2>
 800d2c2:	6823      	ldr	r3, [r4, #0]
 800d2c4:	442b      	add	r3, r5
 800d2c6:	6023      	str	r3, [r4, #0]
 800d2c8:	e00e      	b.n	800d2e8 <_malloc_r+0xa0>
 800d2ca:	6822      	ldr	r2, [r4, #0]
 800d2cc:	1b52      	subs	r2, r2, r5
 800d2ce:	d41e      	bmi.n	800d30e <_malloc_r+0xc6>
 800d2d0:	2a0b      	cmp	r2, #11
 800d2d2:	d916      	bls.n	800d302 <_malloc_r+0xba>
 800d2d4:	1961      	adds	r1, r4, r5
 800d2d6:	42a3      	cmp	r3, r4
 800d2d8:	6025      	str	r5, [r4, #0]
 800d2da:	bf18      	it	ne
 800d2dc:	6059      	strne	r1, [r3, #4]
 800d2de:	6863      	ldr	r3, [r4, #4]
 800d2e0:	bf08      	it	eq
 800d2e2:	6031      	streq	r1, [r6, #0]
 800d2e4:	5162      	str	r2, [r4, r5]
 800d2e6:	604b      	str	r3, [r1, #4]
 800d2e8:	4638      	mov	r0, r7
 800d2ea:	f104 060b 	add.w	r6, r4, #11
 800d2ee:	f000 fd87 	bl	800de00 <__malloc_unlock>
 800d2f2:	f026 0607 	bic.w	r6, r6, #7
 800d2f6:	1d23      	adds	r3, r4, #4
 800d2f8:	1af2      	subs	r2, r6, r3
 800d2fa:	d0b6      	beq.n	800d26a <_malloc_r+0x22>
 800d2fc:	1b9b      	subs	r3, r3, r6
 800d2fe:	50a3      	str	r3, [r4, r2]
 800d300:	e7b3      	b.n	800d26a <_malloc_r+0x22>
 800d302:	6862      	ldr	r2, [r4, #4]
 800d304:	42a3      	cmp	r3, r4
 800d306:	bf0c      	ite	eq
 800d308:	6032      	streq	r2, [r6, #0]
 800d30a:	605a      	strne	r2, [r3, #4]
 800d30c:	e7ec      	b.n	800d2e8 <_malloc_r+0xa0>
 800d30e:	4623      	mov	r3, r4
 800d310:	6864      	ldr	r4, [r4, #4]
 800d312:	e7b2      	b.n	800d27a <_malloc_r+0x32>
 800d314:	4634      	mov	r4, r6
 800d316:	6876      	ldr	r6, [r6, #4]
 800d318:	e7b9      	b.n	800d28e <_malloc_r+0x46>
 800d31a:	230c      	movs	r3, #12
 800d31c:	603b      	str	r3, [r7, #0]
 800d31e:	4638      	mov	r0, r7
 800d320:	f000 fd6e 	bl	800de00 <__malloc_unlock>
 800d324:	e7a1      	b.n	800d26a <_malloc_r+0x22>
 800d326:	6025      	str	r5, [r4, #0]
 800d328:	e7de      	b.n	800d2e8 <_malloc_r+0xa0>
 800d32a:	bf00      	nop
 800d32c:	200016e8 	.word	0x200016e8

0800d330 <__ssputs_r>:
 800d330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d334:	688e      	ldr	r6, [r1, #8]
 800d336:	429e      	cmp	r6, r3
 800d338:	4682      	mov	sl, r0
 800d33a:	460c      	mov	r4, r1
 800d33c:	4690      	mov	r8, r2
 800d33e:	461f      	mov	r7, r3
 800d340:	d838      	bhi.n	800d3b4 <__ssputs_r+0x84>
 800d342:	898a      	ldrh	r2, [r1, #12]
 800d344:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d348:	d032      	beq.n	800d3b0 <__ssputs_r+0x80>
 800d34a:	6825      	ldr	r5, [r4, #0]
 800d34c:	6909      	ldr	r1, [r1, #16]
 800d34e:	eba5 0901 	sub.w	r9, r5, r1
 800d352:	6965      	ldr	r5, [r4, #20]
 800d354:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d358:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d35c:	3301      	adds	r3, #1
 800d35e:	444b      	add	r3, r9
 800d360:	106d      	asrs	r5, r5, #1
 800d362:	429d      	cmp	r5, r3
 800d364:	bf38      	it	cc
 800d366:	461d      	movcc	r5, r3
 800d368:	0553      	lsls	r3, r2, #21
 800d36a:	d531      	bpl.n	800d3d0 <__ssputs_r+0xa0>
 800d36c:	4629      	mov	r1, r5
 800d36e:	f7ff ff6b 	bl	800d248 <_malloc_r>
 800d372:	4606      	mov	r6, r0
 800d374:	b950      	cbnz	r0, 800d38c <__ssputs_r+0x5c>
 800d376:	230c      	movs	r3, #12
 800d378:	f8ca 3000 	str.w	r3, [sl]
 800d37c:	89a3      	ldrh	r3, [r4, #12]
 800d37e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d382:	81a3      	strh	r3, [r4, #12]
 800d384:	f04f 30ff 	mov.w	r0, #4294967295
 800d388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d38c:	6921      	ldr	r1, [r4, #16]
 800d38e:	464a      	mov	r2, r9
 800d390:	f7ff fb18 	bl	800c9c4 <memcpy>
 800d394:	89a3      	ldrh	r3, [r4, #12]
 800d396:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d39a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d39e:	81a3      	strh	r3, [r4, #12]
 800d3a0:	6126      	str	r6, [r4, #16]
 800d3a2:	6165      	str	r5, [r4, #20]
 800d3a4:	444e      	add	r6, r9
 800d3a6:	eba5 0509 	sub.w	r5, r5, r9
 800d3aa:	6026      	str	r6, [r4, #0]
 800d3ac:	60a5      	str	r5, [r4, #8]
 800d3ae:	463e      	mov	r6, r7
 800d3b0:	42be      	cmp	r6, r7
 800d3b2:	d900      	bls.n	800d3b6 <__ssputs_r+0x86>
 800d3b4:	463e      	mov	r6, r7
 800d3b6:	6820      	ldr	r0, [r4, #0]
 800d3b8:	4632      	mov	r2, r6
 800d3ba:	4641      	mov	r1, r8
 800d3bc:	f000 fd00 	bl	800ddc0 <memmove>
 800d3c0:	68a3      	ldr	r3, [r4, #8]
 800d3c2:	1b9b      	subs	r3, r3, r6
 800d3c4:	60a3      	str	r3, [r4, #8]
 800d3c6:	6823      	ldr	r3, [r4, #0]
 800d3c8:	4433      	add	r3, r6
 800d3ca:	6023      	str	r3, [r4, #0]
 800d3cc:	2000      	movs	r0, #0
 800d3ce:	e7db      	b.n	800d388 <__ssputs_r+0x58>
 800d3d0:	462a      	mov	r2, r5
 800d3d2:	f000 fd1b 	bl	800de0c <_realloc_r>
 800d3d6:	4606      	mov	r6, r0
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	d1e1      	bne.n	800d3a0 <__ssputs_r+0x70>
 800d3dc:	6921      	ldr	r1, [r4, #16]
 800d3de:	4650      	mov	r0, sl
 800d3e0:	f7ff fec6 	bl	800d170 <_free_r>
 800d3e4:	e7c7      	b.n	800d376 <__ssputs_r+0x46>
	...

0800d3e8 <_svfiprintf_r>:
 800d3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ec:	4698      	mov	r8, r3
 800d3ee:	898b      	ldrh	r3, [r1, #12]
 800d3f0:	061b      	lsls	r3, r3, #24
 800d3f2:	b09d      	sub	sp, #116	; 0x74
 800d3f4:	4607      	mov	r7, r0
 800d3f6:	460d      	mov	r5, r1
 800d3f8:	4614      	mov	r4, r2
 800d3fa:	d50e      	bpl.n	800d41a <_svfiprintf_r+0x32>
 800d3fc:	690b      	ldr	r3, [r1, #16]
 800d3fe:	b963      	cbnz	r3, 800d41a <_svfiprintf_r+0x32>
 800d400:	2140      	movs	r1, #64	; 0x40
 800d402:	f7ff ff21 	bl	800d248 <_malloc_r>
 800d406:	6028      	str	r0, [r5, #0]
 800d408:	6128      	str	r0, [r5, #16]
 800d40a:	b920      	cbnz	r0, 800d416 <_svfiprintf_r+0x2e>
 800d40c:	230c      	movs	r3, #12
 800d40e:	603b      	str	r3, [r7, #0]
 800d410:	f04f 30ff 	mov.w	r0, #4294967295
 800d414:	e0d1      	b.n	800d5ba <_svfiprintf_r+0x1d2>
 800d416:	2340      	movs	r3, #64	; 0x40
 800d418:	616b      	str	r3, [r5, #20]
 800d41a:	2300      	movs	r3, #0
 800d41c:	9309      	str	r3, [sp, #36]	; 0x24
 800d41e:	2320      	movs	r3, #32
 800d420:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d424:	f8cd 800c 	str.w	r8, [sp, #12]
 800d428:	2330      	movs	r3, #48	; 0x30
 800d42a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d5d4 <_svfiprintf_r+0x1ec>
 800d42e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d432:	f04f 0901 	mov.w	r9, #1
 800d436:	4623      	mov	r3, r4
 800d438:	469a      	mov	sl, r3
 800d43a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d43e:	b10a      	cbz	r2, 800d444 <_svfiprintf_r+0x5c>
 800d440:	2a25      	cmp	r2, #37	; 0x25
 800d442:	d1f9      	bne.n	800d438 <_svfiprintf_r+0x50>
 800d444:	ebba 0b04 	subs.w	fp, sl, r4
 800d448:	d00b      	beq.n	800d462 <_svfiprintf_r+0x7a>
 800d44a:	465b      	mov	r3, fp
 800d44c:	4622      	mov	r2, r4
 800d44e:	4629      	mov	r1, r5
 800d450:	4638      	mov	r0, r7
 800d452:	f7ff ff6d 	bl	800d330 <__ssputs_r>
 800d456:	3001      	adds	r0, #1
 800d458:	f000 80aa 	beq.w	800d5b0 <_svfiprintf_r+0x1c8>
 800d45c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d45e:	445a      	add	r2, fp
 800d460:	9209      	str	r2, [sp, #36]	; 0x24
 800d462:	f89a 3000 	ldrb.w	r3, [sl]
 800d466:	2b00      	cmp	r3, #0
 800d468:	f000 80a2 	beq.w	800d5b0 <_svfiprintf_r+0x1c8>
 800d46c:	2300      	movs	r3, #0
 800d46e:	f04f 32ff 	mov.w	r2, #4294967295
 800d472:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d476:	f10a 0a01 	add.w	sl, sl, #1
 800d47a:	9304      	str	r3, [sp, #16]
 800d47c:	9307      	str	r3, [sp, #28]
 800d47e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d482:	931a      	str	r3, [sp, #104]	; 0x68
 800d484:	4654      	mov	r4, sl
 800d486:	2205      	movs	r2, #5
 800d488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d48c:	4851      	ldr	r0, [pc, #324]	; (800d5d4 <_svfiprintf_r+0x1ec>)
 800d48e:	f7f2 fe7f 	bl	8000190 <memchr>
 800d492:	9a04      	ldr	r2, [sp, #16]
 800d494:	b9d8      	cbnz	r0, 800d4ce <_svfiprintf_r+0xe6>
 800d496:	06d0      	lsls	r0, r2, #27
 800d498:	bf44      	itt	mi
 800d49a:	2320      	movmi	r3, #32
 800d49c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4a0:	0711      	lsls	r1, r2, #28
 800d4a2:	bf44      	itt	mi
 800d4a4:	232b      	movmi	r3, #43	; 0x2b
 800d4a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4aa:	f89a 3000 	ldrb.w	r3, [sl]
 800d4ae:	2b2a      	cmp	r3, #42	; 0x2a
 800d4b0:	d015      	beq.n	800d4de <_svfiprintf_r+0xf6>
 800d4b2:	9a07      	ldr	r2, [sp, #28]
 800d4b4:	4654      	mov	r4, sl
 800d4b6:	2000      	movs	r0, #0
 800d4b8:	f04f 0c0a 	mov.w	ip, #10
 800d4bc:	4621      	mov	r1, r4
 800d4be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4c2:	3b30      	subs	r3, #48	; 0x30
 800d4c4:	2b09      	cmp	r3, #9
 800d4c6:	d94e      	bls.n	800d566 <_svfiprintf_r+0x17e>
 800d4c8:	b1b0      	cbz	r0, 800d4f8 <_svfiprintf_r+0x110>
 800d4ca:	9207      	str	r2, [sp, #28]
 800d4cc:	e014      	b.n	800d4f8 <_svfiprintf_r+0x110>
 800d4ce:	eba0 0308 	sub.w	r3, r0, r8
 800d4d2:	fa09 f303 	lsl.w	r3, r9, r3
 800d4d6:	4313      	orrs	r3, r2
 800d4d8:	9304      	str	r3, [sp, #16]
 800d4da:	46a2      	mov	sl, r4
 800d4dc:	e7d2      	b.n	800d484 <_svfiprintf_r+0x9c>
 800d4de:	9b03      	ldr	r3, [sp, #12]
 800d4e0:	1d19      	adds	r1, r3, #4
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	9103      	str	r1, [sp, #12]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	bfbb      	ittet	lt
 800d4ea:	425b      	neglt	r3, r3
 800d4ec:	f042 0202 	orrlt.w	r2, r2, #2
 800d4f0:	9307      	strge	r3, [sp, #28]
 800d4f2:	9307      	strlt	r3, [sp, #28]
 800d4f4:	bfb8      	it	lt
 800d4f6:	9204      	strlt	r2, [sp, #16]
 800d4f8:	7823      	ldrb	r3, [r4, #0]
 800d4fa:	2b2e      	cmp	r3, #46	; 0x2e
 800d4fc:	d10c      	bne.n	800d518 <_svfiprintf_r+0x130>
 800d4fe:	7863      	ldrb	r3, [r4, #1]
 800d500:	2b2a      	cmp	r3, #42	; 0x2a
 800d502:	d135      	bne.n	800d570 <_svfiprintf_r+0x188>
 800d504:	9b03      	ldr	r3, [sp, #12]
 800d506:	1d1a      	adds	r2, r3, #4
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	9203      	str	r2, [sp, #12]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	bfb8      	it	lt
 800d510:	f04f 33ff 	movlt.w	r3, #4294967295
 800d514:	3402      	adds	r4, #2
 800d516:	9305      	str	r3, [sp, #20]
 800d518:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d5e4 <_svfiprintf_r+0x1fc>
 800d51c:	7821      	ldrb	r1, [r4, #0]
 800d51e:	2203      	movs	r2, #3
 800d520:	4650      	mov	r0, sl
 800d522:	f7f2 fe35 	bl	8000190 <memchr>
 800d526:	b140      	cbz	r0, 800d53a <_svfiprintf_r+0x152>
 800d528:	2340      	movs	r3, #64	; 0x40
 800d52a:	eba0 000a 	sub.w	r0, r0, sl
 800d52e:	fa03 f000 	lsl.w	r0, r3, r0
 800d532:	9b04      	ldr	r3, [sp, #16]
 800d534:	4303      	orrs	r3, r0
 800d536:	3401      	adds	r4, #1
 800d538:	9304      	str	r3, [sp, #16]
 800d53a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d53e:	4826      	ldr	r0, [pc, #152]	; (800d5d8 <_svfiprintf_r+0x1f0>)
 800d540:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d544:	2206      	movs	r2, #6
 800d546:	f7f2 fe23 	bl	8000190 <memchr>
 800d54a:	2800      	cmp	r0, #0
 800d54c:	d038      	beq.n	800d5c0 <_svfiprintf_r+0x1d8>
 800d54e:	4b23      	ldr	r3, [pc, #140]	; (800d5dc <_svfiprintf_r+0x1f4>)
 800d550:	bb1b      	cbnz	r3, 800d59a <_svfiprintf_r+0x1b2>
 800d552:	9b03      	ldr	r3, [sp, #12]
 800d554:	3307      	adds	r3, #7
 800d556:	f023 0307 	bic.w	r3, r3, #7
 800d55a:	3308      	adds	r3, #8
 800d55c:	9303      	str	r3, [sp, #12]
 800d55e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d560:	4433      	add	r3, r6
 800d562:	9309      	str	r3, [sp, #36]	; 0x24
 800d564:	e767      	b.n	800d436 <_svfiprintf_r+0x4e>
 800d566:	fb0c 3202 	mla	r2, ip, r2, r3
 800d56a:	460c      	mov	r4, r1
 800d56c:	2001      	movs	r0, #1
 800d56e:	e7a5      	b.n	800d4bc <_svfiprintf_r+0xd4>
 800d570:	2300      	movs	r3, #0
 800d572:	3401      	adds	r4, #1
 800d574:	9305      	str	r3, [sp, #20]
 800d576:	4619      	mov	r1, r3
 800d578:	f04f 0c0a 	mov.w	ip, #10
 800d57c:	4620      	mov	r0, r4
 800d57e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d582:	3a30      	subs	r2, #48	; 0x30
 800d584:	2a09      	cmp	r2, #9
 800d586:	d903      	bls.n	800d590 <_svfiprintf_r+0x1a8>
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d0c5      	beq.n	800d518 <_svfiprintf_r+0x130>
 800d58c:	9105      	str	r1, [sp, #20]
 800d58e:	e7c3      	b.n	800d518 <_svfiprintf_r+0x130>
 800d590:	fb0c 2101 	mla	r1, ip, r1, r2
 800d594:	4604      	mov	r4, r0
 800d596:	2301      	movs	r3, #1
 800d598:	e7f0      	b.n	800d57c <_svfiprintf_r+0x194>
 800d59a:	ab03      	add	r3, sp, #12
 800d59c:	9300      	str	r3, [sp, #0]
 800d59e:	462a      	mov	r2, r5
 800d5a0:	4b0f      	ldr	r3, [pc, #60]	; (800d5e0 <_svfiprintf_r+0x1f8>)
 800d5a2:	a904      	add	r1, sp, #16
 800d5a4:	4638      	mov	r0, r7
 800d5a6:	f3af 8000 	nop.w
 800d5aa:	1c42      	adds	r2, r0, #1
 800d5ac:	4606      	mov	r6, r0
 800d5ae:	d1d6      	bne.n	800d55e <_svfiprintf_r+0x176>
 800d5b0:	89ab      	ldrh	r3, [r5, #12]
 800d5b2:	065b      	lsls	r3, r3, #25
 800d5b4:	f53f af2c 	bmi.w	800d410 <_svfiprintf_r+0x28>
 800d5b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5ba:	b01d      	add	sp, #116	; 0x74
 800d5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5c0:	ab03      	add	r3, sp, #12
 800d5c2:	9300      	str	r3, [sp, #0]
 800d5c4:	462a      	mov	r2, r5
 800d5c6:	4b06      	ldr	r3, [pc, #24]	; (800d5e0 <_svfiprintf_r+0x1f8>)
 800d5c8:	a904      	add	r1, sp, #16
 800d5ca:	4638      	mov	r0, r7
 800d5cc:	f000 f9d4 	bl	800d978 <_printf_i>
 800d5d0:	e7eb      	b.n	800d5aa <_svfiprintf_r+0x1c2>
 800d5d2:	bf00      	nop
 800d5d4:	0800fe40 	.word	0x0800fe40
 800d5d8:	0800fe4a 	.word	0x0800fe4a
 800d5dc:	00000000 	.word	0x00000000
 800d5e0:	0800d331 	.word	0x0800d331
 800d5e4:	0800fe46 	.word	0x0800fe46

0800d5e8 <__sfputc_r>:
 800d5e8:	6893      	ldr	r3, [r2, #8]
 800d5ea:	3b01      	subs	r3, #1
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	b410      	push	{r4}
 800d5f0:	6093      	str	r3, [r2, #8]
 800d5f2:	da08      	bge.n	800d606 <__sfputc_r+0x1e>
 800d5f4:	6994      	ldr	r4, [r2, #24]
 800d5f6:	42a3      	cmp	r3, r4
 800d5f8:	db01      	blt.n	800d5fe <__sfputc_r+0x16>
 800d5fa:	290a      	cmp	r1, #10
 800d5fc:	d103      	bne.n	800d606 <__sfputc_r+0x1e>
 800d5fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d602:	f7ff bad5 	b.w	800cbb0 <__swbuf_r>
 800d606:	6813      	ldr	r3, [r2, #0]
 800d608:	1c58      	adds	r0, r3, #1
 800d60a:	6010      	str	r0, [r2, #0]
 800d60c:	7019      	strb	r1, [r3, #0]
 800d60e:	4608      	mov	r0, r1
 800d610:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d614:	4770      	bx	lr

0800d616 <__sfputs_r>:
 800d616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d618:	4606      	mov	r6, r0
 800d61a:	460f      	mov	r7, r1
 800d61c:	4614      	mov	r4, r2
 800d61e:	18d5      	adds	r5, r2, r3
 800d620:	42ac      	cmp	r4, r5
 800d622:	d101      	bne.n	800d628 <__sfputs_r+0x12>
 800d624:	2000      	movs	r0, #0
 800d626:	e007      	b.n	800d638 <__sfputs_r+0x22>
 800d628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d62c:	463a      	mov	r2, r7
 800d62e:	4630      	mov	r0, r6
 800d630:	f7ff ffda 	bl	800d5e8 <__sfputc_r>
 800d634:	1c43      	adds	r3, r0, #1
 800d636:	d1f3      	bne.n	800d620 <__sfputs_r+0xa>
 800d638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d63c <_vfiprintf_r>:
 800d63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d640:	460d      	mov	r5, r1
 800d642:	b09d      	sub	sp, #116	; 0x74
 800d644:	4614      	mov	r4, r2
 800d646:	4698      	mov	r8, r3
 800d648:	4606      	mov	r6, r0
 800d64a:	b118      	cbz	r0, 800d654 <_vfiprintf_r+0x18>
 800d64c:	6983      	ldr	r3, [r0, #24]
 800d64e:	b90b      	cbnz	r3, 800d654 <_vfiprintf_r+0x18>
 800d650:	f7ff fc88 	bl	800cf64 <__sinit>
 800d654:	4b89      	ldr	r3, [pc, #548]	; (800d87c <_vfiprintf_r+0x240>)
 800d656:	429d      	cmp	r5, r3
 800d658:	d11b      	bne.n	800d692 <_vfiprintf_r+0x56>
 800d65a:	6875      	ldr	r5, [r6, #4]
 800d65c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d65e:	07d9      	lsls	r1, r3, #31
 800d660:	d405      	bmi.n	800d66e <_vfiprintf_r+0x32>
 800d662:	89ab      	ldrh	r3, [r5, #12]
 800d664:	059a      	lsls	r2, r3, #22
 800d666:	d402      	bmi.n	800d66e <_vfiprintf_r+0x32>
 800d668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d66a:	f7ff fd19 	bl	800d0a0 <__retarget_lock_acquire_recursive>
 800d66e:	89ab      	ldrh	r3, [r5, #12]
 800d670:	071b      	lsls	r3, r3, #28
 800d672:	d501      	bpl.n	800d678 <_vfiprintf_r+0x3c>
 800d674:	692b      	ldr	r3, [r5, #16]
 800d676:	b9eb      	cbnz	r3, 800d6b4 <_vfiprintf_r+0x78>
 800d678:	4629      	mov	r1, r5
 800d67a:	4630      	mov	r0, r6
 800d67c:	f7ff faea 	bl	800cc54 <__swsetup_r>
 800d680:	b1c0      	cbz	r0, 800d6b4 <_vfiprintf_r+0x78>
 800d682:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d684:	07dc      	lsls	r4, r3, #31
 800d686:	d50e      	bpl.n	800d6a6 <_vfiprintf_r+0x6a>
 800d688:	f04f 30ff 	mov.w	r0, #4294967295
 800d68c:	b01d      	add	sp, #116	; 0x74
 800d68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d692:	4b7b      	ldr	r3, [pc, #492]	; (800d880 <_vfiprintf_r+0x244>)
 800d694:	429d      	cmp	r5, r3
 800d696:	d101      	bne.n	800d69c <_vfiprintf_r+0x60>
 800d698:	68b5      	ldr	r5, [r6, #8]
 800d69a:	e7df      	b.n	800d65c <_vfiprintf_r+0x20>
 800d69c:	4b79      	ldr	r3, [pc, #484]	; (800d884 <_vfiprintf_r+0x248>)
 800d69e:	429d      	cmp	r5, r3
 800d6a0:	bf08      	it	eq
 800d6a2:	68f5      	ldreq	r5, [r6, #12]
 800d6a4:	e7da      	b.n	800d65c <_vfiprintf_r+0x20>
 800d6a6:	89ab      	ldrh	r3, [r5, #12]
 800d6a8:	0598      	lsls	r0, r3, #22
 800d6aa:	d4ed      	bmi.n	800d688 <_vfiprintf_r+0x4c>
 800d6ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6ae:	f7ff fcf8 	bl	800d0a2 <__retarget_lock_release_recursive>
 800d6b2:	e7e9      	b.n	800d688 <_vfiprintf_r+0x4c>
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	9309      	str	r3, [sp, #36]	; 0x24
 800d6b8:	2320      	movs	r3, #32
 800d6ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d6be:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6c2:	2330      	movs	r3, #48	; 0x30
 800d6c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d888 <_vfiprintf_r+0x24c>
 800d6c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6cc:	f04f 0901 	mov.w	r9, #1
 800d6d0:	4623      	mov	r3, r4
 800d6d2:	469a      	mov	sl, r3
 800d6d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6d8:	b10a      	cbz	r2, 800d6de <_vfiprintf_r+0xa2>
 800d6da:	2a25      	cmp	r2, #37	; 0x25
 800d6dc:	d1f9      	bne.n	800d6d2 <_vfiprintf_r+0x96>
 800d6de:	ebba 0b04 	subs.w	fp, sl, r4
 800d6e2:	d00b      	beq.n	800d6fc <_vfiprintf_r+0xc0>
 800d6e4:	465b      	mov	r3, fp
 800d6e6:	4622      	mov	r2, r4
 800d6e8:	4629      	mov	r1, r5
 800d6ea:	4630      	mov	r0, r6
 800d6ec:	f7ff ff93 	bl	800d616 <__sfputs_r>
 800d6f0:	3001      	adds	r0, #1
 800d6f2:	f000 80aa 	beq.w	800d84a <_vfiprintf_r+0x20e>
 800d6f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6f8:	445a      	add	r2, fp
 800d6fa:	9209      	str	r2, [sp, #36]	; 0x24
 800d6fc:	f89a 3000 	ldrb.w	r3, [sl]
 800d700:	2b00      	cmp	r3, #0
 800d702:	f000 80a2 	beq.w	800d84a <_vfiprintf_r+0x20e>
 800d706:	2300      	movs	r3, #0
 800d708:	f04f 32ff 	mov.w	r2, #4294967295
 800d70c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d710:	f10a 0a01 	add.w	sl, sl, #1
 800d714:	9304      	str	r3, [sp, #16]
 800d716:	9307      	str	r3, [sp, #28]
 800d718:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d71c:	931a      	str	r3, [sp, #104]	; 0x68
 800d71e:	4654      	mov	r4, sl
 800d720:	2205      	movs	r2, #5
 800d722:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d726:	4858      	ldr	r0, [pc, #352]	; (800d888 <_vfiprintf_r+0x24c>)
 800d728:	f7f2 fd32 	bl	8000190 <memchr>
 800d72c:	9a04      	ldr	r2, [sp, #16]
 800d72e:	b9d8      	cbnz	r0, 800d768 <_vfiprintf_r+0x12c>
 800d730:	06d1      	lsls	r1, r2, #27
 800d732:	bf44      	itt	mi
 800d734:	2320      	movmi	r3, #32
 800d736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d73a:	0713      	lsls	r3, r2, #28
 800d73c:	bf44      	itt	mi
 800d73e:	232b      	movmi	r3, #43	; 0x2b
 800d740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d744:	f89a 3000 	ldrb.w	r3, [sl]
 800d748:	2b2a      	cmp	r3, #42	; 0x2a
 800d74a:	d015      	beq.n	800d778 <_vfiprintf_r+0x13c>
 800d74c:	9a07      	ldr	r2, [sp, #28]
 800d74e:	4654      	mov	r4, sl
 800d750:	2000      	movs	r0, #0
 800d752:	f04f 0c0a 	mov.w	ip, #10
 800d756:	4621      	mov	r1, r4
 800d758:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d75c:	3b30      	subs	r3, #48	; 0x30
 800d75e:	2b09      	cmp	r3, #9
 800d760:	d94e      	bls.n	800d800 <_vfiprintf_r+0x1c4>
 800d762:	b1b0      	cbz	r0, 800d792 <_vfiprintf_r+0x156>
 800d764:	9207      	str	r2, [sp, #28]
 800d766:	e014      	b.n	800d792 <_vfiprintf_r+0x156>
 800d768:	eba0 0308 	sub.w	r3, r0, r8
 800d76c:	fa09 f303 	lsl.w	r3, r9, r3
 800d770:	4313      	orrs	r3, r2
 800d772:	9304      	str	r3, [sp, #16]
 800d774:	46a2      	mov	sl, r4
 800d776:	e7d2      	b.n	800d71e <_vfiprintf_r+0xe2>
 800d778:	9b03      	ldr	r3, [sp, #12]
 800d77a:	1d19      	adds	r1, r3, #4
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	9103      	str	r1, [sp, #12]
 800d780:	2b00      	cmp	r3, #0
 800d782:	bfbb      	ittet	lt
 800d784:	425b      	neglt	r3, r3
 800d786:	f042 0202 	orrlt.w	r2, r2, #2
 800d78a:	9307      	strge	r3, [sp, #28]
 800d78c:	9307      	strlt	r3, [sp, #28]
 800d78e:	bfb8      	it	lt
 800d790:	9204      	strlt	r2, [sp, #16]
 800d792:	7823      	ldrb	r3, [r4, #0]
 800d794:	2b2e      	cmp	r3, #46	; 0x2e
 800d796:	d10c      	bne.n	800d7b2 <_vfiprintf_r+0x176>
 800d798:	7863      	ldrb	r3, [r4, #1]
 800d79a:	2b2a      	cmp	r3, #42	; 0x2a
 800d79c:	d135      	bne.n	800d80a <_vfiprintf_r+0x1ce>
 800d79e:	9b03      	ldr	r3, [sp, #12]
 800d7a0:	1d1a      	adds	r2, r3, #4
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	9203      	str	r2, [sp, #12]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	bfb8      	it	lt
 800d7aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800d7ae:	3402      	adds	r4, #2
 800d7b0:	9305      	str	r3, [sp, #20]
 800d7b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d898 <_vfiprintf_r+0x25c>
 800d7b6:	7821      	ldrb	r1, [r4, #0]
 800d7b8:	2203      	movs	r2, #3
 800d7ba:	4650      	mov	r0, sl
 800d7bc:	f7f2 fce8 	bl	8000190 <memchr>
 800d7c0:	b140      	cbz	r0, 800d7d4 <_vfiprintf_r+0x198>
 800d7c2:	2340      	movs	r3, #64	; 0x40
 800d7c4:	eba0 000a 	sub.w	r0, r0, sl
 800d7c8:	fa03 f000 	lsl.w	r0, r3, r0
 800d7cc:	9b04      	ldr	r3, [sp, #16]
 800d7ce:	4303      	orrs	r3, r0
 800d7d0:	3401      	adds	r4, #1
 800d7d2:	9304      	str	r3, [sp, #16]
 800d7d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7d8:	482c      	ldr	r0, [pc, #176]	; (800d88c <_vfiprintf_r+0x250>)
 800d7da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7de:	2206      	movs	r2, #6
 800d7e0:	f7f2 fcd6 	bl	8000190 <memchr>
 800d7e4:	2800      	cmp	r0, #0
 800d7e6:	d03f      	beq.n	800d868 <_vfiprintf_r+0x22c>
 800d7e8:	4b29      	ldr	r3, [pc, #164]	; (800d890 <_vfiprintf_r+0x254>)
 800d7ea:	bb1b      	cbnz	r3, 800d834 <_vfiprintf_r+0x1f8>
 800d7ec:	9b03      	ldr	r3, [sp, #12]
 800d7ee:	3307      	adds	r3, #7
 800d7f0:	f023 0307 	bic.w	r3, r3, #7
 800d7f4:	3308      	adds	r3, #8
 800d7f6:	9303      	str	r3, [sp, #12]
 800d7f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7fa:	443b      	add	r3, r7
 800d7fc:	9309      	str	r3, [sp, #36]	; 0x24
 800d7fe:	e767      	b.n	800d6d0 <_vfiprintf_r+0x94>
 800d800:	fb0c 3202 	mla	r2, ip, r2, r3
 800d804:	460c      	mov	r4, r1
 800d806:	2001      	movs	r0, #1
 800d808:	e7a5      	b.n	800d756 <_vfiprintf_r+0x11a>
 800d80a:	2300      	movs	r3, #0
 800d80c:	3401      	adds	r4, #1
 800d80e:	9305      	str	r3, [sp, #20]
 800d810:	4619      	mov	r1, r3
 800d812:	f04f 0c0a 	mov.w	ip, #10
 800d816:	4620      	mov	r0, r4
 800d818:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d81c:	3a30      	subs	r2, #48	; 0x30
 800d81e:	2a09      	cmp	r2, #9
 800d820:	d903      	bls.n	800d82a <_vfiprintf_r+0x1ee>
 800d822:	2b00      	cmp	r3, #0
 800d824:	d0c5      	beq.n	800d7b2 <_vfiprintf_r+0x176>
 800d826:	9105      	str	r1, [sp, #20]
 800d828:	e7c3      	b.n	800d7b2 <_vfiprintf_r+0x176>
 800d82a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d82e:	4604      	mov	r4, r0
 800d830:	2301      	movs	r3, #1
 800d832:	e7f0      	b.n	800d816 <_vfiprintf_r+0x1da>
 800d834:	ab03      	add	r3, sp, #12
 800d836:	9300      	str	r3, [sp, #0]
 800d838:	462a      	mov	r2, r5
 800d83a:	4b16      	ldr	r3, [pc, #88]	; (800d894 <_vfiprintf_r+0x258>)
 800d83c:	a904      	add	r1, sp, #16
 800d83e:	4630      	mov	r0, r6
 800d840:	f3af 8000 	nop.w
 800d844:	4607      	mov	r7, r0
 800d846:	1c78      	adds	r0, r7, #1
 800d848:	d1d6      	bne.n	800d7f8 <_vfiprintf_r+0x1bc>
 800d84a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d84c:	07d9      	lsls	r1, r3, #31
 800d84e:	d405      	bmi.n	800d85c <_vfiprintf_r+0x220>
 800d850:	89ab      	ldrh	r3, [r5, #12]
 800d852:	059a      	lsls	r2, r3, #22
 800d854:	d402      	bmi.n	800d85c <_vfiprintf_r+0x220>
 800d856:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d858:	f7ff fc23 	bl	800d0a2 <__retarget_lock_release_recursive>
 800d85c:	89ab      	ldrh	r3, [r5, #12]
 800d85e:	065b      	lsls	r3, r3, #25
 800d860:	f53f af12 	bmi.w	800d688 <_vfiprintf_r+0x4c>
 800d864:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d866:	e711      	b.n	800d68c <_vfiprintf_r+0x50>
 800d868:	ab03      	add	r3, sp, #12
 800d86a:	9300      	str	r3, [sp, #0]
 800d86c:	462a      	mov	r2, r5
 800d86e:	4b09      	ldr	r3, [pc, #36]	; (800d894 <_vfiprintf_r+0x258>)
 800d870:	a904      	add	r1, sp, #16
 800d872:	4630      	mov	r0, r6
 800d874:	f000 f880 	bl	800d978 <_printf_i>
 800d878:	e7e4      	b.n	800d844 <_vfiprintf_r+0x208>
 800d87a:	bf00      	nop
 800d87c:	0800fe00 	.word	0x0800fe00
 800d880:	0800fe20 	.word	0x0800fe20
 800d884:	0800fde0 	.word	0x0800fde0
 800d888:	0800fe40 	.word	0x0800fe40
 800d88c:	0800fe4a 	.word	0x0800fe4a
 800d890:	00000000 	.word	0x00000000
 800d894:	0800d617 	.word	0x0800d617
 800d898:	0800fe46 	.word	0x0800fe46

0800d89c <_printf_common>:
 800d89c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8a0:	4616      	mov	r6, r2
 800d8a2:	4699      	mov	r9, r3
 800d8a4:	688a      	ldr	r2, [r1, #8]
 800d8a6:	690b      	ldr	r3, [r1, #16]
 800d8a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d8ac:	4293      	cmp	r3, r2
 800d8ae:	bfb8      	it	lt
 800d8b0:	4613      	movlt	r3, r2
 800d8b2:	6033      	str	r3, [r6, #0]
 800d8b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d8b8:	4607      	mov	r7, r0
 800d8ba:	460c      	mov	r4, r1
 800d8bc:	b10a      	cbz	r2, 800d8c2 <_printf_common+0x26>
 800d8be:	3301      	adds	r3, #1
 800d8c0:	6033      	str	r3, [r6, #0]
 800d8c2:	6823      	ldr	r3, [r4, #0]
 800d8c4:	0699      	lsls	r1, r3, #26
 800d8c6:	bf42      	ittt	mi
 800d8c8:	6833      	ldrmi	r3, [r6, #0]
 800d8ca:	3302      	addmi	r3, #2
 800d8cc:	6033      	strmi	r3, [r6, #0]
 800d8ce:	6825      	ldr	r5, [r4, #0]
 800d8d0:	f015 0506 	ands.w	r5, r5, #6
 800d8d4:	d106      	bne.n	800d8e4 <_printf_common+0x48>
 800d8d6:	f104 0a19 	add.w	sl, r4, #25
 800d8da:	68e3      	ldr	r3, [r4, #12]
 800d8dc:	6832      	ldr	r2, [r6, #0]
 800d8de:	1a9b      	subs	r3, r3, r2
 800d8e0:	42ab      	cmp	r3, r5
 800d8e2:	dc26      	bgt.n	800d932 <_printf_common+0x96>
 800d8e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d8e8:	1e13      	subs	r3, r2, #0
 800d8ea:	6822      	ldr	r2, [r4, #0]
 800d8ec:	bf18      	it	ne
 800d8ee:	2301      	movne	r3, #1
 800d8f0:	0692      	lsls	r2, r2, #26
 800d8f2:	d42b      	bmi.n	800d94c <_printf_common+0xb0>
 800d8f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d8f8:	4649      	mov	r1, r9
 800d8fa:	4638      	mov	r0, r7
 800d8fc:	47c0      	blx	r8
 800d8fe:	3001      	adds	r0, #1
 800d900:	d01e      	beq.n	800d940 <_printf_common+0xa4>
 800d902:	6823      	ldr	r3, [r4, #0]
 800d904:	68e5      	ldr	r5, [r4, #12]
 800d906:	6832      	ldr	r2, [r6, #0]
 800d908:	f003 0306 	and.w	r3, r3, #6
 800d90c:	2b04      	cmp	r3, #4
 800d90e:	bf08      	it	eq
 800d910:	1aad      	subeq	r5, r5, r2
 800d912:	68a3      	ldr	r3, [r4, #8]
 800d914:	6922      	ldr	r2, [r4, #16]
 800d916:	bf0c      	ite	eq
 800d918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d91c:	2500      	movne	r5, #0
 800d91e:	4293      	cmp	r3, r2
 800d920:	bfc4      	itt	gt
 800d922:	1a9b      	subgt	r3, r3, r2
 800d924:	18ed      	addgt	r5, r5, r3
 800d926:	2600      	movs	r6, #0
 800d928:	341a      	adds	r4, #26
 800d92a:	42b5      	cmp	r5, r6
 800d92c:	d11a      	bne.n	800d964 <_printf_common+0xc8>
 800d92e:	2000      	movs	r0, #0
 800d930:	e008      	b.n	800d944 <_printf_common+0xa8>
 800d932:	2301      	movs	r3, #1
 800d934:	4652      	mov	r2, sl
 800d936:	4649      	mov	r1, r9
 800d938:	4638      	mov	r0, r7
 800d93a:	47c0      	blx	r8
 800d93c:	3001      	adds	r0, #1
 800d93e:	d103      	bne.n	800d948 <_printf_common+0xac>
 800d940:	f04f 30ff 	mov.w	r0, #4294967295
 800d944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d948:	3501      	adds	r5, #1
 800d94a:	e7c6      	b.n	800d8da <_printf_common+0x3e>
 800d94c:	18e1      	adds	r1, r4, r3
 800d94e:	1c5a      	adds	r2, r3, #1
 800d950:	2030      	movs	r0, #48	; 0x30
 800d952:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d956:	4422      	add	r2, r4
 800d958:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d95c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d960:	3302      	adds	r3, #2
 800d962:	e7c7      	b.n	800d8f4 <_printf_common+0x58>
 800d964:	2301      	movs	r3, #1
 800d966:	4622      	mov	r2, r4
 800d968:	4649      	mov	r1, r9
 800d96a:	4638      	mov	r0, r7
 800d96c:	47c0      	blx	r8
 800d96e:	3001      	adds	r0, #1
 800d970:	d0e6      	beq.n	800d940 <_printf_common+0xa4>
 800d972:	3601      	adds	r6, #1
 800d974:	e7d9      	b.n	800d92a <_printf_common+0x8e>
	...

0800d978 <_printf_i>:
 800d978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d97c:	7e0f      	ldrb	r7, [r1, #24]
 800d97e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d980:	2f78      	cmp	r7, #120	; 0x78
 800d982:	4691      	mov	r9, r2
 800d984:	4680      	mov	r8, r0
 800d986:	460c      	mov	r4, r1
 800d988:	469a      	mov	sl, r3
 800d98a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d98e:	d807      	bhi.n	800d9a0 <_printf_i+0x28>
 800d990:	2f62      	cmp	r7, #98	; 0x62
 800d992:	d80a      	bhi.n	800d9aa <_printf_i+0x32>
 800d994:	2f00      	cmp	r7, #0
 800d996:	f000 80d8 	beq.w	800db4a <_printf_i+0x1d2>
 800d99a:	2f58      	cmp	r7, #88	; 0x58
 800d99c:	f000 80a3 	beq.w	800dae6 <_printf_i+0x16e>
 800d9a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d9a8:	e03a      	b.n	800da20 <_printf_i+0xa8>
 800d9aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d9ae:	2b15      	cmp	r3, #21
 800d9b0:	d8f6      	bhi.n	800d9a0 <_printf_i+0x28>
 800d9b2:	a101      	add	r1, pc, #4	; (adr r1, 800d9b8 <_printf_i+0x40>)
 800d9b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d9b8:	0800da11 	.word	0x0800da11
 800d9bc:	0800da25 	.word	0x0800da25
 800d9c0:	0800d9a1 	.word	0x0800d9a1
 800d9c4:	0800d9a1 	.word	0x0800d9a1
 800d9c8:	0800d9a1 	.word	0x0800d9a1
 800d9cc:	0800d9a1 	.word	0x0800d9a1
 800d9d0:	0800da25 	.word	0x0800da25
 800d9d4:	0800d9a1 	.word	0x0800d9a1
 800d9d8:	0800d9a1 	.word	0x0800d9a1
 800d9dc:	0800d9a1 	.word	0x0800d9a1
 800d9e0:	0800d9a1 	.word	0x0800d9a1
 800d9e4:	0800db31 	.word	0x0800db31
 800d9e8:	0800da55 	.word	0x0800da55
 800d9ec:	0800db13 	.word	0x0800db13
 800d9f0:	0800d9a1 	.word	0x0800d9a1
 800d9f4:	0800d9a1 	.word	0x0800d9a1
 800d9f8:	0800db53 	.word	0x0800db53
 800d9fc:	0800d9a1 	.word	0x0800d9a1
 800da00:	0800da55 	.word	0x0800da55
 800da04:	0800d9a1 	.word	0x0800d9a1
 800da08:	0800d9a1 	.word	0x0800d9a1
 800da0c:	0800db1b 	.word	0x0800db1b
 800da10:	682b      	ldr	r3, [r5, #0]
 800da12:	1d1a      	adds	r2, r3, #4
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	602a      	str	r2, [r5, #0]
 800da18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da20:	2301      	movs	r3, #1
 800da22:	e0a3      	b.n	800db6c <_printf_i+0x1f4>
 800da24:	6820      	ldr	r0, [r4, #0]
 800da26:	6829      	ldr	r1, [r5, #0]
 800da28:	0606      	lsls	r6, r0, #24
 800da2a:	f101 0304 	add.w	r3, r1, #4
 800da2e:	d50a      	bpl.n	800da46 <_printf_i+0xce>
 800da30:	680e      	ldr	r6, [r1, #0]
 800da32:	602b      	str	r3, [r5, #0]
 800da34:	2e00      	cmp	r6, #0
 800da36:	da03      	bge.n	800da40 <_printf_i+0xc8>
 800da38:	232d      	movs	r3, #45	; 0x2d
 800da3a:	4276      	negs	r6, r6
 800da3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da40:	485e      	ldr	r0, [pc, #376]	; (800dbbc <_printf_i+0x244>)
 800da42:	230a      	movs	r3, #10
 800da44:	e019      	b.n	800da7a <_printf_i+0x102>
 800da46:	680e      	ldr	r6, [r1, #0]
 800da48:	602b      	str	r3, [r5, #0]
 800da4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800da4e:	bf18      	it	ne
 800da50:	b236      	sxthne	r6, r6
 800da52:	e7ef      	b.n	800da34 <_printf_i+0xbc>
 800da54:	682b      	ldr	r3, [r5, #0]
 800da56:	6820      	ldr	r0, [r4, #0]
 800da58:	1d19      	adds	r1, r3, #4
 800da5a:	6029      	str	r1, [r5, #0]
 800da5c:	0601      	lsls	r1, r0, #24
 800da5e:	d501      	bpl.n	800da64 <_printf_i+0xec>
 800da60:	681e      	ldr	r6, [r3, #0]
 800da62:	e002      	b.n	800da6a <_printf_i+0xf2>
 800da64:	0646      	lsls	r6, r0, #25
 800da66:	d5fb      	bpl.n	800da60 <_printf_i+0xe8>
 800da68:	881e      	ldrh	r6, [r3, #0]
 800da6a:	4854      	ldr	r0, [pc, #336]	; (800dbbc <_printf_i+0x244>)
 800da6c:	2f6f      	cmp	r7, #111	; 0x6f
 800da6e:	bf0c      	ite	eq
 800da70:	2308      	moveq	r3, #8
 800da72:	230a      	movne	r3, #10
 800da74:	2100      	movs	r1, #0
 800da76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da7a:	6865      	ldr	r5, [r4, #4]
 800da7c:	60a5      	str	r5, [r4, #8]
 800da7e:	2d00      	cmp	r5, #0
 800da80:	bfa2      	ittt	ge
 800da82:	6821      	ldrge	r1, [r4, #0]
 800da84:	f021 0104 	bicge.w	r1, r1, #4
 800da88:	6021      	strge	r1, [r4, #0]
 800da8a:	b90e      	cbnz	r6, 800da90 <_printf_i+0x118>
 800da8c:	2d00      	cmp	r5, #0
 800da8e:	d04d      	beq.n	800db2c <_printf_i+0x1b4>
 800da90:	4615      	mov	r5, r2
 800da92:	fbb6 f1f3 	udiv	r1, r6, r3
 800da96:	fb03 6711 	mls	r7, r3, r1, r6
 800da9a:	5dc7      	ldrb	r7, [r0, r7]
 800da9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800daa0:	4637      	mov	r7, r6
 800daa2:	42bb      	cmp	r3, r7
 800daa4:	460e      	mov	r6, r1
 800daa6:	d9f4      	bls.n	800da92 <_printf_i+0x11a>
 800daa8:	2b08      	cmp	r3, #8
 800daaa:	d10b      	bne.n	800dac4 <_printf_i+0x14c>
 800daac:	6823      	ldr	r3, [r4, #0]
 800daae:	07de      	lsls	r6, r3, #31
 800dab0:	d508      	bpl.n	800dac4 <_printf_i+0x14c>
 800dab2:	6923      	ldr	r3, [r4, #16]
 800dab4:	6861      	ldr	r1, [r4, #4]
 800dab6:	4299      	cmp	r1, r3
 800dab8:	bfde      	ittt	le
 800daba:	2330      	movle	r3, #48	; 0x30
 800dabc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dac0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dac4:	1b52      	subs	r2, r2, r5
 800dac6:	6122      	str	r2, [r4, #16]
 800dac8:	f8cd a000 	str.w	sl, [sp]
 800dacc:	464b      	mov	r3, r9
 800dace:	aa03      	add	r2, sp, #12
 800dad0:	4621      	mov	r1, r4
 800dad2:	4640      	mov	r0, r8
 800dad4:	f7ff fee2 	bl	800d89c <_printf_common>
 800dad8:	3001      	adds	r0, #1
 800dada:	d14c      	bne.n	800db76 <_printf_i+0x1fe>
 800dadc:	f04f 30ff 	mov.w	r0, #4294967295
 800dae0:	b004      	add	sp, #16
 800dae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dae6:	4835      	ldr	r0, [pc, #212]	; (800dbbc <_printf_i+0x244>)
 800dae8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800daec:	6829      	ldr	r1, [r5, #0]
 800daee:	6823      	ldr	r3, [r4, #0]
 800daf0:	f851 6b04 	ldr.w	r6, [r1], #4
 800daf4:	6029      	str	r1, [r5, #0]
 800daf6:	061d      	lsls	r5, r3, #24
 800daf8:	d514      	bpl.n	800db24 <_printf_i+0x1ac>
 800dafa:	07df      	lsls	r7, r3, #31
 800dafc:	bf44      	itt	mi
 800dafe:	f043 0320 	orrmi.w	r3, r3, #32
 800db02:	6023      	strmi	r3, [r4, #0]
 800db04:	b91e      	cbnz	r6, 800db0e <_printf_i+0x196>
 800db06:	6823      	ldr	r3, [r4, #0]
 800db08:	f023 0320 	bic.w	r3, r3, #32
 800db0c:	6023      	str	r3, [r4, #0]
 800db0e:	2310      	movs	r3, #16
 800db10:	e7b0      	b.n	800da74 <_printf_i+0xfc>
 800db12:	6823      	ldr	r3, [r4, #0]
 800db14:	f043 0320 	orr.w	r3, r3, #32
 800db18:	6023      	str	r3, [r4, #0]
 800db1a:	2378      	movs	r3, #120	; 0x78
 800db1c:	4828      	ldr	r0, [pc, #160]	; (800dbc0 <_printf_i+0x248>)
 800db1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800db22:	e7e3      	b.n	800daec <_printf_i+0x174>
 800db24:	0659      	lsls	r1, r3, #25
 800db26:	bf48      	it	mi
 800db28:	b2b6      	uxthmi	r6, r6
 800db2a:	e7e6      	b.n	800dafa <_printf_i+0x182>
 800db2c:	4615      	mov	r5, r2
 800db2e:	e7bb      	b.n	800daa8 <_printf_i+0x130>
 800db30:	682b      	ldr	r3, [r5, #0]
 800db32:	6826      	ldr	r6, [r4, #0]
 800db34:	6961      	ldr	r1, [r4, #20]
 800db36:	1d18      	adds	r0, r3, #4
 800db38:	6028      	str	r0, [r5, #0]
 800db3a:	0635      	lsls	r5, r6, #24
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	d501      	bpl.n	800db44 <_printf_i+0x1cc>
 800db40:	6019      	str	r1, [r3, #0]
 800db42:	e002      	b.n	800db4a <_printf_i+0x1d2>
 800db44:	0670      	lsls	r0, r6, #25
 800db46:	d5fb      	bpl.n	800db40 <_printf_i+0x1c8>
 800db48:	8019      	strh	r1, [r3, #0]
 800db4a:	2300      	movs	r3, #0
 800db4c:	6123      	str	r3, [r4, #16]
 800db4e:	4615      	mov	r5, r2
 800db50:	e7ba      	b.n	800dac8 <_printf_i+0x150>
 800db52:	682b      	ldr	r3, [r5, #0]
 800db54:	1d1a      	adds	r2, r3, #4
 800db56:	602a      	str	r2, [r5, #0]
 800db58:	681d      	ldr	r5, [r3, #0]
 800db5a:	6862      	ldr	r2, [r4, #4]
 800db5c:	2100      	movs	r1, #0
 800db5e:	4628      	mov	r0, r5
 800db60:	f7f2 fb16 	bl	8000190 <memchr>
 800db64:	b108      	cbz	r0, 800db6a <_printf_i+0x1f2>
 800db66:	1b40      	subs	r0, r0, r5
 800db68:	6060      	str	r0, [r4, #4]
 800db6a:	6863      	ldr	r3, [r4, #4]
 800db6c:	6123      	str	r3, [r4, #16]
 800db6e:	2300      	movs	r3, #0
 800db70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db74:	e7a8      	b.n	800dac8 <_printf_i+0x150>
 800db76:	6923      	ldr	r3, [r4, #16]
 800db78:	462a      	mov	r2, r5
 800db7a:	4649      	mov	r1, r9
 800db7c:	4640      	mov	r0, r8
 800db7e:	47d0      	blx	sl
 800db80:	3001      	adds	r0, #1
 800db82:	d0ab      	beq.n	800dadc <_printf_i+0x164>
 800db84:	6823      	ldr	r3, [r4, #0]
 800db86:	079b      	lsls	r3, r3, #30
 800db88:	d413      	bmi.n	800dbb2 <_printf_i+0x23a>
 800db8a:	68e0      	ldr	r0, [r4, #12]
 800db8c:	9b03      	ldr	r3, [sp, #12]
 800db8e:	4298      	cmp	r0, r3
 800db90:	bfb8      	it	lt
 800db92:	4618      	movlt	r0, r3
 800db94:	e7a4      	b.n	800dae0 <_printf_i+0x168>
 800db96:	2301      	movs	r3, #1
 800db98:	4632      	mov	r2, r6
 800db9a:	4649      	mov	r1, r9
 800db9c:	4640      	mov	r0, r8
 800db9e:	47d0      	blx	sl
 800dba0:	3001      	adds	r0, #1
 800dba2:	d09b      	beq.n	800dadc <_printf_i+0x164>
 800dba4:	3501      	adds	r5, #1
 800dba6:	68e3      	ldr	r3, [r4, #12]
 800dba8:	9903      	ldr	r1, [sp, #12]
 800dbaa:	1a5b      	subs	r3, r3, r1
 800dbac:	42ab      	cmp	r3, r5
 800dbae:	dcf2      	bgt.n	800db96 <_printf_i+0x21e>
 800dbb0:	e7eb      	b.n	800db8a <_printf_i+0x212>
 800dbb2:	2500      	movs	r5, #0
 800dbb4:	f104 0619 	add.w	r6, r4, #25
 800dbb8:	e7f5      	b.n	800dba6 <_printf_i+0x22e>
 800dbba:	bf00      	nop
 800dbbc:	0800fe51 	.word	0x0800fe51
 800dbc0:	0800fe62 	.word	0x0800fe62

0800dbc4 <_putc_r>:
 800dbc4:	b570      	push	{r4, r5, r6, lr}
 800dbc6:	460d      	mov	r5, r1
 800dbc8:	4614      	mov	r4, r2
 800dbca:	4606      	mov	r6, r0
 800dbcc:	b118      	cbz	r0, 800dbd6 <_putc_r+0x12>
 800dbce:	6983      	ldr	r3, [r0, #24]
 800dbd0:	b90b      	cbnz	r3, 800dbd6 <_putc_r+0x12>
 800dbd2:	f7ff f9c7 	bl	800cf64 <__sinit>
 800dbd6:	4b1c      	ldr	r3, [pc, #112]	; (800dc48 <_putc_r+0x84>)
 800dbd8:	429c      	cmp	r4, r3
 800dbda:	d124      	bne.n	800dc26 <_putc_r+0x62>
 800dbdc:	6874      	ldr	r4, [r6, #4]
 800dbde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dbe0:	07d8      	lsls	r0, r3, #31
 800dbe2:	d405      	bmi.n	800dbf0 <_putc_r+0x2c>
 800dbe4:	89a3      	ldrh	r3, [r4, #12]
 800dbe6:	0599      	lsls	r1, r3, #22
 800dbe8:	d402      	bmi.n	800dbf0 <_putc_r+0x2c>
 800dbea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dbec:	f7ff fa58 	bl	800d0a0 <__retarget_lock_acquire_recursive>
 800dbf0:	68a3      	ldr	r3, [r4, #8]
 800dbf2:	3b01      	subs	r3, #1
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	60a3      	str	r3, [r4, #8]
 800dbf8:	da05      	bge.n	800dc06 <_putc_r+0x42>
 800dbfa:	69a2      	ldr	r2, [r4, #24]
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	db1c      	blt.n	800dc3a <_putc_r+0x76>
 800dc00:	b2eb      	uxtb	r3, r5
 800dc02:	2b0a      	cmp	r3, #10
 800dc04:	d019      	beq.n	800dc3a <_putc_r+0x76>
 800dc06:	6823      	ldr	r3, [r4, #0]
 800dc08:	1c5a      	adds	r2, r3, #1
 800dc0a:	6022      	str	r2, [r4, #0]
 800dc0c:	701d      	strb	r5, [r3, #0]
 800dc0e:	b2ed      	uxtb	r5, r5
 800dc10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc12:	07da      	lsls	r2, r3, #31
 800dc14:	d405      	bmi.n	800dc22 <_putc_r+0x5e>
 800dc16:	89a3      	ldrh	r3, [r4, #12]
 800dc18:	059b      	lsls	r3, r3, #22
 800dc1a:	d402      	bmi.n	800dc22 <_putc_r+0x5e>
 800dc1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc1e:	f7ff fa40 	bl	800d0a2 <__retarget_lock_release_recursive>
 800dc22:	4628      	mov	r0, r5
 800dc24:	bd70      	pop	{r4, r5, r6, pc}
 800dc26:	4b09      	ldr	r3, [pc, #36]	; (800dc4c <_putc_r+0x88>)
 800dc28:	429c      	cmp	r4, r3
 800dc2a:	d101      	bne.n	800dc30 <_putc_r+0x6c>
 800dc2c:	68b4      	ldr	r4, [r6, #8]
 800dc2e:	e7d6      	b.n	800dbde <_putc_r+0x1a>
 800dc30:	4b07      	ldr	r3, [pc, #28]	; (800dc50 <_putc_r+0x8c>)
 800dc32:	429c      	cmp	r4, r3
 800dc34:	bf08      	it	eq
 800dc36:	68f4      	ldreq	r4, [r6, #12]
 800dc38:	e7d1      	b.n	800dbde <_putc_r+0x1a>
 800dc3a:	4629      	mov	r1, r5
 800dc3c:	4622      	mov	r2, r4
 800dc3e:	4630      	mov	r0, r6
 800dc40:	f7fe ffb6 	bl	800cbb0 <__swbuf_r>
 800dc44:	4605      	mov	r5, r0
 800dc46:	e7e3      	b.n	800dc10 <_putc_r+0x4c>
 800dc48:	0800fe00 	.word	0x0800fe00
 800dc4c:	0800fe20 	.word	0x0800fe20
 800dc50:	0800fde0 	.word	0x0800fde0

0800dc54 <_sbrk_r>:
 800dc54:	b538      	push	{r3, r4, r5, lr}
 800dc56:	4d06      	ldr	r5, [pc, #24]	; (800dc70 <_sbrk_r+0x1c>)
 800dc58:	2300      	movs	r3, #0
 800dc5a:	4604      	mov	r4, r0
 800dc5c:	4608      	mov	r0, r1
 800dc5e:	602b      	str	r3, [r5, #0]
 800dc60:	f7f5 f8f2 	bl	8002e48 <_sbrk>
 800dc64:	1c43      	adds	r3, r0, #1
 800dc66:	d102      	bne.n	800dc6e <_sbrk_r+0x1a>
 800dc68:	682b      	ldr	r3, [r5, #0]
 800dc6a:	b103      	cbz	r3, 800dc6e <_sbrk_r+0x1a>
 800dc6c:	6023      	str	r3, [r4, #0]
 800dc6e:	bd38      	pop	{r3, r4, r5, pc}
 800dc70:	200016f0 	.word	0x200016f0

0800dc74 <__sread>:
 800dc74:	b510      	push	{r4, lr}
 800dc76:	460c      	mov	r4, r1
 800dc78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc7c:	f000 f8f6 	bl	800de6c <_read_r>
 800dc80:	2800      	cmp	r0, #0
 800dc82:	bfab      	itete	ge
 800dc84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dc86:	89a3      	ldrhlt	r3, [r4, #12]
 800dc88:	181b      	addge	r3, r3, r0
 800dc8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dc8e:	bfac      	ite	ge
 800dc90:	6563      	strge	r3, [r4, #84]	; 0x54
 800dc92:	81a3      	strhlt	r3, [r4, #12]
 800dc94:	bd10      	pop	{r4, pc}

0800dc96 <__swrite>:
 800dc96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc9a:	461f      	mov	r7, r3
 800dc9c:	898b      	ldrh	r3, [r1, #12]
 800dc9e:	05db      	lsls	r3, r3, #23
 800dca0:	4605      	mov	r5, r0
 800dca2:	460c      	mov	r4, r1
 800dca4:	4616      	mov	r6, r2
 800dca6:	d505      	bpl.n	800dcb4 <__swrite+0x1e>
 800dca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcac:	2302      	movs	r3, #2
 800dcae:	2200      	movs	r2, #0
 800dcb0:	f000 f874 	bl	800dd9c <_lseek_r>
 800dcb4:	89a3      	ldrh	r3, [r4, #12]
 800dcb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dcbe:	81a3      	strh	r3, [r4, #12]
 800dcc0:	4632      	mov	r2, r6
 800dcc2:	463b      	mov	r3, r7
 800dcc4:	4628      	mov	r0, r5
 800dcc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcca:	f000 b823 	b.w	800dd14 <_write_r>

0800dcce <__sseek>:
 800dcce:	b510      	push	{r4, lr}
 800dcd0:	460c      	mov	r4, r1
 800dcd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcd6:	f000 f861 	bl	800dd9c <_lseek_r>
 800dcda:	1c43      	adds	r3, r0, #1
 800dcdc:	89a3      	ldrh	r3, [r4, #12]
 800dcde:	bf15      	itete	ne
 800dce0:	6560      	strne	r0, [r4, #84]	; 0x54
 800dce2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dce6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dcea:	81a3      	strheq	r3, [r4, #12]
 800dcec:	bf18      	it	ne
 800dcee:	81a3      	strhne	r3, [r4, #12]
 800dcf0:	bd10      	pop	{r4, pc}

0800dcf2 <__sclose>:
 800dcf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcf6:	f000 b81f 	b.w	800dd38 <_close_r>

0800dcfa <strchr>:
 800dcfa:	b2c9      	uxtb	r1, r1
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd02:	b11a      	cbz	r2, 800dd0c <strchr+0x12>
 800dd04:	428a      	cmp	r2, r1
 800dd06:	d1f9      	bne.n	800dcfc <strchr+0x2>
 800dd08:	4618      	mov	r0, r3
 800dd0a:	4770      	bx	lr
 800dd0c:	2900      	cmp	r1, #0
 800dd0e:	bf18      	it	ne
 800dd10:	2300      	movne	r3, #0
 800dd12:	e7f9      	b.n	800dd08 <strchr+0xe>

0800dd14 <_write_r>:
 800dd14:	b538      	push	{r3, r4, r5, lr}
 800dd16:	4d07      	ldr	r5, [pc, #28]	; (800dd34 <_write_r+0x20>)
 800dd18:	4604      	mov	r4, r0
 800dd1a:	4608      	mov	r0, r1
 800dd1c:	4611      	mov	r1, r2
 800dd1e:	2200      	movs	r2, #0
 800dd20:	602a      	str	r2, [r5, #0]
 800dd22:	461a      	mov	r2, r3
 800dd24:	f7fb fca0 	bl	8009668 <_write>
 800dd28:	1c43      	adds	r3, r0, #1
 800dd2a:	d102      	bne.n	800dd32 <_write_r+0x1e>
 800dd2c:	682b      	ldr	r3, [r5, #0]
 800dd2e:	b103      	cbz	r3, 800dd32 <_write_r+0x1e>
 800dd30:	6023      	str	r3, [r4, #0]
 800dd32:	bd38      	pop	{r3, r4, r5, pc}
 800dd34:	200016f0 	.word	0x200016f0

0800dd38 <_close_r>:
 800dd38:	b538      	push	{r3, r4, r5, lr}
 800dd3a:	4d06      	ldr	r5, [pc, #24]	; (800dd54 <_close_r+0x1c>)
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	4604      	mov	r4, r0
 800dd40:	4608      	mov	r0, r1
 800dd42:	602b      	str	r3, [r5, #0]
 800dd44:	f7f5 f84b 	bl	8002dde <_close>
 800dd48:	1c43      	adds	r3, r0, #1
 800dd4a:	d102      	bne.n	800dd52 <_close_r+0x1a>
 800dd4c:	682b      	ldr	r3, [r5, #0]
 800dd4e:	b103      	cbz	r3, 800dd52 <_close_r+0x1a>
 800dd50:	6023      	str	r3, [r4, #0]
 800dd52:	bd38      	pop	{r3, r4, r5, pc}
 800dd54:	200016f0 	.word	0x200016f0

0800dd58 <_fstat_r>:
 800dd58:	b538      	push	{r3, r4, r5, lr}
 800dd5a:	4d07      	ldr	r5, [pc, #28]	; (800dd78 <_fstat_r+0x20>)
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	4604      	mov	r4, r0
 800dd60:	4608      	mov	r0, r1
 800dd62:	4611      	mov	r1, r2
 800dd64:	602b      	str	r3, [r5, #0]
 800dd66:	f7f5 f846 	bl	8002df6 <_fstat>
 800dd6a:	1c43      	adds	r3, r0, #1
 800dd6c:	d102      	bne.n	800dd74 <_fstat_r+0x1c>
 800dd6e:	682b      	ldr	r3, [r5, #0]
 800dd70:	b103      	cbz	r3, 800dd74 <_fstat_r+0x1c>
 800dd72:	6023      	str	r3, [r4, #0]
 800dd74:	bd38      	pop	{r3, r4, r5, pc}
 800dd76:	bf00      	nop
 800dd78:	200016f0 	.word	0x200016f0

0800dd7c <_isatty_r>:
 800dd7c:	b538      	push	{r3, r4, r5, lr}
 800dd7e:	4d06      	ldr	r5, [pc, #24]	; (800dd98 <_isatty_r+0x1c>)
 800dd80:	2300      	movs	r3, #0
 800dd82:	4604      	mov	r4, r0
 800dd84:	4608      	mov	r0, r1
 800dd86:	602b      	str	r3, [r5, #0]
 800dd88:	f7f5 f845 	bl	8002e16 <_isatty>
 800dd8c:	1c43      	adds	r3, r0, #1
 800dd8e:	d102      	bne.n	800dd96 <_isatty_r+0x1a>
 800dd90:	682b      	ldr	r3, [r5, #0]
 800dd92:	b103      	cbz	r3, 800dd96 <_isatty_r+0x1a>
 800dd94:	6023      	str	r3, [r4, #0]
 800dd96:	bd38      	pop	{r3, r4, r5, pc}
 800dd98:	200016f0 	.word	0x200016f0

0800dd9c <_lseek_r>:
 800dd9c:	b538      	push	{r3, r4, r5, lr}
 800dd9e:	4d07      	ldr	r5, [pc, #28]	; (800ddbc <_lseek_r+0x20>)
 800dda0:	4604      	mov	r4, r0
 800dda2:	4608      	mov	r0, r1
 800dda4:	4611      	mov	r1, r2
 800dda6:	2200      	movs	r2, #0
 800dda8:	602a      	str	r2, [r5, #0]
 800ddaa:	461a      	mov	r2, r3
 800ddac:	f7f5 f83e 	bl	8002e2c <_lseek>
 800ddb0:	1c43      	adds	r3, r0, #1
 800ddb2:	d102      	bne.n	800ddba <_lseek_r+0x1e>
 800ddb4:	682b      	ldr	r3, [r5, #0]
 800ddb6:	b103      	cbz	r3, 800ddba <_lseek_r+0x1e>
 800ddb8:	6023      	str	r3, [r4, #0]
 800ddba:	bd38      	pop	{r3, r4, r5, pc}
 800ddbc:	200016f0 	.word	0x200016f0

0800ddc0 <memmove>:
 800ddc0:	4288      	cmp	r0, r1
 800ddc2:	b510      	push	{r4, lr}
 800ddc4:	eb01 0402 	add.w	r4, r1, r2
 800ddc8:	d902      	bls.n	800ddd0 <memmove+0x10>
 800ddca:	4284      	cmp	r4, r0
 800ddcc:	4623      	mov	r3, r4
 800ddce:	d807      	bhi.n	800dde0 <memmove+0x20>
 800ddd0:	1e43      	subs	r3, r0, #1
 800ddd2:	42a1      	cmp	r1, r4
 800ddd4:	d008      	beq.n	800dde8 <memmove+0x28>
 800ddd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ddda:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ddde:	e7f8      	b.n	800ddd2 <memmove+0x12>
 800dde0:	4402      	add	r2, r0
 800dde2:	4601      	mov	r1, r0
 800dde4:	428a      	cmp	r2, r1
 800dde6:	d100      	bne.n	800ddea <memmove+0x2a>
 800dde8:	bd10      	pop	{r4, pc}
 800ddea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ddee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ddf2:	e7f7      	b.n	800dde4 <memmove+0x24>

0800ddf4 <__malloc_lock>:
 800ddf4:	4801      	ldr	r0, [pc, #4]	; (800ddfc <__malloc_lock+0x8>)
 800ddf6:	f7ff b953 	b.w	800d0a0 <__retarget_lock_acquire_recursive>
 800ddfa:	bf00      	nop
 800ddfc:	200016e4 	.word	0x200016e4

0800de00 <__malloc_unlock>:
 800de00:	4801      	ldr	r0, [pc, #4]	; (800de08 <__malloc_unlock+0x8>)
 800de02:	f7ff b94e 	b.w	800d0a2 <__retarget_lock_release_recursive>
 800de06:	bf00      	nop
 800de08:	200016e4 	.word	0x200016e4

0800de0c <_realloc_r>:
 800de0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de10:	4680      	mov	r8, r0
 800de12:	4614      	mov	r4, r2
 800de14:	460e      	mov	r6, r1
 800de16:	b921      	cbnz	r1, 800de22 <_realloc_r+0x16>
 800de18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de1c:	4611      	mov	r1, r2
 800de1e:	f7ff ba13 	b.w	800d248 <_malloc_r>
 800de22:	b92a      	cbnz	r2, 800de30 <_realloc_r+0x24>
 800de24:	f7ff f9a4 	bl	800d170 <_free_r>
 800de28:	4625      	mov	r5, r4
 800de2a:	4628      	mov	r0, r5
 800de2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de30:	f000 f82e 	bl	800de90 <_malloc_usable_size_r>
 800de34:	4284      	cmp	r4, r0
 800de36:	4607      	mov	r7, r0
 800de38:	d802      	bhi.n	800de40 <_realloc_r+0x34>
 800de3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800de3e:	d812      	bhi.n	800de66 <_realloc_r+0x5a>
 800de40:	4621      	mov	r1, r4
 800de42:	4640      	mov	r0, r8
 800de44:	f7ff fa00 	bl	800d248 <_malloc_r>
 800de48:	4605      	mov	r5, r0
 800de4a:	2800      	cmp	r0, #0
 800de4c:	d0ed      	beq.n	800de2a <_realloc_r+0x1e>
 800de4e:	42bc      	cmp	r4, r7
 800de50:	4622      	mov	r2, r4
 800de52:	4631      	mov	r1, r6
 800de54:	bf28      	it	cs
 800de56:	463a      	movcs	r2, r7
 800de58:	f7fe fdb4 	bl	800c9c4 <memcpy>
 800de5c:	4631      	mov	r1, r6
 800de5e:	4640      	mov	r0, r8
 800de60:	f7ff f986 	bl	800d170 <_free_r>
 800de64:	e7e1      	b.n	800de2a <_realloc_r+0x1e>
 800de66:	4635      	mov	r5, r6
 800de68:	e7df      	b.n	800de2a <_realloc_r+0x1e>
	...

0800de6c <_read_r>:
 800de6c:	b538      	push	{r3, r4, r5, lr}
 800de6e:	4d07      	ldr	r5, [pc, #28]	; (800de8c <_read_r+0x20>)
 800de70:	4604      	mov	r4, r0
 800de72:	4608      	mov	r0, r1
 800de74:	4611      	mov	r1, r2
 800de76:	2200      	movs	r2, #0
 800de78:	602a      	str	r2, [r5, #0]
 800de7a:	461a      	mov	r2, r3
 800de7c:	f7f4 ff92 	bl	8002da4 <_read>
 800de80:	1c43      	adds	r3, r0, #1
 800de82:	d102      	bne.n	800de8a <_read_r+0x1e>
 800de84:	682b      	ldr	r3, [r5, #0]
 800de86:	b103      	cbz	r3, 800de8a <_read_r+0x1e>
 800de88:	6023      	str	r3, [r4, #0]
 800de8a:	bd38      	pop	{r3, r4, r5, pc}
 800de8c:	200016f0 	.word	0x200016f0

0800de90 <_malloc_usable_size_r>:
 800de90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de94:	1f18      	subs	r0, r3, #4
 800de96:	2b00      	cmp	r3, #0
 800de98:	bfbc      	itt	lt
 800de9a:	580b      	ldrlt	r3, [r1, r0]
 800de9c:	18c0      	addlt	r0, r0, r3
 800de9e:	4770      	bx	lr

0800dea0 <_init>:
 800dea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dea2:	bf00      	nop
 800dea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dea6:	bc08      	pop	{r3}
 800dea8:	469e      	mov	lr, r3
 800deaa:	4770      	bx	lr

0800deac <_fini>:
 800deac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deae:	bf00      	nop
 800deb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deb2:	bc08      	pop	{r3}
 800deb4:	469e      	mov	lr, r3
 800deb6:	4770      	bx	lr
